//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;


var ttypes = module.exports = {};
ttypes.TimeoutType = {
  'START_TO_CLOSE' : 0,
  'SCHEDULE_TO_START' : 1,
  'SCHEDULE_TO_CLOSE' : 2,
  'HEARTBEAT' : 3
};
ttypes.DecisionType = {
  'ScheduleActivityTask' : 0,
  'RequestCancelActivityTask' : 1,
  'StartTimer' : 2,
  'CompleteWorkflowExecution' : 3,
  'FailWorkflowExecution' : 4
};
ttypes.EventType = {
  'WorkflowExecutionStarted' : 0,
  'WorkflowExecutionCompleted' : 1,
  'WorkflowExecutionFailed' : 2,
  'WorkflowExecutionTimedOut' : 3,
  'DecisionTaskScheduled' : 4,
  'DecisionTaskStarted' : 5,
  'DecisionTaskCompleted' : 6,
  'DecisionTaskTimedOut' : 7,
  'ActivityTaskScheduled' : 8,
  'ActivityTaskStarted' : 9,
  'ActivityTaskCompleted' : 10,
  'ActivityTaskFailed' : 11,
  'ActivityTaskTimedOut' : 12,
  'ActivityTaskCancelRequested' : 13,
  'RequestCancelActivityTaskFailed' : 14,
  'ActivityTaskCanceled' : 15,
  'TimerStarted' : 16,
  'TimerFired' : 17,
  'CompleteWorkflowExecutionFailed' : 18
};
ttypes.WorkflowCompleteFailedCause = {
  'UNHANDLED_DECISION' : 0
};
var BadRequestError = module.exports.BadRequestError = function(args) {
  Thrift.TException.call(this, "BadRequestError")
  this.name = "BadRequestError"
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
    }
  }
};
Thrift.inherits(BadRequestError, Thrift.TException);
BadRequestError.prototype.name = 'BadRequestError';
BadRequestError.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

BadRequestError.prototype.write = function(output) {
  output.writeStructBegin('BadRequestError');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var InternalServiceError = module.exports.InternalServiceError = function(args) {
  Thrift.TException.call(this, "InternalServiceError")
  this.name = "InternalServiceError"
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
    }
  }
};
Thrift.inherits(InternalServiceError, Thrift.TException);
InternalServiceError.prototype.name = 'InternalServiceError';
InternalServiceError.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

InternalServiceError.prototype.write = function(output) {
  output.writeStructBegin('InternalServiceError');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WorkflowExecutionAlreadyStartedError = module.exports.WorkflowExecutionAlreadyStartedError = function(args) {
  Thrift.TException.call(this, "WorkflowExecutionAlreadyStartedError")
  this.name = "WorkflowExecutionAlreadyStartedError"
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
    }
  }
};
Thrift.inherits(WorkflowExecutionAlreadyStartedError, Thrift.TException);
WorkflowExecutionAlreadyStartedError.prototype.name = 'WorkflowExecutionAlreadyStartedError';
WorkflowExecutionAlreadyStartedError.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkflowExecutionAlreadyStartedError.prototype.write = function(output) {
  output.writeStructBegin('WorkflowExecutionAlreadyStartedError');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var EntityNotExistsError = module.exports.EntityNotExistsError = function(args) {
  Thrift.TException.call(this, "EntityNotExistsError")
  this.name = "EntityNotExistsError"
  this.message = null;
  if (args) {
    if (args.message !== undefined && args.message !== null) {
      this.message = args.message;
    } else {
      throw new Thrift.TProtocolException(Thrift.TProtocolExceptionType.UNKNOWN, 'Required field message is unset!');
    }
  }
};
Thrift.inherits(EntityNotExistsError, Thrift.TException);
EntityNotExistsError.prototype.name = 'EntityNotExistsError';
EntityNotExistsError.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRING) {
        this.message = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

EntityNotExistsError.prototype.write = function(output) {
  output.writeStructBegin('EntityNotExistsError');
  if (this.message !== null && this.message !== undefined) {
    output.writeFieldBegin('message', Thrift.Type.STRING, 1);
    output.writeString(this.message);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WorkflowType = module.exports.WorkflowType = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
WorkflowType.prototype = {};
WorkflowType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkflowType.prototype.write = function(output) {
  output.writeStructBegin('WorkflowType');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 10);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActivityType = module.exports.ActivityType = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
ActivityType.prototype = {};
ActivityType.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActivityType.prototype.write = function(output) {
  output.writeStructBegin('ActivityType');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 10);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TaskList = module.exports.TaskList = function(args) {
  this.name = null;
  if (args) {
    if (args.name !== undefined && args.name !== null) {
      this.name = args.name;
    }
  }
};
TaskList.prototype = {};
TaskList.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.name = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TaskList.prototype.write = function(output) {
  output.writeStructBegin('TaskList');
  if (this.name !== null && this.name !== undefined) {
    output.writeFieldBegin('name', Thrift.Type.STRING, 10);
    output.writeString(this.name);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WorkflowExecution = module.exports.WorkflowExecution = function(args) {
  this.workflowId = null;
  this.runId = null;
  if (args) {
    if (args.workflowId !== undefined && args.workflowId !== null) {
      this.workflowId = args.workflowId;
    }
    if (args.runId !== undefined && args.runId !== null) {
      this.runId = args.runId;
    }
  }
};
WorkflowExecution.prototype = {};
WorkflowExecution.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.workflowId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.runId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkflowExecution.prototype.write = function(output) {
  output.writeStructBegin('WorkflowExecution');
  if (this.workflowId !== null && this.workflowId !== undefined) {
    output.writeFieldBegin('workflowId', Thrift.Type.STRING, 10);
    output.writeString(this.workflowId);
    output.writeFieldEnd();
  }
  if (this.runId !== null && this.runId !== undefined) {
    output.writeFieldBegin('runId', Thrift.Type.STRING, 20);
    output.writeString(this.runId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ScheduleActivityTaskDecisionAttributes = module.exports.ScheduleActivityTaskDecisionAttributes = function(args) {
  this.activityId = null;
  this.activityType = null;
  this.taskList = null;
  this.input = null;
  this.scheduleToCloseTimeoutSeconds = null;
  this.scheduleToStartTimeoutSeconds = null;
  this.startToCloseTimeoutSeconds = null;
  this.heartbeatTimeoutSeconds = null;
  if (args) {
    if (args.activityId !== undefined && args.activityId !== null) {
      this.activityId = args.activityId;
    }
    if (args.activityType !== undefined && args.activityType !== null) {
      this.activityType = new ttypes.ActivityType(args.activityType);
    }
    if (args.taskList !== undefined && args.taskList !== null) {
      this.taskList = new ttypes.TaskList(args.taskList);
    }
    if (args.input !== undefined && args.input !== null) {
      this.input = args.input;
    }
    if (args.scheduleToCloseTimeoutSeconds !== undefined && args.scheduleToCloseTimeoutSeconds !== null) {
      this.scheduleToCloseTimeoutSeconds = args.scheduleToCloseTimeoutSeconds;
    }
    if (args.scheduleToStartTimeoutSeconds !== undefined && args.scheduleToStartTimeoutSeconds !== null) {
      this.scheduleToStartTimeoutSeconds = args.scheduleToStartTimeoutSeconds;
    }
    if (args.startToCloseTimeoutSeconds !== undefined && args.startToCloseTimeoutSeconds !== null) {
      this.startToCloseTimeoutSeconds = args.startToCloseTimeoutSeconds;
    }
    if (args.heartbeatTimeoutSeconds !== undefined && args.heartbeatTimeoutSeconds !== null) {
      this.heartbeatTimeoutSeconds = args.heartbeatTimeoutSeconds;
    }
  }
};
ScheduleActivityTaskDecisionAttributes.prototype = {};
ScheduleActivityTaskDecisionAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.activityId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRUCT) {
        this.activityType = new ttypes.ActivityType();
        this.activityType.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRUCT) {
        this.taskList = new ttypes.TaskList();
        this.taskList.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.STRING) {
        this.input = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 45:
      if (ftype == Thrift.Type.I32) {
        this.scheduleToCloseTimeoutSeconds = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 50:
      if (ftype == Thrift.Type.I32) {
        this.scheduleToStartTimeoutSeconds = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 55:
      if (ftype == Thrift.Type.I32) {
        this.startToCloseTimeoutSeconds = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 60:
      if (ftype == Thrift.Type.I32) {
        this.heartbeatTimeoutSeconds = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ScheduleActivityTaskDecisionAttributes.prototype.write = function(output) {
  output.writeStructBegin('ScheduleActivityTaskDecisionAttributes');
  if (this.activityId !== null && this.activityId !== undefined) {
    output.writeFieldBegin('activityId', Thrift.Type.STRING, 10);
    output.writeString(this.activityId);
    output.writeFieldEnd();
  }
  if (this.activityType !== null && this.activityType !== undefined) {
    output.writeFieldBegin('activityType', Thrift.Type.STRUCT, 20);
    this.activityType.write(output);
    output.writeFieldEnd();
  }
  if (this.taskList !== null && this.taskList !== undefined) {
    output.writeFieldBegin('taskList', Thrift.Type.STRUCT, 30);
    this.taskList.write(output);
    output.writeFieldEnd();
  }
  if (this.input !== null && this.input !== undefined) {
    output.writeFieldBegin('input', Thrift.Type.STRING, 40);
    output.writeBinary(this.input);
    output.writeFieldEnd();
  }
  if (this.scheduleToCloseTimeoutSeconds !== null && this.scheduleToCloseTimeoutSeconds !== undefined) {
    output.writeFieldBegin('scheduleToCloseTimeoutSeconds', Thrift.Type.I32, 45);
    output.writeI32(this.scheduleToCloseTimeoutSeconds);
    output.writeFieldEnd();
  }
  if (this.scheduleToStartTimeoutSeconds !== null && this.scheduleToStartTimeoutSeconds !== undefined) {
    output.writeFieldBegin('scheduleToStartTimeoutSeconds', Thrift.Type.I32, 50);
    output.writeI32(this.scheduleToStartTimeoutSeconds);
    output.writeFieldEnd();
  }
  if (this.startToCloseTimeoutSeconds !== null && this.startToCloseTimeoutSeconds !== undefined) {
    output.writeFieldBegin('startToCloseTimeoutSeconds', Thrift.Type.I32, 55);
    output.writeI32(this.startToCloseTimeoutSeconds);
    output.writeFieldEnd();
  }
  if (this.heartbeatTimeoutSeconds !== null && this.heartbeatTimeoutSeconds !== undefined) {
    output.writeFieldBegin('heartbeatTimeoutSeconds', Thrift.Type.I32, 60);
    output.writeI32(this.heartbeatTimeoutSeconds);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RequestCancelActivityTaskDecisionAttributes = module.exports.RequestCancelActivityTaskDecisionAttributes = function(args) {
  this.activityId = null;
  if (args) {
    if (args.activityId !== undefined && args.activityId !== null) {
      this.activityId = args.activityId;
    }
  }
};
RequestCancelActivityTaskDecisionAttributes.prototype = {};
RequestCancelActivityTaskDecisionAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.activityId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RequestCancelActivityTaskDecisionAttributes.prototype.write = function(output) {
  output.writeStructBegin('RequestCancelActivityTaskDecisionAttributes');
  if (this.activityId !== null && this.activityId !== undefined) {
    output.writeFieldBegin('activityId', Thrift.Type.STRING, 10);
    output.writeString(this.activityId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var StartTimerDecisionAttributes = module.exports.StartTimerDecisionAttributes = function(args) {
  this.timerId = null;
  this.startToFireTimeoutSeconds = null;
  if (args) {
    if (args.timerId !== undefined && args.timerId !== null) {
      this.timerId = args.timerId;
    }
    if (args.startToFireTimeoutSeconds !== undefined && args.startToFireTimeoutSeconds !== null) {
      this.startToFireTimeoutSeconds = args.startToFireTimeoutSeconds;
    }
  }
};
StartTimerDecisionAttributes.prototype = {};
StartTimerDecisionAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.timerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I64) {
        this.startToFireTimeoutSeconds = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StartTimerDecisionAttributes.prototype.write = function(output) {
  output.writeStructBegin('StartTimerDecisionAttributes');
  if (this.timerId !== null && this.timerId !== undefined) {
    output.writeFieldBegin('timerId', Thrift.Type.STRING, 10);
    output.writeString(this.timerId);
    output.writeFieldEnd();
  }
  if (this.startToFireTimeoutSeconds !== null && this.startToFireTimeoutSeconds !== undefined) {
    output.writeFieldBegin('startToFireTimeoutSeconds', Thrift.Type.I64, 20);
    output.writeI64(this.startToFireTimeoutSeconds);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CompleteWorkflowExecutionDecisionAttributes = module.exports.CompleteWorkflowExecutionDecisionAttributes = function(args) {
  this.result = null;
  if (args) {
    if (args.result !== undefined && args.result !== null) {
      this.result = args.result;
    }
  }
};
CompleteWorkflowExecutionDecisionAttributes.prototype = {};
CompleteWorkflowExecutionDecisionAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.result = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompleteWorkflowExecutionDecisionAttributes.prototype.write = function(output) {
  output.writeStructBegin('CompleteWorkflowExecutionDecisionAttributes');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRING, 10);
    output.writeBinary(this.result);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var FailWorkflowExecutionDecisionAttributes = module.exports.FailWorkflowExecutionDecisionAttributes = function(args) {
  this.reason = null;
  this.details = null;
  if (args) {
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
    if (args.details !== undefined && args.details !== null) {
      this.details = args.details;
    }
  }
};
FailWorkflowExecutionDecisionAttributes.prototype = {};
FailWorkflowExecutionDecisionAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.details = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

FailWorkflowExecutionDecisionAttributes.prototype.write = function(output) {
  output.writeStructBegin('FailWorkflowExecutionDecisionAttributes');
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 10);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRING, 20);
    output.writeBinary(this.details);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var Decision = module.exports.Decision = function(args) {
  this.decisionType = null;
  this.scheduleActivityTaskDecisionAttributes = null;
  this.startTimerDecisionAttributes = null;
  this.completeWorkflowExecutionDecisionAttributes = null;
  this.failWorkflowExecutionDecisionAttributes = null;
  this.requestCancelActivityTaskDecisionAttributes = null;
  if (args) {
    if (args.decisionType !== undefined && args.decisionType !== null) {
      this.decisionType = args.decisionType;
    }
    if (args.scheduleActivityTaskDecisionAttributes !== undefined && args.scheduleActivityTaskDecisionAttributes !== null) {
      this.scheduleActivityTaskDecisionAttributes = new ttypes.ScheduleActivityTaskDecisionAttributes(args.scheduleActivityTaskDecisionAttributes);
    }
    if (args.startTimerDecisionAttributes !== undefined && args.startTimerDecisionAttributes !== null) {
      this.startTimerDecisionAttributes = new ttypes.StartTimerDecisionAttributes(args.startTimerDecisionAttributes);
    }
    if (args.completeWorkflowExecutionDecisionAttributes !== undefined && args.completeWorkflowExecutionDecisionAttributes !== null) {
      this.completeWorkflowExecutionDecisionAttributes = new ttypes.CompleteWorkflowExecutionDecisionAttributes(args.completeWorkflowExecutionDecisionAttributes);
    }
    if (args.failWorkflowExecutionDecisionAttributes !== undefined && args.failWorkflowExecutionDecisionAttributes !== null) {
      this.failWorkflowExecutionDecisionAttributes = new ttypes.FailWorkflowExecutionDecisionAttributes(args.failWorkflowExecutionDecisionAttributes);
    }
    if (args.requestCancelActivityTaskDecisionAttributes !== undefined && args.requestCancelActivityTaskDecisionAttributes !== null) {
      this.requestCancelActivityTaskDecisionAttributes = new ttypes.RequestCancelActivityTaskDecisionAttributes(args.requestCancelActivityTaskDecisionAttributes);
    }
  }
};
Decision.prototype = {};
Decision.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.decisionType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRUCT) {
        this.scheduleActivityTaskDecisionAttributes = new ttypes.ScheduleActivityTaskDecisionAttributes();
        this.scheduleActivityTaskDecisionAttributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 25:
      if (ftype == Thrift.Type.STRUCT) {
        this.startTimerDecisionAttributes = new ttypes.StartTimerDecisionAttributes();
        this.startTimerDecisionAttributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRUCT) {
        this.completeWorkflowExecutionDecisionAttributes = new ttypes.CompleteWorkflowExecutionDecisionAttributes();
        this.completeWorkflowExecutionDecisionAttributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 35:
      if (ftype == Thrift.Type.STRUCT) {
        this.failWorkflowExecutionDecisionAttributes = new ttypes.FailWorkflowExecutionDecisionAttributes();
        this.failWorkflowExecutionDecisionAttributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestCancelActivityTaskDecisionAttributes = new ttypes.RequestCancelActivityTaskDecisionAttributes();
        this.requestCancelActivityTaskDecisionAttributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

Decision.prototype.write = function(output) {
  output.writeStructBegin('Decision');
  if (this.decisionType !== null && this.decisionType !== undefined) {
    output.writeFieldBegin('decisionType', Thrift.Type.I32, 10);
    output.writeI32(this.decisionType);
    output.writeFieldEnd();
  }
  if (this.scheduleActivityTaskDecisionAttributes !== null && this.scheduleActivityTaskDecisionAttributes !== undefined) {
    output.writeFieldBegin('scheduleActivityTaskDecisionAttributes', Thrift.Type.STRUCT, 20);
    this.scheduleActivityTaskDecisionAttributes.write(output);
    output.writeFieldEnd();
  }
  if (this.startTimerDecisionAttributes !== null && this.startTimerDecisionAttributes !== undefined) {
    output.writeFieldBegin('startTimerDecisionAttributes', Thrift.Type.STRUCT, 25);
    this.startTimerDecisionAttributes.write(output);
    output.writeFieldEnd();
  }
  if (this.completeWorkflowExecutionDecisionAttributes !== null && this.completeWorkflowExecutionDecisionAttributes !== undefined) {
    output.writeFieldBegin('completeWorkflowExecutionDecisionAttributes', Thrift.Type.STRUCT, 30);
    this.completeWorkflowExecutionDecisionAttributes.write(output);
    output.writeFieldEnd();
  }
  if (this.failWorkflowExecutionDecisionAttributes !== null && this.failWorkflowExecutionDecisionAttributes !== undefined) {
    output.writeFieldBegin('failWorkflowExecutionDecisionAttributes', Thrift.Type.STRUCT, 35);
    this.failWorkflowExecutionDecisionAttributes.write(output);
    output.writeFieldEnd();
  }
  if (this.requestCancelActivityTaskDecisionAttributes !== null && this.requestCancelActivityTaskDecisionAttributes !== undefined) {
    output.writeFieldBegin('requestCancelActivityTaskDecisionAttributes', Thrift.Type.STRUCT, 40);
    this.requestCancelActivityTaskDecisionAttributes.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WorkflowExecutionStartedEventAttributes = module.exports.WorkflowExecutionStartedEventAttributes = function(args) {
  this.workflowType = null;
  this.taskList = null;
  this.input = null;
  this.executionStartToCloseTimeoutSeconds = null;
  this.taskStartToCloseTimeoutSeconds = null;
  this.identity = null;
  if (args) {
    if (args.workflowType !== undefined && args.workflowType !== null) {
      this.workflowType = new ttypes.WorkflowType(args.workflowType);
    }
    if (args.taskList !== undefined && args.taskList !== null) {
      this.taskList = new ttypes.TaskList(args.taskList);
    }
    if (args.input !== undefined && args.input !== null) {
      this.input = args.input;
    }
    if (args.executionStartToCloseTimeoutSeconds !== undefined && args.executionStartToCloseTimeoutSeconds !== null) {
      this.executionStartToCloseTimeoutSeconds = args.executionStartToCloseTimeoutSeconds;
    }
    if (args.taskStartToCloseTimeoutSeconds !== undefined && args.taskStartToCloseTimeoutSeconds !== null) {
      this.taskStartToCloseTimeoutSeconds = args.taskStartToCloseTimeoutSeconds;
    }
    if (args.identity !== undefined && args.identity !== null) {
      this.identity = args.identity;
    }
  }
};
WorkflowExecutionStartedEventAttributes.prototype = {};
WorkflowExecutionStartedEventAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.workflowType = new ttypes.WorkflowType();
        this.workflowType.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRUCT) {
        this.taskList = new ttypes.TaskList();
        this.taskList.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRING) {
        this.input = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.I32) {
        this.executionStartToCloseTimeoutSeconds = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 50:
      if (ftype == Thrift.Type.I32) {
        this.taskStartToCloseTimeoutSeconds = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 60:
      if (ftype == Thrift.Type.STRING) {
        this.identity = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkflowExecutionStartedEventAttributes.prototype.write = function(output) {
  output.writeStructBegin('WorkflowExecutionStartedEventAttributes');
  if (this.workflowType !== null && this.workflowType !== undefined) {
    output.writeFieldBegin('workflowType', Thrift.Type.STRUCT, 10);
    this.workflowType.write(output);
    output.writeFieldEnd();
  }
  if (this.taskList !== null && this.taskList !== undefined) {
    output.writeFieldBegin('taskList', Thrift.Type.STRUCT, 20);
    this.taskList.write(output);
    output.writeFieldEnd();
  }
  if (this.input !== null && this.input !== undefined) {
    output.writeFieldBegin('input', Thrift.Type.STRING, 30);
    output.writeBinary(this.input);
    output.writeFieldEnd();
  }
  if (this.executionStartToCloseTimeoutSeconds !== null && this.executionStartToCloseTimeoutSeconds !== undefined) {
    output.writeFieldBegin('executionStartToCloseTimeoutSeconds', Thrift.Type.I32, 40);
    output.writeI32(this.executionStartToCloseTimeoutSeconds);
    output.writeFieldEnd();
  }
  if (this.taskStartToCloseTimeoutSeconds !== null && this.taskStartToCloseTimeoutSeconds !== undefined) {
    output.writeFieldBegin('taskStartToCloseTimeoutSeconds', Thrift.Type.I32, 50);
    output.writeI32(this.taskStartToCloseTimeoutSeconds);
    output.writeFieldEnd();
  }
  if (this.identity !== null && this.identity !== undefined) {
    output.writeFieldBegin('identity', Thrift.Type.STRING, 60);
    output.writeString(this.identity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WorkflowExecutionCompletedEventAttributes = module.exports.WorkflowExecutionCompletedEventAttributes = function(args) {
  this.result = null;
  this.decisionTaskCompletedEventId = null;
  if (args) {
    if (args.result !== undefined && args.result !== null) {
      this.result = args.result;
    }
    if (args.decisionTaskCompletedEventId !== undefined && args.decisionTaskCompletedEventId !== null) {
      this.decisionTaskCompletedEventId = args.decisionTaskCompletedEventId;
    }
  }
};
WorkflowExecutionCompletedEventAttributes.prototype = {};
WorkflowExecutionCompletedEventAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.result = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I64) {
        this.decisionTaskCompletedEventId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkflowExecutionCompletedEventAttributes.prototype.write = function(output) {
  output.writeStructBegin('WorkflowExecutionCompletedEventAttributes');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRING, 10);
    output.writeBinary(this.result);
    output.writeFieldEnd();
  }
  if (this.decisionTaskCompletedEventId !== null && this.decisionTaskCompletedEventId !== undefined) {
    output.writeFieldBegin('decisionTaskCompletedEventId', Thrift.Type.I64, 20);
    output.writeI64(this.decisionTaskCompletedEventId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WorkflowExecutionFailedEventAttributes = module.exports.WorkflowExecutionFailedEventAttributes = function(args) {
  this.reason = null;
  this.details = null;
  this.decisionTaskCompletedEventId = null;
  if (args) {
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
    if (args.details !== undefined && args.details !== null) {
      this.details = args.details;
    }
    if (args.decisionTaskCompletedEventId !== undefined && args.decisionTaskCompletedEventId !== null) {
      this.decisionTaskCompletedEventId = args.decisionTaskCompletedEventId;
    }
  }
};
WorkflowExecutionFailedEventAttributes.prototype = {};
WorkflowExecutionFailedEventAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.details = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.I64) {
        this.decisionTaskCompletedEventId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkflowExecutionFailedEventAttributes.prototype.write = function(output) {
  output.writeStructBegin('WorkflowExecutionFailedEventAttributes');
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 10);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRING, 20);
    output.writeBinary(this.details);
    output.writeFieldEnd();
  }
  if (this.decisionTaskCompletedEventId !== null && this.decisionTaskCompletedEventId !== undefined) {
    output.writeFieldBegin('decisionTaskCompletedEventId', Thrift.Type.I64, 30);
    output.writeI64(this.decisionTaskCompletedEventId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WorkflowExecutionTimedOutEventAttributes = module.exports.WorkflowExecutionTimedOutEventAttributes = function(args) {
  this.timeoutType = null;
  if (args) {
    if (args.timeoutType !== undefined && args.timeoutType !== null) {
      this.timeoutType = args.timeoutType;
    }
  }
};
WorkflowExecutionTimedOutEventAttributes.prototype = {};
WorkflowExecutionTimedOutEventAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.timeoutType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkflowExecutionTimedOutEventAttributes.prototype.write = function(output) {
  output.writeStructBegin('WorkflowExecutionTimedOutEventAttributes');
  if (this.timeoutType !== null && this.timeoutType !== undefined) {
    output.writeFieldBegin('timeoutType', Thrift.Type.I32, 10);
    output.writeI32(this.timeoutType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var CompleteWorkflowExecutionFailedEventAttributes = module.exports.CompleteWorkflowExecutionFailedEventAttributes = function(args) {
  this.cause = null;
  this.decisionTaskCompletedEventId = null;
  if (args) {
    if (args.cause !== undefined && args.cause !== null) {
      this.cause = args.cause;
    }
    if (args.decisionTaskCompletedEventId !== undefined && args.decisionTaskCompletedEventId !== null) {
      this.decisionTaskCompletedEventId = args.decisionTaskCompletedEventId;
    }
  }
};
CompleteWorkflowExecutionFailedEventAttributes.prototype = {};
CompleteWorkflowExecutionFailedEventAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.I32) {
        this.cause = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I64) {
        this.decisionTaskCompletedEventId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

CompleteWorkflowExecutionFailedEventAttributes.prototype.write = function(output) {
  output.writeStructBegin('CompleteWorkflowExecutionFailedEventAttributes');
  if (this.cause !== null && this.cause !== undefined) {
    output.writeFieldBegin('cause', Thrift.Type.I32, 10);
    output.writeI32(this.cause);
    output.writeFieldEnd();
  }
  if (this.decisionTaskCompletedEventId !== null && this.decisionTaskCompletedEventId !== undefined) {
    output.writeFieldBegin('decisionTaskCompletedEventId', Thrift.Type.I64, 20);
    output.writeI64(this.decisionTaskCompletedEventId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DecisionTaskScheduledEventAttributes = module.exports.DecisionTaskScheduledEventAttributes = function(args) {
  this.taskList = null;
  this.startToCloseTimeoutSeconds = null;
  if (args) {
    if (args.taskList !== undefined && args.taskList !== null) {
      this.taskList = new ttypes.TaskList(args.taskList);
    }
    if (args.startToCloseTimeoutSeconds !== undefined && args.startToCloseTimeoutSeconds !== null) {
      this.startToCloseTimeoutSeconds = args.startToCloseTimeoutSeconds;
    }
  }
};
DecisionTaskScheduledEventAttributes.prototype = {};
DecisionTaskScheduledEventAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.taskList = new ttypes.TaskList();
        this.taskList.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I32) {
        this.startToCloseTimeoutSeconds = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DecisionTaskScheduledEventAttributes.prototype.write = function(output) {
  output.writeStructBegin('DecisionTaskScheduledEventAttributes');
  if (this.taskList !== null && this.taskList !== undefined) {
    output.writeFieldBegin('taskList', Thrift.Type.STRUCT, 10);
    this.taskList.write(output);
    output.writeFieldEnd();
  }
  if (this.startToCloseTimeoutSeconds !== null && this.startToCloseTimeoutSeconds !== undefined) {
    output.writeFieldBegin('startToCloseTimeoutSeconds', Thrift.Type.I32, 20);
    output.writeI32(this.startToCloseTimeoutSeconds);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DecisionTaskStartedEventAttributes = module.exports.DecisionTaskStartedEventAttributes = function(args) {
  this.scheduledEventId = null;
  this.identity = null;
  this.requestId = null;
  if (args) {
    if (args.scheduledEventId !== undefined && args.scheduledEventId !== null) {
      this.scheduledEventId = args.scheduledEventId;
    }
    if (args.identity !== undefined && args.identity !== null) {
      this.identity = args.identity;
    }
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
  }
};
DecisionTaskStartedEventAttributes.prototype = {};
DecisionTaskStartedEventAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.scheduledEventId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.identity = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DecisionTaskStartedEventAttributes.prototype.write = function(output) {
  output.writeStructBegin('DecisionTaskStartedEventAttributes');
  if (this.scheduledEventId !== null && this.scheduledEventId !== undefined) {
    output.writeFieldBegin('scheduledEventId', Thrift.Type.I64, 10);
    output.writeI64(this.scheduledEventId);
    output.writeFieldEnd();
  }
  if (this.identity !== null && this.identity !== undefined) {
    output.writeFieldBegin('identity', Thrift.Type.STRING, 20);
    output.writeString(this.identity);
    output.writeFieldEnd();
  }
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 30);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DecisionTaskCompletedEventAttributes = module.exports.DecisionTaskCompletedEventAttributes = function(args) {
  this.executionContext = null;
  this.scheduledEventId = null;
  this.startedEventId = null;
  this.identity = null;
  if (args) {
    if (args.executionContext !== undefined && args.executionContext !== null) {
      this.executionContext = args.executionContext;
    }
    if (args.scheduledEventId !== undefined && args.scheduledEventId !== null) {
      this.scheduledEventId = args.scheduledEventId;
    }
    if (args.startedEventId !== undefined && args.startedEventId !== null) {
      this.startedEventId = args.startedEventId;
    }
    if (args.identity !== undefined && args.identity !== null) {
      this.identity = args.identity;
    }
  }
};
DecisionTaskCompletedEventAttributes.prototype = {};
DecisionTaskCompletedEventAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.executionContext = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I64) {
        this.scheduledEventId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.I64) {
        this.startedEventId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.STRING) {
        this.identity = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DecisionTaskCompletedEventAttributes.prototype.write = function(output) {
  output.writeStructBegin('DecisionTaskCompletedEventAttributes');
  if (this.executionContext !== null && this.executionContext !== undefined) {
    output.writeFieldBegin('executionContext', Thrift.Type.STRING, 10);
    output.writeBinary(this.executionContext);
    output.writeFieldEnd();
  }
  if (this.scheduledEventId !== null && this.scheduledEventId !== undefined) {
    output.writeFieldBegin('scheduledEventId', Thrift.Type.I64, 20);
    output.writeI64(this.scheduledEventId);
    output.writeFieldEnd();
  }
  if (this.startedEventId !== null && this.startedEventId !== undefined) {
    output.writeFieldBegin('startedEventId', Thrift.Type.I64, 30);
    output.writeI64(this.startedEventId);
    output.writeFieldEnd();
  }
  if (this.identity !== null && this.identity !== undefined) {
    output.writeFieldBegin('identity', Thrift.Type.STRING, 40);
    output.writeString(this.identity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var DecisionTaskTimedOutEventAttributes = module.exports.DecisionTaskTimedOutEventAttributes = function(args) {
  this.scheduledEventId = null;
  this.startedEventId = null;
  this.timeoutType = null;
  if (args) {
    if (args.scheduledEventId !== undefined && args.scheduledEventId !== null) {
      this.scheduledEventId = args.scheduledEventId;
    }
    if (args.startedEventId !== undefined && args.startedEventId !== null) {
      this.startedEventId = args.startedEventId;
    }
    if (args.timeoutType !== undefined && args.timeoutType !== null) {
      this.timeoutType = args.timeoutType;
    }
  }
};
DecisionTaskTimedOutEventAttributes.prototype = {};
DecisionTaskTimedOutEventAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.scheduledEventId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I64) {
        this.startedEventId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.I32) {
        this.timeoutType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

DecisionTaskTimedOutEventAttributes.prototype.write = function(output) {
  output.writeStructBegin('DecisionTaskTimedOutEventAttributes');
  if (this.scheduledEventId !== null && this.scheduledEventId !== undefined) {
    output.writeFieldBegin('scheduledEventId', Thrift.Type.I64, 10);
    output.writeI64(this.scheduledEventId);
    output.writeFieldEnd();
  }
  if (this.startedEventId !== null && this.startedEventId !== undefined) {
    output.writeFieldBegin('startedEventId', Thrift.Type.I64, 20);
    output.writeI64(this.startedEventId);
    output.writeFieldEnd();
  }
  if (this.timeoutType !== null && this.timeoutType !== undefined) {
    output.writeFieldBegin('timeoutType', Thrift.Type.I32, 30);
    output.writeI32(this.timeoutType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActivityTaskScheduledEventAttributes = module.exports.ActivityTaskScheduledEventAttributes = function(args) {
  this.activityId = null;
  this.activityType = null;
  this.taskList = null;
  this.input = null;
  this.scheduleToCloseTimeoutSeconds = null;
  this.scheduleToStartTimeoutSeconds = null;
  this.startToCloseTimeoutSeconds = null;
  this.heartbeatTimeoutSeconds = null;
  this.decisionTaskCompletedEventId = null;
  if (args) {
    if (args.activityId !== undefined && args.activityId !== null) {
      this.activityId = args.activityId;
    }
    if (args.activityType !== undefined && args.activityType !== null) {
      this.activityType = new ttypes.ActivityType(args.activityType);
    }
    if (args.taskList !== undefined && args.taskList !== null) {
      this.taskList = new ttypes.TaskList(args.taskList);
    }
    if (args.input !== undefined && args.input !== null) {
      this.input = args.input;
    }
    if (args.scheduleToCloseTimeoutSeconds !== undefined && args.scheduleToCloseTimeoutSeconds !== null) {
      this.scheduleToCloseTimeoutSeconds = args.scheduleToCloseTimeoutSeconds;
    }
    if (args.scheduleToStartTimeoutSeconds !== undefined && args.scheduleToStartTimeoutSeconds !== null) {
      this.scheduleToStartTimeoutSeconds = args.scheduleToStartTimeoutSeconds;
    }
    if (args.startToCloseTimeoutSeconds !== undefined && args.startToCloseTimeoutSeconds !== null) {
      this.startToCloseTimeoutSeconds = args.startToCloseTimeoutSeconds;
    }
    if (args.heartbeatTimeoutSeconds !== undefined && args.heartbeatTimeoutSeconds !== null) {
      this.heartbeatTimeoutSeconds = args.heartbeatTimeoutSeconds;
    }
    if (args.decisionTaskCompletedEventId !== undefined && args.decisionTaskCompletedEventId !== null) {
      this.decisionTaskCompletedEventId = args.decisionTaskCompletedEventId;
    }
  }
};
ActivityTaskScheduledEventAttributes.prototype = {};
ActivityTaskScheduledEventAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.activityId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRUCT) {
        this.activityType = new ttypes.ActivityType();
        this.activityType.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRUCT) {
        this.taskList = new ttypes.TaskList();
        this.taskList.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.STRING) {
        this.input = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 45:
      if (ftype == Thrift.Type.I32) {
        this.scheduleToCloseTimeoutSeconds = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 50:
      if (ftype == Thrift.Type.I32) {
        this.scheduleToStartTimeoutSeconds = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 55:
      if (ftype == Thrift.Type.I32) {
        this.startToCloseTimeoutSeconds = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 60:
      if (ftype == Thrift.Type.I32) {
        this.heartbeatTimeoutSeconds = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 90:
      if (ftype == Thrift.Type.I64) {
        this.decisionTaskCompletedEventId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActivityTaskScheduledEventAttributes.prototype.write = function(output) {
  output.writeStructBegin('ActivityTaskScheduledEventAttributes');
  if (this.activityId !== null && this.activityId !== undefined) {
    output.writeFieldBegin('activityId', Thrift.Type.STRING, 10);
    output.writeString(this.activityId);
    output.writeFieldEnd();
  }
  if (this.activityType !== null && this.activityType !== undefined) {
    output.writeFieldBegin('activityType', Thrift.Type.STRUCT, 20);
    this.activityType.write(output);
    output.writeFieldEnd();
  }
  if (this.taskList !== null && this.taskList !== undefined) {
    output.writeFieldBegin('taskList', Thrift.Type.STRUCT, 30);
    this.taskList.write(output);
    output.writeFieldEnd();
  }
  if (this.input !== null && this.input !== undefined) {
    output.writeFieldBegin('input', Thrift.Type.STRING, 40);
    output.writeBinary(this.input);
    output.writeFieldEnd();
  }
  if (this.scheduleToCloseTimeoutSeconds !== null && this.scheduleToCloseTimeoutSeconds !== undefined) {
    output.writeFieldBegin('scheduleToCloseTimeoutSeconds', Thrift.Type.I32, 45);
    output.writeI32(this.scheduleToCloseTimeoutSeconds);
    output.writeFieldEnd();
  }
  if (this.scheduleToStartTimeoutSeconds !== null && this.scheduleToStartTimeoutSeconds !== undefined) {
    output.writeFieldBegin('scheduleToStartTimeoutSeconds', Thrift.Type.I32, 50);
    output.writeI32(this.scheduleToStartTimeoutSeconds);
    output.writeFieldEnd();
  }
  if (this.startToCloseTimeoutSeconds !== null && this.startToCloseTimeoutSeconds !== undefined) {
    output.writeFieldBegin('startToCloseTimeoutSeconds', Thrift.Type.I32, 55);
    output.writeI32(this.startToCloseTimeoutSeconds);
    output.writeFieldEnd();
  }
  if (this.heartbeatTimeoutSeconds !== null && this.heartbeatTimeoutSeconds !== undefined) {
    output.writeFieldBegin('heartbeatTimeoutSeconds', Thrift.Type.I32, 60);
    output.writeI32(this.heartbeatTimeoutSeconds);
    output.writeFieldEnd();
  }
  if (this.decisionTaskCompletedEventId !== null && this.decisionTaskCompletedEventId !== undefined) {
    output.writeFieldBegin('decisionTaskCompletedEventId', Thrift.Type.I64, 90);
    output.writeI64(this.decisionTaskCompletedEventId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActivityTaskStartedEventAttributes = module.exports.ActivityTaskStartedEventAttributes = function(args) {
  this.scheduledEventId = null;
  this.identity = null;
  this.requestId = null;
  if (args) {
    if (args.scheduledEventId !== undefined && args.scheduledEventId !== null) {
      this.scheduledEventId = args.scheduledEventId;
    }
    if (args.identity !== undefined && args.identity !== null) {
      this.identity = args.identity;
    }
    if (args.requestId !== undefined && args.requestId !== null) {
      this.requestId = args.requestId;
    }
  }
};
ActivityTaskStartedEventAttributes.prototype = {};
ActivityTaskStartedEventAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.scheduledEventId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.identity = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRING) {
        this.requestId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActivityTaskStartedEventAttributes.prototype.write = function(output) {
  output.writeStructBegin('ActivityTaskStartedEventAttributes');
  if (this.scheduledEventId !== null && this.scheduledEventId !== undefined) {
    output.writeFieldBegin('scheduledEventId', Thrift.Type.I64, 10);
    output.writeI64(this.scheduledEventId);
    output.writeFieldEnd();
  }
  if (this.identity !== null && this.identity !== undefined) {
    output.writeFieldBegin('identity', Thrift.Type.STRING, 20);
    output.writeString(this.identity);
    output.writeFieldEnd();
  }
  if (this.requestId !== null && this.requestId !== undefined) {
    output.writeFieldBegin('requestId', Thrift.Type.STRING, 30);
    output.writeString(this.requestId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActivityTaskCompletedEventAttributes = module.exports.ActivityTaskCompletedEventAttributes = function(args) {
  this.result = null;
  this.scheduledEventId = null;
  this.startedEventId = null;
  this.identity = null;
  if (args) {
    if (args.result !== undefined && args.result !== null) {
      this.result = args.result;
    }
    if (args.scheduledEventId !== undefined && args.scheduledEventId !== null) {
      this.scheduledEventId = args.scheduledEventId;
    }
    if (args.startedEventId !== undefined && args.startedEventId !== null) {
      this.startedEventId = args.startedEventId;
    }
    if (args.identity !== undefined && args.identity !== null) {
      this.identity = args.identity;
    }
  }
};
ActivityTaskCompletedEventAttributes.prototype = {};
ActivityTaskCompletedEventAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.result = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I64) {
        this.scheduledEventId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.I64) {
        this.startedEventId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.STRING) {
        this.identity = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActivityTaskCompletedEventAttributes.prototype.write = function(output) {
  output.writeStructBegin('ActivityTaskCompletedEventAttributes');
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRING, 10);
    output.writeBinary(this.result);
    output.writeFieldEnd();
  }
  if (this.scheduledEventId !== null && this.scheduledEventId !== undefined) {
    output.writeFieldBegin('scheduledEventId', Thrift.Type.I64, 20);
    output.writeI64(this.scheduledEventId);
    output.writeFieldEnd();
  }
  if (this.startedEventId !== null && this.startedEventId !== undefined) {
    output.writeFieldBegin('startedEventId', Thrift.Type.I64, 30);
    output.writeI64(this.startedEventId);
    output.writeFieldEnd();
  }
  if (this.identity !== null && this.identity !== undefined) {
    output.writeFieldBegin('identity', Thrift.Type.STRING, 40);
    output.writeString(this.identity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActivityTaskFailedEventAttributes = module.exports.ActivityTaskFailedEventAttributes = function(args) {
  this.reason = null;
  this.details = null;
  this.scheduledEventId = null;
  this.startedEventId = null;
  this.identity = null;
  if (args) {
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
    if (args.details !== undefined && args.details !== null) {
      this.details = args.details;
    }
    if (args.scheduledEventId !== undefined && args.scheduledEventId !== null) {
      this.scheduledEventId = args.scheduledEventId;
    }
    if (args.startedEventId !== undefined && args.startedEventId !== null) {
      this.startedEventId = args.startedEventId;
    }
    if (args.identity !== undefined && args.identity !== null) {
      this.identity = args.identity;
    }
  }
};
ActivityTaskFailedEventAttributes.prototype = {};
ActivityTaskFailedEventAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.details = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.I64) {
        this.scheduledEventId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.I64) {
        this.startedEventId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 50:
      if (ftype == Thrift.Type.STRING) {
        this.identity = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActivityTaskFailedEventAttributes.prototype.write = function(output) {
  output.writeStructBegin('ActivityTaskFailedEventAttributes');
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 10);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRING, 20);
    output.writeBinary(this.details);
    output.writeFieldEnd();
  }
  if (this.scheduledEventId !== null && this.scheduledEventId !== undefined) {
    output.writeFieldBegin('scheduledEventId', Thrift.Type.I64, 30);
    output.writeI64(this.scheduledEventId);
    output.writeFieldEnd();
  }
  if (this.startedEventId !== null && this.startedEventId !== undefined) {
    output.writeFieldBegin('startedEventId', Thrift.Type.I64, 40);
    output.writeI64(this.startedEventId);
    output.writeFieldEnd();
  }
  if (this.identity !== null && this.identity !== undefined) {
    output.writeFieldBegin('identity', Thrift.Type.STRING, 50);
    output.writeString(this.identity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActivityTaskTimedOutEventAttributes = module.exports.ActivityTaskTimedOutEventAttributes = function(args) {
  this.details = null;
  this.scheduledEventId = null;
  this.startedEventId = null;
  this.timeoutType = null;
  if (args) {
    if (args.details !== undefined && args.details !== null) {
      this.details = args.details;
    }
    if (args.scheduledEventId !== undefined && args.scheduledEventId !== null) {
      this.scheduledEventId = args.scheduledEventId;
    }
    if (args.startedEventId !== undefined && args.startedEventId !== null) {
      this.startedEventId = args.startedEventId;
    }
    if (args.timeoutType !== undefined && args.timeoutType !== null) {
      this.timeoutType = args.timeoutType;
    }
  }
};
ActivityTaskTimedOutEventAttributes.prototype = {};
ActivityTaskTimedOutEventAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 5:
      if (ftype == Thrift.Type.STRING) {
        this.details = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.scheduledEventId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I64) {
        this.startedEventId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.I32) {
        this.timeoutType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActivityTaskTimedOutEventAttributes.prototype.write = function(output) {
  output.writeStructBegin('ActivityTaskTimedOutEventAttributes');
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRING, 5);
    output.writeBinary(this.details);
    output.writeFieldEnd();
  }
  if (this.scheduledEventId !== null && this.scheduledEventId !== undefined) {
    output.writeFieldBegin('scheduledEventId', Thrift.Type.I64, 10);
    output.writeI64(this.scheduledEventId);
    output.writeFieldEnd();
  }
  if (this.startedEventId !== null && this.startedEventId !== undefined) {
    output.writeFieldBegin('startedEventId', Thrift.Type.I64, 20);
    output.writeI64(this.startedEventId);
    output.writeFieldEnd();
  }
  if (this.timeoutType !== null && this.timeoutType !== undefined) {
    output.writeFieldBegin('timeoutType', Thrift.Type.I32, 30);
    output.writeI32(this.timeoutType);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActivityTaskCancelRequestedEventAttributes = module.exports.ActivityTaskCancelRequestedEventAttributes = function(args) {
  this.activityId = null;
  this.decisionTaskCompletedEventId = null;
  if (args) {
    if (args.activityId !== undefined && args.activityId !== null) {
      this.activityId = args.activityId;
    }
    if (args.decisionTaskCompletedEventId !== undefined && args.decisionTaskCompletedEventId !== null) {
      this.decisionTaskCompletedEventId = args.decisionTaskCompletedEventId;
    }
  }
};
ActivityTaskCancelRequestedEventAttributes.prototype = {};
ActivityTaskCancelRequestedEventAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.activityId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I64) {
        this.decisionTaskCompletedEventId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActivityTaskCancelRequestedEventAttributes.prototype.write = function(output) {
  output.writeStructBegin('ActivityTaskCancelRequestedEventAttributes');
  if (this.activityId !== null && this.activityId !== undefined) {
    output.writeFieldBegin('activityId', Thrift.Type.STRING, 10);
    output.writeString(this.activityId);
    output.writeFieldEnd();
  }
  if (this.decisionTaskCompletedEventId !== null && this.decisionTaskCompletedEventId !== undefined) {
    output.writeFieldBegin('decisionTaskCompletedEventId', Thrift.Type.I64, 20);
    output.writeI64(this.decisionTaskCompletedEventId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RequestCancelActivityTaskFailedEventAttributes = module.exports.RequestCancelActivityTaskFailedEventAttributes = function(args) {
  this.activityId = null;
  this.cause = null;
  this.decisionTaskCompletedEventId = null;
  if (args) {
    if (args.activityId !== undefined && args.activityId !== null) {
      this.activityId = args.activityId;
    }
    if (args.cause !== undefined && args.cause !== null) {
      this.cause = args.cause;
    }
    if (args.decisionTaskCompletedEventId !== undefined && args.decisionTaskCompletedEventId !== null) {
      this.decisionTaskCompletedEventId = args.decisionTaskCompletedEventId;
    }
  }
};
RequestCancelActivityTaskFailedEventAttributes.prototype = {};
RequestCancelActivityTaskFailedEventAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.activityId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.cause = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.I64) {
        this.decisionTaskCompletedEventId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RequestCancelActivityTaskFailedEventAttributes.prototype.write = function(output) {
  output.writeStructBegin('RequestCancelActivityTaskFailedEventAttributes');
  if (this.activityId !== null && this.activityId !== undefined) {
    output.writeFieldBegin('activityId', Thrift.Type.STRING, 10);
    output.writeString(this.activityId);
    output.writeFieldEnd();
  }
  if (this.cause !== null && this.cause !== undefined) {
    output.writeFieldBegin('cause', Thrift.Type.STRING, 20);
    output.writeString(this.cause);
    output.writeFieldEnd();
  }
  if (this.decisionTaskCompletedEventId !== null && this.decisionTaskCompletedEventId !== undefined) {
    output.writeFieldBegin('decisionTaskCompletedEventId', Thrift.Type.I64, 30);
    output.writeI64(this.decisionTaskCompletedEventId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var ActivityTaskCanceledEventAttributes = module.exports.ActivityTaskCanceledEventAttributes = function(args) {
  this.details = null;
  this.latestCancelRequestedEventId = null;
  this.scheduledEventId = null;
  this.startedEventId = null;
  this.identity = null;
  if (args) {
    if (args.details !== undefined && args.details !== null) {
      this.details = args.details;
    }
    if (args.latestCancelRequestedEventId !== undefined && args.latestCancelRequestedEventId !== null) {
      this.latestCancelRequestedEventId = args.latestCancelRequestedEventId;
    }
    if (args.scheduledEventId !== undefined && args.scheduledEventId !== null) {
      this.scheduledEventId = args.scheduledEventId;
    }
    if (args.startedEventId !== undefined && args.startedEventId !== null) {
      this.startedEventId = args.startedEventId;
    }
    if (args.identity !== undefined && args.identity !== null) {
      this.identity = args.identity;
    }
  }
};
ActivityTaskCanceledEventAttributes.prototype = {};
ActivityTaskCanceledEventAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.details = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I64) {
        this.latestCancelRequestedEventId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.I64) {
        this.scheduledEventId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.I64) {
        this.startedEventId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 50:
      if (ftype == Thrift.Type.STRING) {
        this.identity = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

ActivityTaskCanceledEventAttributes.prototype.write = function(output) {
  output.writeStructBegin('ActivityTaskCanceledEventAttributes');
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRING, 10);
    output.writeBinary(this.details);
    output.writeFieldEnd();
  }
  if (this.latestCancelRequestedEventId !== null && this.latestCancelRequestedEventId !== undefined) {
    output.writeFieldBegin('latestCancelRequestedEventId', Thrift.Type.I64, 20);
    output.writeI64(this.latestCancelRequestedEventId);
    output.writeFieldEnd();
  }
  if (this.scheduledEventId !== null && this.scheduledEventId !== undefined) {
    output.writeFieldBegin('scheduledEventId', Thrift.Type.I64, 30);
    output.writeI64(this.scheduledEventId);
    output.writeFieldEnd();
  }
  if (this.startedEventId !== null && this.startedEventId !== undefined) {
    output.writeFieldBegin('startedEventId', Thrift.Type.I64, 40);
    output.writeI64(this.startedEventId);
    output.writeFieldEnd();
  }
  if (this.identity !== null && this.identity !== undefined) {
    output.writeFieldBegin('identity', Thrift.Type.STRING, 50);
    output.writeString(this.identity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TimerStartedEventAttributes = module.exports.TimerStartedEventAttributes = function(args) {
  this.timerId = null;
  this.startToFireTimeoutSeconds = null;
  this.decisionTaskCompletedEventId = null;
  if (args) {
    if (args.timerId !== undefined && args.timerId !== null) {
      this.timerId = args.timerId;
    }
    if (args.startToFireTimeoutSeconds !== undefined && args.startToFireTimeoutSeconds !== null) {
      this.startToFireTimeoutSeconds = args.startToFireTimeoutSeconds;
    }
    if (args.decisionTaskCompletedEventId !== undefined && args.decisionTaskCompletedEventId !== null) {
      this.decisionTaskCompletedEventId = args.decisionTaskCompletedEventId;
    }
  }
};
TimerStartedEventAttributes.prototype = {};
TimerStartedEventAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.timerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I64) {
        this.startToFireTimeoutSeconds = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.I64) {
        this.decisionTaskCompletedEventId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimerStartedEventAttributes.prototype.write = function(output) {
  output.writeStructBegin('TimerStartedEventAttributes');
  if (this.timerId !== null && this.timerId !== undefined) {
    output.writeFieldBegin('timerId', Thrift.Type.STRING, 10);
    output.writeString(this.timerId);
    output.writeFieldEnd();
  }
  if (this.startToFireTimeoutSeconds !== null && this.startToFireTimeoutSeconds !== undefined) {
    output.writeFieldBegin('startToFireTimeoutSeconds', Thrift.Type.I64, 20);
    output.writeI64(this.startToFireTimeoutSeconds);
    output.writeFieldEnd();
  }
  if (this.decisionTaskCompletedEventId !== null && this.decisionTaskCompletedEventId !== undefined) {
    output.writeFieldBegin('decisionTaskCompletedEventId', Thrift.Type.I64, 30);
    output.writeI64(this.decisionTaskCompletedEventId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var TimerFiredEventAttributes = module.exports.TimerFiredEventAttributes = function(args) {
  this.timerId = null;
  this.startedEventId = null;
  if (args) {
    if (args.timerId !== undefined && args.timerId !== null) {
      this.timerId = args.timerId;
    }
    if (args.startedEventId !== undefined && args.startedEventId !== null) {
      this.startedEventId = args.startedEventId;
    }
  }
};
TimerFiredEventAttributes.prototype = {};
TimerFiredEventAttributes.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.timerId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I64) {
        this.startedEventId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

TimerFiredEventAttributes.prototype.write = function(output) {
  output.writeStructBegin('TimerFiredEventAttributes');
  if (this.timerId !== null && this.timerId !== undefined) {
    output.writeFieldBegin('timerId', Thrift.Type.STRING, 10);
    output.writeString(this.timerId);
    output.writeFieldEnd();
  }
  if (this.startedEventId !== null && this.startedEventId !== undefined) {
    output.writeFieldBegin('startedEventId', Thrift.Type.I64, 20);
    output.writeI64(this.startedEventId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var HistoryEvent = module.exports.HistoryEvent = function(args) {
  this.eventId = null;
  this.timestamp = null;
  this.eventType = null;
  this.workflowExecutionStartedEventAttributes = null;
  this.workflowExecutionCompletedEventAttributes = null;
  this.workflowExecutionFailedEventAttributes = null;
  this.workflowExecutionTimedOutEventAttributes = null;
  this.decisionTaskScheduledEventAttributes = null;
  this.decisionTaskStartedEventAttributes = null;
  this.decisionTaskTimedOutEventAttributes = null;
  this.decisionTaskCompletedEventAttributes = null;
  this.activityTaskScheduledEventAttributes = null;
  this.activityTaskStartedEventAttributes = null;
  this.activityTaskCompletedEventAttributes = null;
  this.activityTaskFailedEventAttributes = null;
  this.activityTaskTimedOutEventAttributes = null;
  this.timerStartedEventAttributes = null;
  this.timerFiredEventAttributes = null;
  this.completeWorkflowExecutionFailedEventAttributes = null;
  this.activityTaskCancelRequestedEventAttributes = null;
  this.requestCancelActivityTaskFailedEventAttributes = null;
  this.activityTaskCanceledEventAttributes = null;
  if (args) {
    if (args.eventId !== undefined && args.eventId !== null) {
      this.eventId = args.eventId;
    }
    if (args.timestamp !== undefined && args.timestamp !== null) {
      this.timestamp = args.timestamp;
    }
    if (args.eventType !== undefined && args.eventType !== null) {
      this.eventType = args.eventType;
    }
    if (args.workflowExecutionStartedEventAttributes !== undefined && args.workflowExecutionStartedEventAttributes !== null) {
      this.workflowExecutionStartedEventAttributes = new ttypes.WorkflowExecutionStartedEventAttributes(args.workflowExecutionStartedEventAttributes);
    }
    if (args.workflowExecutionCompletedEventAttributes !== undefined && args.workflowExecutionCompletedEventAttributes !== null) {
      this.workflowExecutionCompletedEventAttributes = new ttypes.WorkflowExecutionCompletedEventAttributes(args.workflowExecutionCompletedEventAttributes);
    }
    if (args.workflowExecutionFailedEventAttributes !== undefined && args.workflowExecutionFailedEventAttributes !== null) {
      this.workflowExecutionFailedEventAttributes = new ttypes.WorkflowExecutionFailedEventAttributes(args.workflowExecutionFailedEventAttributes);
    }
    if (args.workflowExecutionTimedOutEventAttributes !== undefined && args.workflowExecutionTimedOutEventAttributes !== null) {
      this.workflowExecutionTimedOutEventAttributes = new ttypes.WorkflowExecutionTimedOutEventAttributes(args.workflowExecutionTimedOutEventAttributes);
    }
    if (args.decisionTaskScheduledEventAttributes !== undefined && args.decisionTaskScheduledEventAttributes !== null) {
      this.decisionTaskScheduledEventAttributes = new ttypes.DecisionTaskScheduledEventAttributes(args.decisionTaskScheduledEventAttributes);
    }
    if (args.decisionTaskStartedEventAttributes !== undefined && args.decisionTaskStartedEventAttributes !== null) {
      this.decisionTaskStartedEventAttributes = new ttypes.DecisionTaskStartedEventAttributes(args.decisionTaskStartedEventAttributes);
    }
    if (args.decisionTaskTimedOutEventAttributes !== undefined && args.decisionTaskTimedOutEventAttributes !== null) {
      this.decisionTaskTimedOutEventAttributes = new ttypes.DecisionTaskTimedOutEventAttributes(args.decisionTaskTimedOutEventAttributes);
    }
    if (args.decisionTaskCompletedEventAttributes !== undefined && args.decisionTaskCompletedEventAttributes !== null) {
      this.decisionTaskCompletedEventAttributes = new ttypes.DecisionTaskCompletedEventAttributes(args.decisionTaskCompletedEventAttributes);
    }
    if (args.activityTaskScheduledEventAttributes !== undefined && args.activityTaskScheduledEventAttributes !== null) {
      this.activityTaskScheduledEventAttributes = new ttypes.ActivityTaskScheduledEventAttributes(args.activityTaskScheduledEventAttributes);
    }
    if (args.activityTaskStartedEventAttributes !== undefined && args.activityTaskStartedEventAttributes !== null) {
      this.activityTaskStartedEventAttributes = new ttypes.ActivityTaskStartedEventAttributes(args.activityTaskStartedEventAttributes);
    }
    if (args.activityTaskCompletedEventAttributes !== undefined && args.activityTaskCompletedEventAttributes !== null) {
      this.activityTaskCompletedEventAttributes = new ttypes.ActivityTaskCompletedEventAttributes(args.activityTaskCompletedEventAttributes);
    }
    if (args.activityTaskFailedEventAttributes !== undefined && args.activityTaskFailedEventAttributes !== null) {
      this.activityTaskFailedEventAttributes = new ttypes.ActivityTaskFailedEventAttributes(args.activityTaskFailedEventAttributes);
    }
    if (args.activityTaskTimedOutEventAttributes !== undefined && args.activityTaskTimedOutEventAttributes !== null) {
      this.activityTaskTimedOutEventAttributes = new ttypes.ActivityTaskTimedOutEventAttributes(args.activityTaskTimedOutEventAttributes);
    }
    if (args.timerStartedEventAttributes !== undefined && args.timerStartedEventAttributes !== null) {
      this.timerStartedEventAttributes = new ttypes.TimerStartedEventAttributes(args.timerStartedEventAttributes);
    }
    if (args.timerFiredEventAttributes !== undefined && args.timerFiredEventAttributes !== null) {
      this.timerFiredEventAttributes = new ttypes.TimerFiredEventAttributes(args.timerFiredEventAttributes);
    }
    if (args.completeWorkflowExecutionFailedEventAttributes !== undefined && args.completeWorkflowExecutionFailedEventAttributes !== null) {
      this.completeWorkflowExecutionFailedEventAttributes = new ttypes.CompleteWorkflowExecutionFailedEventAttributes(args.completeWorkflowExecutionFailedEventAttributes);
    }
    if (args.activityTaskCancelRequestedEventAttributes !== undefined && args.activityTaskCancelRequestedEventAttributes !== null) {
      this.activityTaskCancelRequestedEventAttributes = new ttypes.ActivityTaskCancelRequestedEventAttributes(args.activityTaskCancelRequestedEventAttributes);
    }
    if (args.requestCancelActivityTaskFailedEventAttributes !== undefined && args.requestCancelActivityTaskFailedEventAttributes !== null) {
      this.requestCancelActivityTaskFailedEventAttributes = new ttypes.RequestCancelActivityTaskFailedEventAttributes(args.requestCancelActivityTaskFailedEventAttributes);
    }
    if (args.activityTaskCanceledEventAttributes !== undefined && args.activityTaskCanceledEventAttributes !== null) {
      this.activityTaskCanceledEventAttributes = new ttypes.ActivityTaskCanceledEventAttributes(args.activityTaskCanceledEventAttributes);
    }
  }
};
HistoryEvent.prototype = {};
HistoryEvent.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.I64) {
        this.eventId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.I64) {
        this.timestamp = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.I32) {
        this.eventType = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 35:
      if (ftype == Thrift.Type.STRUCT) {
        this.workflowExecutionStartedEventAttributes = new ttypes.WorkflowExecutionStartedEventAttributes();
        this.workflowExecutionStartedEventAttributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.STRUCT) {
        this.workflowExecutionCompletedEventAttributes = new ttypes.WorkflowExecutionCompletedEventAttributes();
        this.workflowExecutionCompletedEventAttributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 45:
      if (ftype == Thrift.Type.STRUCT) {
        this.workflowExecutionFailedEventAttributes = new ttypes.WorkflowExecutionFailedEventAttributes();
        this.workflowExecutionFailedEventAttributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 50:
      if (ftype == Thrift.Type.STRUCT) {
        this.workflowExecutionTimedOutEventAttributes = new ttypes.WorkflowExecutionTimedOutEventAttributes();
        this.workflowExecutionTimedOutEventAttributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 55:
      if (ftype == Thrift.Type.STRUCT) {
        this.decisionTaskScheduledEventAttributes = new ttypes.DecisionTaskScheduledEventAttributes();
        this.decisionTaskScheduledEventAttributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 60:
      if (ftype == Thrift.Type.STRUCT) {
        this.decisionTaskStartedEventAttributes = new ttypes.DecisionTaskStartedEventAttributes();
        this.decisionTaskStartedEventAttributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 63:
      if (ftype == Thrift.Type.STRUCT) {
        this.decisionTaskTimedOutEventAttributes = new ttypes.DecisionTaskTimedOutEventAttributes();
        this.decisionTaskTimedOutEventAttributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 65:
      if (ftype == Thrift.Type.STRUCT) {
        this.decisionTaskCompletedEventAttributes = new ttypes.DecisionTaskCompletedEventAttributes();
        this.decisionTaskCompletedEventAttributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 70:
      if (ftype == Thrift.Type.STRUCT) {
        this.activityTaskScheduledEventAttributes = new ttypes.ActivityTaskScheduledEventAttributes();
        this.activityTaskScheduledEventAttributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 75:
      if (ftype == Thrift.Type.STRUCT) {
        this.activityTaskStartedEventAttributes = new ttypes.ActivityTaskStartedEventAttributes();
        this.activityTaskStartedEventAttributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 80:
      if (ftype == Thrift.Type.STRUCT) {
        this.activityTaskCompletedEventAttributes = new ttypes.ActivityTaskCompletedEventAttributes();
        this.activityTaskCompletedEventAttributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 85:
      if (ftype == Thrift.Type.STRUCT) {
        this.activityTaskFailedEventAttributes = new ttypes.ActivityTaskFailedEventAttributes();
        this.activityTaskFailedEventAttributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 90:
      if (ftype == Thrift.Type.STRUCT) {
        this.activityTaskTimedOutEventAttributes = new ttypes.ActivityTaskTimedOutEventAttributes();
        this.activityTaskTimedOutEventAttributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 95:
      if (ftype == Thrift.Type.STRUCT) {
        this.timerStartedEventAttributes = new ttypes.TimerStartedEventAttributes();
        this.timerStartedEventAttributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 100:
      if (ftype == Thrift.Type.STRUCT) {
        this.timerFiredEventAttributes = new ttypes.TimerFiredEventAttributes();
        this.timerFiredEventAttributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 105:
      if (ftype == Thrift.Type.STRUCT) {
        this.completeWorkflowExecutionFailedEventAttributes = new ttypes.CompleteWorkflowExecutionFailedEventAttributes();
        this.completeWorkflowExecutionFailedEventAttributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 110:
      if (ftype == Thrift.Type.STRUCT) {
        this.activityTaskCancelRequestedEventAttributes = new ttypes.ActivityTaskCancelRequestedEventAttributes();
        this.activityTaskCancelRequestedEventAttributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 120:
      if (ftype == Thrift.Type.STRUCT) {
        this.requestCancelActivityTaskFailedEventAttributes = new ttypes.RequestCancelActivityTaskFailedEventAttributes();
        this.requestCancelActivityTaskFailedEventAttributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 130:
      if (ftype == Thrift.Type.STRUCT) {
        this.activityTaskCanceledEventAttributes = new ttypes.ActivityTaskCanceledEventAttributes();
        this.activityTaskCanceledEventAttributes.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

HistoryEvent.prototype.write = function(output) {
  output.writeStructBegin('HistoryEvent');
  if (this.eventId !== null && this.eventId !== undefined) {
    output.writeFieldBegin('eventId', Thrift.Type.I64, 10);
    output.writeI64(this.eventId);
    output.writeFieldEnd();
  }
  if (this.timestamp !== null && this.timestamp !== undefined) {
    output.writeFieldBegin('timestamp', Thrift.Type.I64, 20);
    output.writeI64(this.timestamp);
    output.writeFieldEnd();
  }
  if (this.eventType !== null && this.eventType !== undefined) {
    output.writeFieldBegin('eventType', Thrift.Type.I32, 30);
    output.writeI32(this.eventType);
    output.writeFieldEnd();
  }
  if (this.workflowExecutionStartedEventAttributes !== null && this.workflowExecutionStartedEventAttributes !== undefined) {
    output.writeFieldBegin('workflowExecutionStartedEventAttributes', Thrift.Type.STRUCT, 35);
    this.workflowExecutionStartedEventAttributes.write(output);
    output.writeFieldEnd();
  }
  if (this.workflowExecutionCompletedEventAttributes !== null && this.workflowExecutionCompletedEventAttributes !== undefined) {
    output.writeFieldBegin('workflowExecutionCompletedEventAttributes', Thrift.Type.STRUCT, 40);
    this.workflowExecutionCompletedEventAttributes.write(output);
    output.writeFieldEnd();
  }
  if (this.workflowExecutionFailedEventAttributes !== null && this.workflowExecutionFailedEventAttributes !== undefined) {
    output.writeFieldBegin('workflowExecutionFailedEventAttributes', Thrift.Type.STRUCT, 45);
    this.workflowExecutionFailedEventAttributes.write(output);
    output.writeFieldEnd();
  }
  if (this.workflowExecutionTimedOutEventAttributes !== null && this.workflowExecutionTimedOutEventAttributes !== undefined) {
    output.writeFieldBegin('workflowExecutionTimedOutEventAttributes', Thrift.Type.STRUCT, 50);
    this.workflowExecutionTimedOutEventAttributes.write(output);
    output.writeFieldEnd();
  }
  if (this.decisionTaskScheduledEventAttributes !== null && this.decisionTaskScheduledEventAttributes !== undefined) {
    output.writeFieldBegin('decisionTaskScheduledEventAttributes', Thrift.Type.STRUCT, 55);
    this.decisionTaskScheduledEventAttributes.write(output);
    output.writeFieldEnd();
  }
  if (this.decisionTaskStartedEventAttributes !== null && this.decisionTaskStartedEventAttributes !== undefined) {
    output.writeFieldBegin('decisionTaskStartedEventAttributes', Thrift.Type.STRUCT, 60);
    this.decisionTaskStartedEventAttributes.write(output);
    output.writeFieldEnd();
  }
  if (this.decisionTaskTimedOutEventAttributes !== null && this.decisionTaskTimedOutEventAttributes !== undefined) {
    output.writeFieldBegin('decisionTaskTimedOutEventAttributes', Thrift.Type.STRUCT, 63);
    this.decisionTaskTimedOutEventAttributes.write(output);
    output.writeFieldEnd();
  }
  if (this.decisionTaskCompletedEventAttributes !== null && this.decisionTaskCompletedEventAttributes !== undefined) {
    output.writeFieldBegin('decisionTaskCompletedEventAttributes', Thrift.Type.STRUCT, 65);
    this.decisionTaskCompletedEventAttributes.write(output);
    output.writeFieldEnd();
  }
  if (this.activityTaskScheduledEventAttributes !== null && this.activityTaskScheduledEventAttributes !== undefined) {
    output.writeFieldBegin('activityTaskScheduledEventAttributes', Thrift.Type.STRUCT, 70);
    this.activityTaskScheduledEventAttributes.write(output);
    output.writeFieldEnd();
  }
  if (this.activityTaskStartedEventAttributes !== null && this.activityTaskStartedEventAttributes !== undefined) {
    output.writeFieldBegin('activityTaskStartedEventAttributes', Thrift.Type.STRUCT, 75);
    this.activityTaskStartedEventAttributes.write(output);
    output.writeFieldEnd();
  }
  if (this.activityTaskCompletedEventAttributes !== null && this.activityTaskCompletedEventAttributes !== undefined) {
    output.writeFieldBegin('activityTaskCompletedEventAttributes', Thrift.Type.STRUCT, 80);
    this.activityTaskCompletedEventAttributes.write(output);
    output.writeFieldEnd();
  }
  if (this.activityTaskFailedEventAttributes !== null && this.activityTaskFailedEventAttributes !== undefined) {
    output.writeFieldBegin('activityTaskFailedEventAttributes', Thrift.Type.STRUCT, 85);
    this.activityTaskFailedEventAttributes.write(output);
    output.writeFieldEnd();
  }
  if (this.activityTaskTimedOutEventAttributes !== null && this.activityTaskTimedOutEventAttributes !== undefined) {
    output.writeFieldBegin('activityTaskTimedOutEventAttributes', Thrift.Type.STRUCT, 90);
    this.activityTaskTimedOutEventAttributes.write(output);
    output.writeFieldEnd();
  }
  if (this.timerStartedEventAttributes !== null && this.timerStartedEventAttributes !== undefined) {
    output.writeFieldBegin('timerStartedEventAttributes', Thrift.Type.STRUCT, 95);
    this.timerStartedEventAttributes.write(output);
    output.writeFieldEnd();
  }
  if (this.timerFiredEventAttributes !== null && this.timerFiredEventAttributes !== undefined) {
    output.writeFieldBegin('timerFiredEventAttributes', Thrift.Type.STRUCT, 100);
    this.timerFiredEventAttributes.write(output);
    output.writeFieldEnd();
  }
  if (this.completeWorkflowExecutionFailedEventAttributes !== null && this.completeWorkflowExecutionFailedEventAttributes !== undefined) {
    output.writeFieldBegin('completeWorkflowExecutionFailedEventAttributes', Thrift.Type.STRUCT, 105);
    this.completeWorkflowExecutionFailedEventAttributes.write(output);
    output.writeFieldEnd();
  }
  if (this.activityTaskCancelRequestedEventAttributes !== null && this.activityTaskCancelRequestedEventAttributes !== undefined) {
    output.writeFieldBegin('activityTaskCancelRequestedEventAttributes', Thrift.Type.STRUCT, 110);
    this.activityTaskCancelRequestedEventAttributes.write(output);
    output.writeFieldEnd();
  }
  if (this.requestCancelActivityTaskFailedEventAttributes !== null && this.requestCancelActivityTaskFailedEventAttributes !== undefined) {
    output.writeFieldBegin('requestCancelActivityTaskFailedEventAttributes', Thrift.Type.STRUCT, 120);
    this.requestCancelActivityTaskFailedEventAttributes.write(output);
    output.writeFieldEnd();
  }
  if (this.activityTaskCanceledEventAttributes !== null && this.activityTaskCanceledEventAttributes !== undefined) {
    output.writeFieldBegin('activityTaskCanceledEventAttributes', Thrift.Type.STRUCT, 130);
    this.activityTaskCanceledEventAttributes.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var History = module.exports.History = function(args) {
  this.events = null;
  if (args) {
    if (args.events !== undefined && args.events !== null) {
      this.events = Thrift.copyList(args.events, [ttypes.HistoryEvent]);
    }
  }
};
History.prototype = {};
History.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.LIST) {
        var _size0 = 0;
        var _rtmp34;
        this.events = [];
        var _etype3 = 0;
        _rtmp34 = input.readListBegin();
        _etype3 = _rtmp34.etype;
        _size0 = _rtmp34.size;
        for (var _i5 = 0; _i5 < _size0; ++_i5)
        {
          var elem6 = null;
          elem6 = new ttypes.HistoryEvent();
          elem6.read(input);
          this.events.push(elem6);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

History.prototype.write = function(output) {
  output.writeStructBegin('History');
  if (this.events !== null && this.events !== undefined) {
    output.writeFieldBegin('events', Thrift.Type.LIST, 10);
    output.writeListBegin(Thrift.Type.STRUCT, this.events.length);
    for (var iter7 in this.events)
    {
      if (this.events.hasOwnProperty(iter7))
      {
        iter7 = this.events[iter7];
        iter7.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var StartWorkflowExecutionRequest = module.exports.StartWorkflowExecutionRequest = function(args) {
  this.workflowId = null;
  this.workflowType = null;
  this.taskList = null;
  this.input = null;
  this.executionStartToCloseTimeoutSeconds = null;
  this.taskStartToCloseTimeoutSeconds = null;
  this.identity = null;
  if (args) {
    if (args.workflowId !== undefined && args.workflowId !== null) {
      this.workflowId = args.workflowId;
    }
    if (args.workflowType !== undefined && args.workflowType !== null) {
      this.workflowType = new ttypes.WorkflowType(args.workflowType);
    }
    if (args.taskList !== undefined && args.taskList !== null) {
      this.taskList = new ttypes.TaskList(args.taskList);
    }
    if (args.input !== undefined && args.input !== null) {
      this.input = args.input;
    }
    if (args.executionStartToCloseTimeoutSeconds !== undefined && args.executionStartToCloseTimeoutSeconds !== null) {
      this.executionStartToCloseTimeoutSeconds = args.executionStartToCloseTimeoutSeconds;
    }
    if (args.taskStartToCloseTimeoutSeconds !== undefined && args.taskStartToCloseTimeoutSeconds !== null) {
      this.taskStartToCloseTimeoutSeconds = args.taskStartToCloseTimeoutSeconds;
    }
    if (args.identity !== undefined && args.identity !== null) {
      this.identity = args.identity;
    }
  }
};
StartWorkflowExecutionRequest.prototype = {};
StartWorkflowExecutionRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.workflowId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRUCT) {
        this.workflowType = new ttypes.WorkflowType();
        this.workflowType.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRUCT) {
        this.taskList = new ttypes.TaskList();
        this.taskList.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.STRING) {
        this.input = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 50:
      if (ftype == Thrift.Type.I32) {
        this.executionStartToCloseTimeoutSeconds = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 60:
      if (ftype == Thrift.Type.I32) {
        this.taskStartToCloseTimeoutSeconds = input.readI32();
      } else {
        input.skip(ftype);
      }
      break;
      case 70:
      if (ftype == Thrift.Type.STRING) {
        this.identity = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StartWorkflowExecutionRequest.prototype.write = function(output) {
  output.writeStructBegin('StartWorkflowExecutionRequest');
  if (this.workflowId !== null && this.workflowId !== undefined) {
    output.writeFieldBegin('workflowId', Thrift.Type.STRING, 10);
    output.writeString(this.workflowId);
    output.writeFieldEnd();
  }
  if (this.workflowType !== null && this.workflowType !== undefined) {
    output.writeFieldBegin('workflowType', Thrift.Type.STRUCT, 20);
    this.workflowType.write(output);
    output.writeFieldEnd();
  }
  if (this.taskList !== null && this.taskList !== undefined) {
    output.writeFieldBegin('taskList', Thrift.Type.STRUCT, 30);
    this.taskList.write(output);
    output.writeFieldEnd();
  }
  if (this.input !== null && this.input !== undefined) {
    output.writeFieldBegin('input', Thrift.Type.STRING, 40);
    output.writeBinary(this.input);
    output.writeFieldEnd();
  }
  if (this.executionStartToCloseTimeoutSeconds !== null && this.executionStartToCloseTimeoutSeconds !== undefined) {
    output.writeFieldBegin('executionStartToCloseTimeoutSeconds', Thrift.Type.I32, 50);
    output.writeI32(this.executionStartToCloseTimeoutSeconds);
    output.writeFieldEnd();
  }
  if (this.taskStartToCloseTimeoutSeconds !== null && this.taskStartToCloseTimeoutSeconds !== undefined) {
    output.writeFieldBegin('taskStartToCloseTimeoutSeconds', Thrift.Type.I32, 60);
    output.writeI32(this.taskStartToCloseTimeoutSeconds);
    output.writeFieldEnd();
  }
  if (this.identity !== null && this.identity !== undefined) {
    output.writeFieldBegin('identity', Thrift.Type.STRING, 70);
    output.writeString(this.identity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var StartWorkflowExecutionResponse = module.exports.StartWorkflowExecutionResponse = function(args) {
  this.runId = null;
  if (args) {
    if (args.runId !== undefined && args.runId !== null) {
      this.runId = args.runId;
    }
  }
};
StartWorkflowExecutionResponse.prototype = {};
StartWorkflowExecutionResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.runId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

StartWorkflowExecutionResponse.prototype.write = function(output) {
  output.writeStructBegin('StartWorkflowExecutionResponse');
  if (this.runId !== null && this.runId !== undefined) {
    output.writeFieldBegin('runId', Thrift.Type.STRING, 10);
    output.writeString(this.runId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PollForDecisionTaskRequest = module.exports.PollForDecisionTaskRequest = function(args) {
  this.taskList = null;
  this.identity = null;
  if (args) {
    if (args.taskList !== undefined && args.taskList !== null) {
      this.taskList = new ttypes.TaskList(args.taskList);
    }
    if (args.identity !== undefined && args.identity !== null) {
      this.identity = args.identity;
    }
  }
};
PollForDecisionTaskRequest.prototype = {};
PollForDecisionTaskRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.taskList = new ttypes.TaskList();
        this.taskList.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.identity = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PollForDecisionTaskRequest.prototype.write = function(output) {
  output.writeStructBegin('PollForDecisionTaskRequest');
  if (this.taskList !== null && this.taskList !== undefined) {
    output.writeFieldBegin('taskList', Thrift.Type.STRUCT, 10);
    this.taskList.write(output);
    output.writeFieldEnd();
  }
  if (this.identity !== null && this.identity !== undefined) {
    output.writeFieldBegin('identity', Thrift.Type.STRING, 20);
    output.writeString(this.identity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PollForDecisionTaskResponse = module.exports.PollForDecisionTaskResponse = function(args) {
  this.taskToken = null;
  this.workflowExecution = null;
  this.workflowType = null;
  this.previousStartedEventId = null;
  this.startedEventId = null;
  this.history = null;
  if (args) {
    if (args.taskToken !== undefined && args.taskToken !== null) {
      this.taskToken = args.taskToken;
    }
    if (args.workflowExecution !== undefined && args.workflowExecution !== null) {
      this.workflowExecution = new ttypes.WorkflowExecution(args.workflowExecution);
    }
    if (args.workflowType !== undefined && args.workflowType !== null) {
      this.workflowType = new ttypes.WorkflowType(args.workflowType);
    }
    if (args.previousStartedEventId !== undefined && args.previousStartedEventId !== null) {
      this.previousStartedEventId = args.previousStartedEventId;
    }
    if (args.startedEventId !== undefined && args.startedEventId !== null) {
      this.startedEventId = args.startedEventId;
    }
    if (args.history !== undefined && args.history !== null) {
      this.history = new ttypes.History(args.history);
    }
  }
};
PollForDecisionTaskResponse.prototype = {};
PollForDecisionTaskResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.taskToken = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRUCT) {
        this.workflowExecution = new ttypes.WorkflowExecution();
        this.workflowExecution.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRUCT) {
        this.workflowType = new ttypes.WorkflowType();
        this.workflowType.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.I64) {
        this.previousStartedEventId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 50:
      if (ftype == Thrift.Type.I64) {
        this.startedEventId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      case 60:
      if (ftype == Thrift.Type.STRUCT) {
        this.history = new ttypes.History();
        this.history.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PollForDecisionTaskResponse.prototype.write = function(output) {
  output.writeStructBegin('PollForDecisionTaskResponse');
  if (this.taskToken !== null && this.taskToken !== undefined) {
    output.writeFieldBegin('taskToken', Thrift.Type.STRING, 10);
    output.writeBinary(this.taskToken);
    output.writeFieldEnd();
  }
  if (this.workflowExecution !== null && this.workflowExecution !== undefined) {
    output.writeFieldBegin('workflowExecution', Thrift.Type.STRUCT, 20);
    this.workflowExecution.write(output);
    output.writeFieldEnd();
  }
  if (this.workflowType !== null && this.workflowType !== undefined) {
    output.writeFieldBegin('workflowType', Thrift.Type.STRUCT, 30);
    this.workflowType.write(output);
    output.writeFieldEnd();
  }
  if (this.previousStartedEventId !== null && this.previousStartedEventId !== undefined) {
    output.writeFieldBegin('previousStartedEventId', Thrift.Type.I64, 40);
    output.writeI64(this.previousStartedEventId);
    output.writeFieldEnd();
  }
  if (this.startedEventId !== null && this.startedEventId !== undefined) {
    output.writeFieldBegin('startedEventId', Thrift.Type.I64, 50);
    output.writeI64(this.startedEventId);
    output.writeFieldEnd();
  }
  if (this.history !== null && this.history !== undefined) {
    output.writeFieldBegin('history', Thrift.Type.STRUCT, 60);
    this.history.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RespondDecisionTaskCompletedRequest = module.exports.RespondDecisionTaskCompletedRequest = function(args) {
  this.taskToken = null;
  this.decisions = null;
  this.executionContext = null;
  this.identity = null;
  if (args) {
    if (args.taskToken !== undefined && args.taskToken !== null) {
      this.taskToken = args.taskToken;
    }
    if (args.decisions !== undefined && args.decisions !== null) {
      this.decisions = Thrift.copyList(args.decisions, [ttypes.Decision]);
    }
    if (args.executionContext !== undefined && args.executionContext !== null) {
      this.executionContext = args.executionContext;
    }
    if (args.identity !== undefined && args.identity !== null) {
      this.identity = args.identity;
    }
  }
};
RespondDecisionTaskCompletedRequest.prototype = {};
RespondDecisionTaskCompletedRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.taskToken = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.LIST) {
        var _size8 = 0;
        var _rtmp312;
        this.decisions = [];
        var _etype11 = 0;
        _rtmp312 = input.readListBegin();
        _etype11 = _rtmp312.etype;
        _size8 = _rtmp312.size;
        for (var _i13 = 0; _i13 < _size8; ++_i13)
        {
          var elem14 = null;
          elem14 = new ttypes.Decision();
          elem14.read(input);
          this.decisions.push(elem14);
        }
        input.readListEnd();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRING) {
        this.executionContext = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.STRING) {
        this.identity = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RespondDecisionTaskCompletedRequest.prototype.write = function(output) {
  output.writeStructBegin('RespondDecisionTaskCompletedRequest');
  if (this.taskToken !== null && this.taskToken !== undefined) {
    output.writeFieldBegin('taskToken', Thrift.Type.STRING, 10);
    output.writeBinary(this.taskToken);
    output.writeFieldEnd();
  }
  if (this.decisions !== null && this.decisions !== undefined) {
    output.writeFieldBegin('decisions', Thrift.Type.LIST, 20);
    output.writeListBegin(Thrift.Type.STRUCT, this.decisions.length);
    for (var iter15 in this.decisions)
    {
      if (this.decisions.hasOwnProperty(iter15))
      {
        iter15 = this.decisions[iter15];
        iter15.write(output);
      }
    }
    output.writeListEnd();
    output.writeFieldEnd();
  }
  if (this.executionContext !== null && this.executionContext !== undefined) {
    output.writeFieldBegin('executionContext', Thrift.Type.STRING, 30);
    output.writeBinary(this.executionContext);
    output.writeFieldEnd();
  }
  if (this.identity !== null && this.identity !== undefined) {
    output.writeFieldBegin('identity', Thrift.Type.STRING, 40);
    output.writeString(this.identity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PollForActivityTaskRequest = module.exports.PollForActivityTaskRequest = function(args) {
  this.taskList = null;
  this.identity = null;
  if (args) {
    if (args.taskList !== undefined && args.taskList !== null) {
      this.taskList = new ttypes.TaskList(args.taskList);
    }
    if (args.identity !== undefined && args.identity !== null) {
      this.identity = args.identity;
    }
  }
};
PollForActivityTaskRequest.prototype = {};
PollForActivityTaskRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.taskList = new ttypes.TaskList();
        this.taskList.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.identity = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PollForActivityTaskRequest.prototype.write = function(output) {
  output.writeStructBegin('PollForActivityTaskRequest');
  if (this.taskList !== null && this.taskList !== undefined) {
    output.writeFieldBegin('taskList', Thrift.Type.STRUCT, 10);
    this.taskList.write(output);
    output.writeFieldEnd();
  }
  if (this.identity !== null && this.identity !== undefined) {
    output.writeFieldBegin('identity', Thrift.Type.STRING, 20);
    output.writeString(this.identity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var PollForActivityTaskResponse = module.exports.PollForActivityTaskResponse = function(args) {
  this.taskToken = null;
  this.workflowExecution = null;
  this.activityId = null;
  this.activityType = null;
  this.input = null;
  this.startedEventId = null;
  if (args) {
    if (args.taskToken !== undefined && args.taskToken !== null) {
      this.taskToken = args.taskToken;
    }
    if (args.workflowExecution !== undefined && args.workflowExecution !== null) {
      this.workflowExecution = new ttypes.WorkflowExecution(args.workflowExecution);
    }
    if (args.activityId !== undefined && args.activityId !== null) {
      this.activityId = args.activityId;
    }
    if (args.activityType !== undefined && args.activityType !== null) {
      this.activityType = new ttypes.ActivityType(args.activityType);
    }
    if (args.input !== undefined && args.input !== null) {
      this.input = args.input;
    }
    if (args.startedEventId !== undefined && args.startedEventId !== null) {
      this.startedEventId = args.startedEventId;
    }
  }
};
PollForActivityTaskResponse.prototype = {};
PollForActivityTaskResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.taskToken = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRUCT) {
        this.workflowExecution = new ttypes.WorkflowExecution();
        this.workflowExecution.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRING) {
        this.activityId = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.STRUCT) {
        this.activityType = new ttypes.ActivityType();
        this.activityType.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 50:
      if (ftype == Thrift.Type.STRING) {
        this.input = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 60:
      if (ftype == Thrift.Type.I64) {
        this.startedEventId = input.readI64();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

PollForActivityTaskResponse.prototype.write = function(output) {
  output.writeStructBegin('PollForActivityTaskResponse');
  if (this.taskToken !== null && this.taskToken !== undefined) {
    output.writeFieldBegin('taskToken', Thrift.Type.STRING, 10);
    output.writeBinary(this.taskToken);
    output.writeFieldEnd();
  }
  if (this.workflowExecution !== null && this.workflowExecution !== undefined) {
    output.writeFieldBegin('workflowExecution', Thrift.Type.STRUCT, 20);
    this.workflowExecution.write(output);
    output.writeFieldEnd();
  }
  if (this.activityId !== null && this.activityId !== undefined) {
    output.writeFieldBegin('activityId', Thrift.Type.STRING, 30);
    output.writeString(this.activityId);
    output.writeFieldEnd();
  }
  if (this.activityType !== null && this.activityType !== undefined) {
    output.writeFieldBegin('activityType', Thrift.Type.STRUCT, 40);
    this.activityType.write(output);
    output.writeFieldEnd();
  }
  if (this.input !== null && this.input !== undefined) {
    output.writeFieldBegin('input', Thrift.Type.STRING, 50);
    output.writeBinary(this.input);
    output.writeFieldEnd();
  }
  if (this.startedEventId !== null && this.startedEventId !== undefined) {
    output.writeFieldBegin('startedEventId', Thrift.Type.I64, 60);
    output.writeI64(this.startedEventId);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RecordActivityTaskHeartbeatRequest = module.exports.RecordActivityTaskHeartbeatRequest = function(args) {
  this.taskToken = null;
  this.details = null;
  this.identity = null;
  if (args) {
    if (args.taskToken !== undefined && args.taskToken !== null) {
      this.taskToken = args.taskToken;
    }
    if (args.details !== undefined && args.details !== null) {
      this.details = args.details;
    }
    if (args.identity !== undefined && args.identity !== null) {
      this.identity = args.identity;
    }
  }
};
RecordActivityTaskHeartbeatRequest.prototype = {};
RecordActivityTaskHeartbeatRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.taskToken = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.details = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRING) {
        this.identity = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecordActivityTaskHeartbeatRequest.prototype.write = function(output) {
  output.writeStructBegin('RecordActivityTaskHeartbeatRequest');
  if (this.taskToken !== null && this.taskToken !== undefined) {
    output.writeFieldBegin('taskToken', Thrift.Type.STRING, 10);
    output.writeBinary(this.taskToken);
    output.writeFieldEnd();
  }
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRING, 20);
    output.writeBinary(this.details);
    output.writeFieldEnd();
  }
  if (this.identity !== null && this.identity !== undefined) {
    output.writeFieldBegin('identity', Thrift.Type.STRING, 30);
    output.writeString(this.identity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RecordActivityTaskHeartbeatResponse = module.exports.RecordActivityTaskHeartbeatResponse = function(args) {
  this.cancelRequested = null;
  if (args) {
    if (args.cancelRequested !== undefined && args.cancelRequested !== null) {
      this.cancelRequested = args.cancelRequested;
    }
  }
};
RecordActivityTaskHeartbeatResponse.prototype = {};
RecordActivityTaskHeartbeatResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.BOOL) {
        this.cancelRequested = input.readBool();
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RecordActivityTaskHeartbeatResponse.prototype.write = function(output) {
  output.writeStructBegin('RecordActivityTaskHeartbeatResponse');
  if (this.cancelRequested !== null && this.cancelRequested !== undefined) {
    output.writeFieldBegin('cancelRequested', Thrift.Type.BOOL, 10);
    output.writeBool(this.cancelRequested);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RespondActivityTaskCompletedRequest = module.exports.RespondActivityTaskCompletedRequest = function(args) {
  this.taskToken = null;
  this.result = null;
  this.identity = null;
  if (args) {
    if (args.taskToken !== undefined && args.taskToken !== null) {
      this.taskToken = args.taskToken;
    }
    if (args.result !== undefined && args.result !== null) {
      this.result = args.result;
    }
    if (args.identity !== undefined && args.identity !== null) {
      this.identity = args.identity;
    }
  }
};
RespondActivityTaskCompletedRequest.prototype = {};
RespondActivityTaskCompletedRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.taskToken = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.result = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRING) {
        this.identity = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RespondActivityTaskCompletedRequest.prototype.write = function(output) {
  output.writeStructBegin('RespondActivityTaskCompletedRequest');
  if (this.taskToken !== null && this.taskToken !== undefined) {
    output.writeFieldBegin('taskToken', Thrift.Type.STRING, 10);
    output.writeBinary(this.taskToken);
    output.writeFieldEnd();
  }
  if (this.result !== null && this.result !== undefined) {
    output.writeFieldBegin('result', Thrift.Type.STRING, 20);
    output.writeBinary(this.result);
    output.writeFieldEnd();
  }
  if (this.identity !== null && this.identity !== undefined) {
    output.writeFieldBegin('identity', Thrift.Type.STRING, 30);
    output.writeString(this.identity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RespondActivityTaskFailedRequest = module.exports.RespondActivityTaskFailedRequest = function(args) {
  this.taskToken = null;
  this.reason = null;
  this.details = null;
  this.identity = null;
  if (args) {
    if (args.taskToken !== undefined && args.taskToken !== null) {
      this.taskToken = args.taskToken;
    }
    if (args.reason !== undefined && args.reason !== null) {
      this.reason = args.reason;
    }
    if (args.details !== undefined && args.details !== null) {
      this.details = args.details;
    }
    if (args.identity !== undefined && args.identity !== null) {
      this.identity = args.identity;
    }
  }
};
RespondActivityTaskFailedRequest.prototype = {};
RespondActivityTaskFailedRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.taskToken = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.reason = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRING) {
        this.details = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 40:
      if (ftype == Thrift.Type.STRING) {
        this.identity = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RespondActivityTaskFailedRequest.prototype.write = function(output) {
  output.writeStructBegin('RespondActivityTaskFailedRequest');
  if (this.taskToken !== null && this.taskToken !== undefined) {
    output.writeFieldBegin('taskToken', Thrift.Type.STRING, 10);
    output.writeBinary(this.taskToken);
    output.writeFieldEnd();
  }
  if (this.reason !== null && this.reason !== undefined) {
    output.writeFieldBegin('reason', Thrift.Type.STRING, 20);
    output.writeString(this.reason);
    output.writeFieldEnd();
  }
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRING, 30);
    output.writeBinary(this.details);
    output.writeFieldEnd();
  }
  if (this.identity !== null && this.identity !== undefined) {
    output.writeFieldBegin('identity', Thrift.Type.STRING, 40);
    output.writeString(this.identity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var RespondActivityTaskCanceledRequest = module.exports.RespondActivityTaskCanceledRequest = function(args) {
  this.taskToken = null;
  this.details = null;
  this.identity = null;
  if (args) {
    if (args.taskToken !== undefined && args.taskToken !== null) {
      this.taskToken = args.taskToken;
    }
    if (args.details !== undefined && args.details !== null) {
      this.details = args.details;
    }
    if (args.identity !== undefined && args.identity !== null) {
      this.identity = args.identity;
    }
  }
};
RespondActivityTaskCanceledRequest.prototype = {};
RespondActivityTaskCanceledRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRING) {
        this.taskToken = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 20:
      if (ftype == Thrift.Type.STRING) {
        this.details = input.readBinary();
      } else {
        input.skip(ftype);
      }
      break;
      case 30:
      if (ftype == Thrift.Type.STRING) {
        this.identity = input.readString();
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

RespondActivityTaskCanceledRequest.prototype.write = function(output) {
  output.writeStructBegin('RespondActivityTaskCanceledRequest');
  if (this.taskToken !== null && this.taskToken !== undefined) {
    output.writeFieldBegin('taskToken', Thrift.Type.STRING, 10);
    output.writeBinary(this.taskToken);
    output.writeFieldEnd();
  }
  if (this.details !== null && this.details !== undefined) {
    output.writeFieldBegin('details', Thrift.Type.STRING, 20);
    output.writeBinary(this.details);
    output.writeFieldEnd();
  }
  if (this.identity !== null && this.identity !== undefined) {
    output.writeFieldBegin('identity', Thrift.Type.STRING, 30);
    output.writeString(this.identity);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetWorkflowExecutionHistoryRequest = module.exports.GetWorkflowExecutionHistoryRequest = function(args) {
  this.execution = null;
  if (args) {
    if (args.execution !== undefined && args.execution !== null) {
      this.execution = new ttypes.WorkflowExecution(args.execution);
    }
  }
};
GetWorkflowExecutionHistoryRequest.prototype = {};
GetWorkflowExecutionHistoryRequest.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.execution = new ttypes.WorkflowExecution();
        this.execution.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetWorkflowExecutionHistoryRequest.prototype.write = function(output) {
  output.writeStructBegin('GetWorkflowExecutionHistoryRequest');
  if (this.execution !== null && this.execution !== undefined) {
    output.writeFieldBegin('execution', Thrift.Type.STRUCT, 10);
    this.execution.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var GetWorkflowExecutionHistoryResponse = module.exports.GetWorkflowExecutionHistoryResponse = function(args) {
  this.history = null;
  if (args) {
    if (args.history !== undefined && args.history !== null) {
      this.history = new ttypes.History(args.history);
    }
  }
};
GetWorkflowExecutionHistoryResponse.prototype = {};
GetWorkflowExecutionHistoryResponse.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 10:
      if (ftype == Thrift.Type.STRUCT) {
        this.history = new ttypes.History();
        this.history.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

GetWorkflowExecutionHistoryResponse.prototype.write = function(output) {
  output.writeStructBegin('GetWorkflowExecutionHistoryResponse');
  if (this.history !== null && this.history !== undefined) {
    output.writeFieldBegin('history', Thrift.Type.STRUCT, 10);
    this.history.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

