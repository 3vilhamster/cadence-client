//
// Autogenerated by Thrift Compiler (1.0.0-dev)
//
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
//
var thrift = require('thrift');
var Thrift = thrift.Thrift;
var Q = thrift.Q;

var shared_ttypes = require('./shared_types');


var ttypes = require('./cadence_types');
//HELPER FUNCTIONS AND STRUCTURES

var WorkflowService_StartWorkflowExecution_args = function(args) {
  this.startRequest = null;
  if (args) {
    if (args.startRequest !== undefined && args.startRequest !== null) {
      this.startRequest = new shared_ttypes.StartWorkflowExecutionRequest(args.startRequest);
    }
  }
};
WorkflowService_StartWorkflowExecution_args.prototype = {};
WorkflowService_StartWorkflowExecution_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.startRequest = new shared_ttypes.StartWorkflowExecutionRequest();
        this.startRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkflowService_StartWorkflowExecution_args.prototype.write = function(output) {
  output.writeStructBegin('WorkflowService_StartWorkflowExecution_args');
  if (this.startRequest !== null && this.startRequest !== undefined) {
    output.writeFieldBegin('startRequest', Thrift.Type.STRUCT, 1);
    this.startRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WorkflowService_StartWorkflowExecution_result = function(args) {
  this.success = null;
  this.badRequestError = null;
  this.internalServiceError = null;
  this.sessionAlreadyExistError = null;
  if (args instanceof shared_ttypes.BadRequestError) {
    this.badRequestError = args;
    return;
  }
  if (args instanceof shared_ttypes.InternalServiceError) {
    this.internalServiceError = args;
    return;
  }
  if (args instanceof shared_ttypes.WorkflowExecutionAlreadyStartedError) {
    this.sessionAlreadyExistError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new shared_ttypes.StartWorkflowExecutionResponse(args.success);
    }
    if (args.badRequestError !== undefined && args.badRequestError !== null) {
      this.badRequestError = args.badRequestError;
    }
    if (args.internalServiceError !== undefined && args.internalServiceError !== null) {
      this.internalServiceError = args.internalServiceError;
    }
    if (args.sessionAlreadyExistError !== undefined && args.sessionAlreadyExistError !== null) {
      this.sessionAlreadyExistError = args.sessionAlreadyExistError;
    }
  }
};
WorkflowService_StartWorkflowExecution_result.prototype = {};
WorkflowService_StartWorkflowExecution_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new shared_ttypes.StartWorkflowExecutionResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.badRequestError = new shared_ttypes.BadRequestError();
        this.badRequestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.internalServiceError = new shared_ttypes.InternalServiceError();
        this.internalServiceError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.sessionAlreadyExistError = new shared_ttypes.WorkflowExecutionAlreadyStartedError();
        this.sessionAlreadyExistError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkflowService_StartWorkflowExecution_result.prototype.write = function(output) {
  output.writeStructBegin('WorkflowService_StartWorkflowExecution_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.badRequestError !== null && this.badRequestError !== undefined) {
    output.writeFieldBegin('badRequestError', Thrift.Type.STRUCT, 1);
    this.badRequestError.write(output);
    output.writeFieldEnd();
  }
  if (this.internalServiceError !== null && this.internalServiceError !== undefined) {
    output.writeFieldBegin('internalServiceError', Thrift.Type.STRUCT, 2);
    this.internalServiceError.write(output);
    output.writeFieldEnd();
  }
  if (this.sessionAlreadyExistError !== null && this.sessionAlreadyExistError !== undefined) {
    output.writeFieldBegin('sessionAlreadyExistError', Thrift.Type.STRUCT, 3);
    this.sessionAlreadyExistError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WorkflowService_GetWorkflowExecutionHistory_args = function(args) {
  this.getRequest = null;
  if (args) {
    if (args.getRequest !== undefined && args.getRequest !== null) {
      this.getRequest = new shared_ttypes.GetWorkflowExecutionHistoryRequest(args.getRequest);
    }
  }
};
WorkflowService_GetWorkflowExecutionHistory_args.prototype = {};
WorkflowService_GetWorkflowExecutionHistory_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.getRequest = new shared_ttypes.GetWorkflowExecutionHistoryRequest();
        this.getRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkflowService_GetWorkflowExecutionHistory_args.prototype.write = function(output) {
  output.writeStructBegin('WorkflowService_GetWorkflowExecutionHistory_args');
  if (this.getRequest !== null && this.getRequest !== undefined) {
    output.writeFieldBegin('getRequest', Thrift.Type.STRUCT, 1);
    this.getRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WorkflowService_GetWorkflowExecutionHistory_result = function(args) {
  this.success = null;
  this.badRequestError = null;
  this.internalServiceError = null;
  this.entityNotExistError = null;
  if (args instanceof shared_ttypes.BadRequestError) {
    this.badRequestError = args;
    return;
  }
  if (args instanceof shared_ttypes.InternalServiceError) {
    this.internalServiceError = args;
    return;
  }
  if (args instanceof shared_ttypes.EntityNotExistsError) {
    this.entityNotExistError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new shared_ttypes.GetWorkflowExecutionHistoryResponse(args.success);
    }
    if (args.badRequestError !== undefined && args.badRequestError !== null) {
      this.badRequestError = args.badRequestError;
    }
    if (args.internalServiceError !== undefined && args.internalServiceError !== null) {
      this.internalServiceError = args.internalServiceError;
    }
    if (args.entityNotExistError !== undefined && args.entityNotExistError !== null) {
      this.entityNotExistError = args.entityNotExistError;
    }
  }
};
WorkflowService_GetWorkflowExecutionHistory_result.prototype = {};
WorkflowService_GetWorkflowExecutionHistory_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new shared_ttypes.GetWorkflowExecutionHistoryResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.badRequestError = new shared_ttypes.BadRequestError();
        this.badRequestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.internalServiceError = new shared_ttypes.InternalServiceError();
        this.internalServiceError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.entityNotExistError = new shared_ttypes.EntityNotExistsError();
        this.entityNotExistError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkflowService_GetWorkflowExecutionHistory_result.prototype.write = function(output) {
  output.writeStructBegin('WorkflowService_GetWorkflowExecutionHistory_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.badRequestError !== null && this.badRequestError !== undefined) {
    output.writeFieldBegin('badRequestError', Thrift.Type.STRUCT, 1);
    this.badRequestError.write(output);
    output.writeFieldEnd();
  }
  if (this.internalServiceError !== null && this.internalServiceError !== undefined) {
    output.writeFieldBegin('internalServiceError', Thrift.Type.STRUCT, 2);
    this.internalServiceError.write(output);
    output.writeFieldEnd();
  }
  if (this.entityNotExistError !== null && this.entityNotExistError !== undefined) {
    output.writeFieldBegin('entityNotExistError', Thrift.Type.STRUCT, 3);
    this.entityNotExistError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WorkflowService_PollForDecisionTask_args = function(args) {
  this.pollRequest = null;
  if (args) {
    if (args.pollRequest !== undefined && args.pollRequest !== null) {
      this.pollRequest = new shared_ttypes.PollForDecisionTaskRequest(args.pollRequest);
    }
  }
};
WorkflowService_PollForDecisionTask_args.prototype = {};
WorkflowService_PollForDecisionTask_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pollRequest = new shared_ttypes.PollForDecisionTaskRequest();
        this.pollRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkflowService_PollForDecisionTask_args.prototype.write = function(output) {
  output.writeStructBegin('WorkflowService_PollForDecisionTask_args');
  if (this.pollRequest !== null && this.pollRequest !== undefined) {
    output.writeFieldBegin('pollRequest', Thrift.Type.STRUCT, 1);
    this.pollRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WorkflowService_PollForDecisionTask_result = function(args) {
  this.success = null;
  this.badRequestError = null;
  this.internalServiceError = null;
  if (args instanceof shared_ttypes.BadRequestError) {
    this.badRequestError = args;
    return;
  }
  if (args instanceof shared_ttypes.InternalServiceError) {
    this.internalServiceError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new shared_ttypes.PollForDecisionTaskResponse(args.success);
    }
    if (args.badRequestError !== undefined && args.badRequestError !== null) {
      this.badRequestError = args.badRequestError;
    }
    if (args.internalServiceError !== undefined && args.internalServiceError !== null) {
      this.internalServiceError = args.internalServiceError;
    }
  }
};
WorkflowService_PollForDecisionTask_result.prototype = {};
WorkflowService_PollForDecisionTask_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new shared_ttypes.PollForDecisionTaskResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.badRequestError = new shared_ttypes.BadRequestError();
        this.badRequestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.internalServiceError = new shared_ttypes.InternalServiceError();
        this.internalServiceError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkflowService_PollForDecisionTask_result.prototype.write = function(output) {
  output.writeStructBegin('WorkflowService_PollForDecisionTask_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.badRequestError !== null && this.badRequestError !== undefined) {
    output.writeFieldBegin('badRequestError', Thrift.Type.STRUCT, 1);
    this.badRequestError.write(output);
    output.writeFieldEnd();
  }
  if (this.internalServiceError !== null && this.internalServiceError !== undefined) {
    output.writeFieldBegin('internalServiceError', Thrift.Type.STRUCT, 2);
    this.internalServiceError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WorkflowService_RespondDecisionTaskCompleted_args = function(args) {
  this.completeRequest = null;
  if (args) {
    if (args.completeRequest !== undefined && args.completeRequest !== null) {
      this.completeRequest = new shared_ttypes.RespondDecisionTaskCompletedRequest(args.completeRequest);
    }
  }
};
WorkflowService_RespondDecisionTaskCompleted_args.prototype = {};
WorkflowService_RespondDecisionTaskCompleted_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.completeRequest = new shared_ttypes.RespondDecisionTaskCompletedRequest();
        this.completeRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkflowService_RespondDecisionTaskCompleted_args.prototype.write = function(output) {
  output.writeStructBegin('WorkflowService_RespondDecisionTaskCompleted_args');
  if (this.completeRequest !== null && this.completeRequest !== undefined) {
    output.writeFieldBegin('completeRequest', Thrift.Type.STRUCT, 1);
    this.completeRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WorkflowService_RespondDecisionTaskCompleted_result = function(args) {
  this.badRequestError = null;
  this.internalServiceError = null;
  this.entityNotExistError = null;
  if (args instanceof shared_ttypes.BadRequestError) {
    this.badRequestError = args;
    return;
  }
  if (args instanceof shared_ttypes.InternalServiceError) {
    this.internalServiceError = args;
    return;
  }
  if (args instanceof shared_ttypes.EntityNotExistsError) {
    this.entityNotExistError = args;
    return;
  }
  if (args) {
    if (args.badRequestError !== undefined && args.badRequestError !== null) {
      this.badRequestError = args.badRequestError;
    }
    if (args.internalServiceError !== undefined && args.internalServiceError !== null) {
      this.internalServiceError = args.internalServiceError;
    }
    if (args.entityNotExistError !== undefined && args.entityNotExistError !== null) {
      this.entityNotExistError = args.entityNotExistError;
    }
  }
};
WorkflowService_RespondDecisionTaskCompleted_result.prototype = {};
WorkflowService_RespondDecisionTaskCompleted_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.badRequestError = new shared_ttypes.BadRequestError();
        this.badRequestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.internalServiceError = new shared_ttypes.InternalServiceError();
        this.internalServiceError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.entityNotExistError = new shared_ttypes.EntityNotExistsError();
        this.entityNotExistError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkflowService_RespondDecisionTaskCompleted_result.prototype.write = function(output) {
  output.writeStructBegin('WorkflowService_RespondDecisionTaskCompleted_result');
  if (this.badRequestError !== null && this.badRequestError !== undefined) {
    output.writeFieldBegin('badRequestError', Thrift.Type.STRUCT, 1);
    this.badRequestError.write(output);
    output.writeFieldEnd();
  }
  if (this.internalServiceError !== null && this.internalServiceError !== undefined) {
    output.writeFieldBegin('internalServiceError', Thrift.Type.STRUCT, 2);
    this.internalServiceError.write(output);
    output.writeFieldEnd();
  }
  if (this.entityNotExistError !== null && this.entityNotExistError !== undefined) {
    output.writeFieldBegin('entityNotExistError', Thrift.Type.STRUCT, 3);
    this.entityNotExistError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WorkflowService_PollForActivityTask_args = function(args) {
  this.pollRequest = null;
  if (args) {
    if (args.pollRequest !== undefined && args.pollRequest !== null) {
      this.pollRequest = new shared_ttypes.PollForActivityTaskRequest(args.pollRequest);
    }
  }
};
WorkflowService_PollForActivityTask_args.prototype = {};
WorkflowService_PollForActivityTask_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.pollRequest = new shared_ttypes.PollForActivityTaskRequest();
        this.pollRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkflowService_PollForActivityTask_args.prototype.write = function(output) {
  output.writeStructBegin('WorkflowService_PollForActivityTask_args');
  if (this.pollRequest !== null && this.pollRequest !== undefined) {
    output.writeFieldBegin('pollRequest', Thrift.Type.STRUCT, 1);
    this.pollRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WorkflowService_PollForActivityTask_result = function(args) {
  this.success = null;
  this.badRequestError = null;
  this.internalServiceError = null;
  if (args instanceof shared_ttypes.BadRequestError) {
    this.badRequestError = args;
    return;
  }
  if (args instanceof shared_ttypes.InternalServiceError) {
    this.internalServiceError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new shared_ttypes.PollForActivityTaskResponse(args.success);
    }
    if (args.badRequestError !== undefined && args.badRequestError !== null) {
      this.badRequestError = args.badRequestError;
    }
    if (args.internalServiceError !== undefined && args.internalServiceError !== null) {
      this.internalServiceError = args.internalServiceError;
    }
  }
};
WorkflowService_PollForActivityTask_result.prototype = {};
WorkflowService_PollForActivityTask_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new shared_ttypes.PollForActivityTaskResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.badRequestError = new shared_ttypes.BadRequestError();
        this.badRequestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.internalServiceError = new shared_ttypes.InternalServiceError();
        this.internalServiceError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkflowService_PollForActivityTask_result.prototype.write = function(output) {
  output.writeStructBegin('WorkflowService_PollForActivityTask_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.badRequestError !== null && this.badRequestError !== undefined) {
    output.writeFieldBegin('badRequestError', Thrift.Type.STRUCT, 1);
    this.badRequestError.write(output);
    output.writeFieldEnd();
  }
  if (this.internalServiceError !== null && this.internalServiceError !== undefined) {
    output.writeFieldBegin('internalServiceError', Thrift.Type.STRUCT, 2);
    this.internalServiceError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WorkflowService_RecordActivityTaskHeartbeat_args = function(args) {
  this.heartbeatRequest = null;
  if (args) {
    if (args.heartbeatRequest !== undefined && args.heartbeatRequest !== null) {
      this.heartbeatRequest = new shared_ttypes.RecordActivityTaskHeartbeatRequest(args.heartbeatRequest);
    }
  }
};
WorkflowService_RecordActivityTaskHeartbeat_args.prototype = {};
WorkflowService_RecordActivityTaskHeartbeat_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.heartbeatRequest = new shared_ttypes.RecordActivityTaskHeartbeatRequest();
        this.heartbeatRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkflowService_RecordActivityTaskHeartbeat_args.prototype.write = function(output) {
  output.writeStructBegin('WorkflowService_RecordActivityTaskHeartbeat_args');
  if (this.heartbeatRequest !== null && this.heartbeatRequest !== undefined) {
    output.writeFieldBegin('heartbeatRequest', Thrift.Type.STRUCT, 1);
    this.heartbeatRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WorkflowService_RecordActivityTaskHeartbeat_result = function(args) {
  this.success = null;
  this.badRequestError = null;
  this.internalServiceError = null;
  this.entityNotExistError = null;
  if (args instanceof shared_ttypes.BadRequestError) {
    this.badRequestError = args;
    return;
  }
  if (args instanceof shared_ttypes.InternalServiceError) {
    this.internalServiceError = args;
    return;
  }
  if (args instanceof shared_ttypes.EntityNotExistsError) {
    this.entityNotExistError = args;
    return;
  }
  if (args) {
    if (args.success !== undefined && args.success !== null) {
      this.success = new shared_ttypes.RecordActivityTaskHeartbeatResponse(args.success);
    }
    if (args.badRequestError !== undefined && args.badRequestError !== null) {
      this.badRequestError = args.badRequestError;
    }
    if (args.internalServiceError !== undefined && args.internalServiceError !== null) {
      this.internalServiceError = args.internalServiceError;
    }
    if (args.entityNotExistError !== undefined && args.entityNotExistError !== null) {
      this.entityNotExistError = args.entityNotExistError;
    }
  }
};
WorkflowService_RecordActivityTaskHeartbeat_result.prototype = {};
WorkflowService_RecordActivityTaskHeartbeat_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 0:
      if (ftype == Thrift.Type.STRUCT) {
        this.success = new shared_ttypes.RecordActivityTaskHeartbeatResponse();
        this.success.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.badRequestError = new shared_ttypes.BadRequestError();
        this.badRequestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.internalServiceError = new shared_ttypes.InternalServiceError();
        this.internalServiceError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.entityNotExistError = new shared_ttypes.EntityNotExistsError();
        this.entityNotExistError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkflowService_RecordActivityTaskHeartbeat_result.prototype.write = function(output) {
  output.writeStructBegin('WorkflowService_RecordActivityTaskHeartbeat_result');
  if (this.success !== null && this.success !== undefined) {
    output.writeFieldBegin('success', Thrift.Type.STRUCT, 0);
    this.success.write(output);
    output.writeFieldEnd();
  }
  if (this.badRequestError !== null && this.badRequestError !== undefined) {
    output.writeFieldBegin('badRequestError', Thrift.Type.STRUCT, 1);
    this.badRequestError.write(output);
    output.writeFieldEnd();
  }
  if (this.internalServiceError !== null && this.internalServiceError !== undefined) {
    output.writeFieldBegin('internalServiceError', Thrift.Type.STRUCT, 2);
    this.internalServiceError.write(output);
    output.writeFieldEnd();
  }
  if (this.entityNotExistError !== null && this.entityNotExistError !== undefined) {
    output.writeFieldBegin('entityNotExistError', Thrift.Type.STRUCT, 3);
    this.entityNotExistError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WorkflowService_RespondActivityTaskCompleted_args = function(args) {
  this.completeRequest = null;
  if (args) {
    if (args.completeRequest !== undefined && args.completeRequest !== null) {
      this.completeRequest = new shared_ttypes.RespondActivityTaskCompletedRequest(args.completeRequest);
    }
  }
};
WorkflowService_RespondActivityTaskCompleted_args.prototype = {};
WorkflowService_RespondActivityTaskCompleted_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.completeRequest = new shared_ttypes.RespondActivityTaskCompletedRequest();
        this.completeRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkflowService_RespondActivityTaskCompleted_args.prototype.write = function(output) {
  output.writeStructBegin('WorkflowService_RespondActivityTaskCompleted_args');
  if (this.completeRequest !== null && this.completeRequest !== undefined) {
    output.writeFieldBegin('completeRequest', Thrift.Type.STRUCT, 1);
    this.completeRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WorkflowService_RespondActivityTaskCompleted_result = function(args) {
  this.badRequestError = null;
  this.internalServiceError = null;
  this.entityNotExistError = null;
  if (args instanceof shared_ttypes.BadRequestError) {
    this.badRequestError = args;
    return;
  }
  if (args instanceof shared_ttypes.InternalServiceError) {
    this.internalServiceError = args;
    return;
  }
  if (args instanceof shared_ttypes.EntityNotExistsError) {
    this.entityNotExistError = args;
    return;
  }
  if (args) {
    if (args.badRequestError !== undefined && args.badRequestError !== null) {
      this.badRequestError = args.badRequestError;
    }
    if (args.internalServiceError !== undefined && args.internalServiceError !== null) {
      this.internalServiceError = args.internalServiceError;
    }
    if (args.entityNotExistError !== undefined && args.entityNotExistError !== null) {
      this.entityNotExistError = args.entityNotExistError;
    }
  }
};
WorkflowService_RespondActivityTaskCompleted_result.prototype = {};
WorkflowService_RespondActivityTaskCompleted_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.badRequestError = new shared_ttypes.BadRequestError();
        this.badRequestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.internalServiceError = new shared_ttypes.InternalServiceError();
        this.internalServiceError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.entityNotExistError = new shared_ttypes.EntityNotExistsError();
        this.entityNotExistError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkflowService_RespondActivityTaskCompleted_result.prototype.write = function(output) {
  output.writeStructBegin('WorkflowService_RespondActivityTaskCompleted_result');
  if (this.badRequestError !== null && this.badRequestError !== undefined) {
    output.writeFieldBegin('badRequestError', Thrift.Type.STRUCT, 1);
    this.badRequestError.write(output);
    output.writeFieldEnd();
  }
  if (this.internalServiceError !== null && this.internalServiceError !== undefined) {
    output.writeFieldBegin('internalServiceError', Thrift.Type.STRUCT, 2);
    this.internalServiceError.write(output);
    output.writeFieldEnd();
  }
  if (this.entityNotExistError !== null && this.entityNotExistError !== undefined) {
    output.writeFieldBegin('entityNotExistError', Thrift.Type.STRUCT, 3);
    this.entityNotExistError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WorkflowService_RespondActivityTaskFailed_args = function(args) {
  this.failRequest = null;
  if (args) {
    if (args.failRequest !== undefined && args.failRequest !== null) {
      this.failRequest = new shared_ttypes.RespondActivityTaskFailedRequest(args.failRequest);
    }
  }
};
WorkflowService_RespondActivityTaskFailed_args.prototype = {};
WorkflowService_RespondActivityTaskFailed_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.failRequest = new shared_ttypes.RespondActivityTaskFailedRequest();
        this.failRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkflowService_RespondActivityTaskFailed_args.prototype.write = function(output) {
  output.writeStructBegin('WorkflowService_RespondActivityTaskFailed_args');
  if (this.failRequest !== null && this.failRequest !== undefined) {
    output.writeFieldBegin('failRequest', Thrift.Type.STRUCT, 1);
    this.failRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WorkflowService_RespondActivityTaskFailed_result = function(args) {
  this.badRequestError = null;
  this.internalServiceError = null;
  this.entityNotExistError = null;
  if (args instanceof shared_ttypes.BadRequestError) {
    this.badRequestError = args;
    return;
  }
  if (args instanceof shared_ttypes.InternalServiceError) {
    this.internalServiceError = args;
    return;
  }
  if (args instanceof shared_ttypes.EntityNotExistsError) {
    this.entityNotExistError = args;
    return;
  }
  if (args) {
    if (args.badRequestError !== undefined && args.badRequestError !== null) {
      this.badRequestError = args.badRequestError;
    }
    if (args.internalServiceError !== undefined && args.internalServiceError !== null) {
      this.internalServiceError = args.internalServiceError;
    }
    if (args.entityNotExistError !== undefined && args.entityNotExistError !== null) {
      this.entityNotExistError = args.entityNotExistError;
    }
  }
};
WorkflowService_RespondActivityTaskFailed_result.prototype = {};
WorkflowService_RespondActivityTaskFailed_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.badRequestError = new shared_ttypes.BadRequestError();
        this.badRequestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.internalServiceError = new shared_ttypes.InternalServiceError();
        this.internalServiceError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.entityNotExistError = new shared_ttypes.EntityNotExistsError();
        this.entityNotExistError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkflowService_RespondActivityTaskFailed_result.prototype.write = function(output) {
  output.writeStructBegin('WorkflowService_RespondActivityTaskFailed_result');
  if (this.badRequestError !== null && this.badRequestError !== undefined) {
    output.writeFieldBegin('badRequestError', Thrift.Type.STRUCT, 1);
    this.badRequestError.write(output);
    output.writeFieldEnd();
  }
  if (this.internalServiceError !== null && this.internalServiceError !== undefined) {
    output.writeFieldBegin('internalServiceError', Thrift.Type.STRUCT, 2);
    this.internalServiceError.write(output);
    output.writeFieldEnd();
  }
  if (this.entityNotExistError !== null && this.entityNotExistError !== undefined) {
    output.writeFieldBegin('entityNotExistError', Thrift.Type.STRUCT, 3);
    this.entityNotExistError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WorkflowService_RespondActivityTaskCanceled_args = function(args) {
  this.canceledRequest = null;
  if (args) {
    if (args.canceledRequest !== undefined && args.canceledRequest !== null) {
      this.canceledRequest = new shared_ttypes.RespondActivityTaskCanceledRequest(args.canceledRequest);
    }
  }
};
WorkflowService_RespondActivityTaskCanceled_args.prototype = {};
WorkflowService_RespondActivityTaskCanceled_args.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.canceledRequest = new shared_ttypes.RespondActivityTaskCanceledRequest();
        this.canceledRequest.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 0:
        input.skip(ftype);
        break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkflowService_RespondActivityTaskCanceled_args.prototype.write = function(output) {
  output.writeStructBegin('WorkflowService_RespondActivityTaskCanceled_args');
  if (this.canceledRequest !== null && this.canceledRequest !== undefined) {
    output.writeFieldBegin('canceledRequest', Thrift.Type.STRUCT, 1);
    this.canceledRequest.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WorkflowService_RespondActivityTaskCanceled_result = function(args) {
  this.badRequestError = null;
  this.internalServiceError = null;
  this.entityNotExistError = null;
  if (args instanceof shared_ttypes.BadRequestError) {
    this.badRequestError = args;
    return;
  }
  if (args instanceof shared_ttypes.InternalServiceError) {
    this.internalServiceError = args;
    return;
  }
  if (args instanceof shared_ttypes.EntityNotExistsError) {
    this.entityNotExistError = args;
    return;
  }
  if (args) {
    if (args.badRequestError !== undefined && args.badRequestError !== null) {
      this.badRequestError = args.badRequestError;
    }
    if (args.internalServiceError !== undefined && args.internalServiceError !== null) {
      this.internalServiceError = args.internalServiceError;
    }
    if (args.entityNotExistError !== undefined && args.entityNotExistError !== null) {
      this.entityNotExistError = args.entityNotExistError;
    }
  }
};
WorkflowService_RespondActivityTaskCanceled_result.prototype = {};
WorkflowService_RespondActivityTaskCanceled_result.prototype.read = function(input) {
  input.readStructBegin();
  while (true)
  {
    var ret = input.readFieldBegin();
    var fname = ret.fname;
    var ftype = ret.ftype;
    var fid = ret.fid;
    if (ftype == Thrift.Type.STOP) {
      break;
    }
    switch (fid)
    {
      case 1:
      if (ftype == Thrift.Type.STRUCT) {
        this.badRequestError = new shared_ttypes.BadRequestError();
        this.badRequestError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 2:
      if (ftype == Thrift.Type.STRUCT) {
        this.internalServiceError = new shared_ttypes.InternalServiceError();
        this.internalServiceError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      case 3:
      if (ftype == Thrift.Type.STRUCT) {
        this.entityNotExistError = new shared_ttypes.EntityNotExistsError();
        this.entityNotExistError.read(input);
      } else {
        input.skip(ftype);
      }
      break;
      default:
        input.skip(ftype);
    }
    input.readFieldEnd();
  }
  input.readStructEnd();
  return;
};

WorkflowService_RespondActivityTaskCanceled_result.prototype.write = function(output) {
  output.writeStructBegin('WorkflowService_RespondActivityTaskCanceled_result');
  if (this.badRequestError !== null && this.badRequestError !== undefined) {
    output.writeFieldBegin('badRequestError', Thrift.Type.STRUCT, 1);
    this.badRequestError.write(output);
    output.writeFieldEnd();
  }
  if (this.internalServiceError !== null && this.internalServiceError !== undefined) {
    output.writeFieldBegin('internalServiceError', Thrift.Type.STRUCT, 2);
    this.internalServiceError.write(output);
    output.writeFieldEnd();
  }
  if (this.entityNotExistError !== null && this.entityNotExistError !== undefined) {
    output.writeFieldBegin('entityNotExistError', Thrift.Type.STRUCT, 3);
    this.entityNotExistError.write(output);
    output.writeFieldEnd();
  }
  output.writeFieldStop();
  output.writeStructEnd();
  return;
};

var WorkflowServiceClient = exports.Client = function(output, pClass) {
    this.output = output;
    this.pClass = pClass;
    this._seqid = 0;
    this._reqs = {};
};
WorkflowServiceClient.prototype = {};
WorkflowServiceClient.prototype.seqid = function() { return this._seqid; }
WorkflowServiceClient.prototype.new_seqid = function() { return this._seqid += 1; }
WorkflowServiceClient.prototype.StartWorkflowExecution = function(startRequest, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_StartWorkflowExecution(startRequest);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_StartWorkflowExecution(startRequest);
  }
};

WorkflowServiceClient.prototype.send_StartWorkflowExecution = function(startRequest) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('StartWorkflowExecution', Thrift.MessageType.CALL, this.seqid());
  var args = new WorkflowService_StartWorkflowExecution_args();
  args.startRequest = startRequest;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

WorkflowServiceClient.prototype.recv_StartWorkflowExecution = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new WorkflowService_StartWorkflowExecution_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.badRequestError) {
    return callback(result.badRequestError);
  }
  if (null !== result.internalServiceError) {
    return callback(result.internalServiceError);
  }
  if (null !== result.sessionAlreadyExistError) {
    return callback(result.sessionAlreadyExistError);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('StartWorkflowExecution failed: unknown result');
};
WorkflowServiceClient.prototype.GetWorkflowExecutionHistory = function(getRequest, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_GetWorkflowExecutionHistory(getRequest);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_GetWorkflowExecutionHistory(getRequest);
  }
};

WorkflowServiceClient.prototype.send_GetWorkflowExecutionHistory = function(getRequest) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('GetWorkflowExecutionHistory', Thrift.MessageType.CALL, this.seqid());
  var args = new WorkflowService_GetWorkflowExecutionHistory_args();
  args.getRequest = getRequest;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

WorkflowServiceClient.prototype.recv_GetWorkflowExecutionHistory = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new WorkflowService_GetWorkflowExecutionHistory_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.badRequestError) {
    return callback(result.badRequestError);
  }
  if (null !== result.internalServiceError) {
    return callback(result.internalServiceError);
  }
  if (null !== result.entityNotExistError) {
    return callback(result.entityNotExistError);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('GetWorkflowExecutionHistory failed: unknown result');
};
WorkflowServiceClient.prototype.PollForDecisionTask = function(pollRequest, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_PollForDecisionTask(pollRequest);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_PollForDecisionTask(pollRequest);
  }
};

WorkflowServiceClient.prototype.send_PollForDecisionTask = function(pollRequest) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('PollForDecisionTask', Thrift.MessageType.CALL, this.seqid());
  var args = new WorkflowService_PollForDecisionTask_args();
  args.pollRequest = pollRequest;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

WorkflowServiceClient.prototype.recv_PollForDecisionTask = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new WorkflowService_PollForDecisionTask_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.badRequestError) {
    return callback(result.badRequestError);
  }
  if (null !== result.internalServiceError) {
    return callback(result.internalServiceError);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('PollForDecisionTask failed: unknown result');
};
WorkflowServiceClient.prototype.RespondDecisionTaskCompleted = function(completeRequest, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_RespondDecisionTaskCompleted(completeRequest);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_RespondDecisionTaskCompleted(completeRequest);
  }
};

WorkflowServiceClient.prototype.send_RespondDecisionTaskCompleted = function(completeRequest) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('RespondDecisionTaskCompleted', Thrift.MessageType.CALL, this.seqid());
  var args = new WorkflowService_RespondDecisionTaskCompleted_args();
  args.completeRequest = completeRequest;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

WorkflowServiceClient.prototype.recv_RespondDecisionTaskCompleted = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new WorkflowService_RespondDecisionTaskCompleted_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.badRequestError) {
    return callback(result.badRequestError);
  }
  if (null !== result.internalServiceError) {
    return callback(result.internalServiceError);
  }
  if (null !== result.entityNotExistError) {
    return callback(result.entityNotExistError);
  }
  callback(null)
};
WorkflowServiceClient.prototype.PollForActivityTask = function(pollRequest, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_PollForActivityTask(pollRequest);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_PollForActivityTask(pollRequest);
  }
};

WorkflowServiceClient.prototype.send_PollForActivityTask = function(pollRequest) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('PollForActivityTask', Thrift.MessageType.CALL, this.seqid());
  var args = new WorkflowService_PollForActivityTask_args();
  args.pollRequest = pollRequest;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

WorkflowServiceClient.prototype.recv_PollForActivityTask = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new WorkflowService_PollForActivityTask_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.badRequestError) {
    return callback(result.badRequestError);
  }
  if (null !== result.internalServiceError) {
    return callback(result.internalServiceError);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('PollForActivityTask failed: unknown result');
};
WorkflowServiceClient.prototype.RecordActivityTaskHeartbeat = function(heartbeatRequest, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_RecordActivityTaskHeartbeat(heartbeatRequest);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_RecordActivityTaskHeartbeat(heartbeatRequest);
  }
};

WorkflowServiceClient.prototype.send_RecordActivityTaskHeartbeat = function(heartbeatRequest) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('RecordActivityTaskHeartbeat', Thrift.MessageType.CALL, this.seqid());
  var args = new WorkflowService_RecordActivityTaskHeartbeat_args();
  args.heartbeatRequest = heartbeatRequest;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

WorkflowServiceClient.prototype.recv_RecordActivityTaskHeartbeat = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new WorkflowService_RecordActivityTaskHeartbeat_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.badRequestError) {
    return callback(result.badRequestError);
  }
  if (null !== result.internalServiceError) {
    return callback(result.internalServiceError);
  }
  if (null !== result.entityNotExistError) {
    return callback(result.entityNotExistError);
  }
  if (null !== result.success) {
    return callback(null, result.success);
  }
  return callback('RecordActivityTaskHeartbeat failed: unknown result');
};
WorkflowServiceClient.prototype.RespondActivityTaskCompleted = function(completeRequest, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_RespondActivityTaskCompleted(completeRequest);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_RespondActivityTaskCompleted(completeRequest);
  }
};

WorkflowServiceClient.prototype.send_RespondActivityTaskCompleted = function(completeRequest) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('RespondActivityTaskCompleted', Thrift.MessageType.CALL, this.seqid());
  var args = new WorkflowService_RespondActivityTaskCompleted_args();
  args.completeRequest = completeRequest;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

WorkflowServiceClient.prototype.recv_RespondActivityTaskCompleted = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new WorkflowService_RespondActivityTaskCompleted_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.badRequestError) {
    return callback(result.badRequestError);
  }
  if (null !== result.internalServiceError) {
    return callback(result.internalServiceError);
  }
  if (null !== result.entityNotExistError) {
    return callback(result.entityNotExistError);
  }
  callback(null)
};
WorkflowServiceClient.prototype.RespondActivityTaskFailed = function(failRequest, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_RespondActivityTaskFailed(failRequest);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_RespondActivityTaskFailed(failRequest);
  }
};

WorkflowServiceClient.prototype.send_RespondActivityTaskFailed = function(failRequest) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('RespondActivityTaskFailed', Thrift.MessageType.CALL, this.seqid());
  var args = new WorkflowService_RespondActivityTaskFailed_args();
  args.failRequest = failRequest;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

WorkflowServiceClient.prototype.recv_RespondActivityTaskFailed = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new WorkflowService_RespondActivityTaskFailed_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.badRequestError) {
    return callback(result.badRequestError);
  }
  if (null !== result.internalServiceError) {
    return callback(result.internalServiceError);
  }
  if (null !== result.entityNotExistError) {
    return callback(result.entityNotExistError);
  }
  callback(null)
};
WorkflowServiceClient.prototype.RespondActivityTaskCanceled = function(canceledRequest, callback) {
  this._seqid = this.new_seqid();
  if (callback === undefined) {
    var _defer = Q.defer();
    this._reqs[this.seqid()] = function(error, result) {
      if (error) {
        _defer.reject(error);
      } else {
        _defer.resolve(result);
      }
    };
    this.send_RespondActivityTaskCanceled(canceledRequest);
    return _defer.promise;
  } else {
    this._reqs[this.seqid()] = callback;
    this.send_RespondActivityTaskCanceled(canceledRequest);
  }
};

WorkflowServiceClient.prototype.send_RespondActivityTaskCanceled = function(canceledRequest) {
  var output = new this.pClass(this.output);
  output.writeMessageBegin('RespondActivityTaskCanceled', Thrift.MessageType.CALL, this.seqid());
  var args = new WorkflowService_RespondActivityTaskCanceled_args();
  args.canceledRequest = canceledRequest;
  args.write(output);
  output.writeMessageEnd();
  return this.output.flush();
};

WorkflowServiceClient.prototype.recv_RespondActivityTaskCanceled = function(input,mtype,rseqid) {
  var callback = this._reqs[rseqid] || function() {};
  delete this._reqs[rseqid];
  if (mtype == Thrift.MessageType.EXCEPTION) {
    var x = new Thrift.TApplicationException();
    x.read(input);
    input.readMessageEnd();
    return callback(x);
  }
  var result = new WorkflowService_RespondActivityTaskCanceled_result();
  result.read(input);
  input.readMessageEnd();

  if (null !== result.badRequestError) {
    return callback(result.badRequestError);
  }
  if (null !== result.internalServiceError) {
    return callback(result.internalServiceError);
  }
  if (null !== result.entityNotExistError) {
    return callback(result.entityNotExistError);
  }
  callback(null)
};
var WorkflowServiceProcessor = exports.Processor = function(handler) {
  this._handler = handler
}
WorkflowServiceProcessor.prototype.process = function(input, output) {
  var r = input.readMessageBegin();
  if (this['process_' + r.fname]) {
    return this['process_' + r.fname].call(this, r.rseqid, input, output);
  } else {
    input.skip(Thrift.Type.STRUCT);
    input.readMessageEnd();
    var x = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN_METHOD, 'Unknown function ' + r.fname);
    output.writeMessageBegin(r.fname, Thrift.MessageType.EXCEPTION, r.rseqid);
    x.write(output);
    output.writeMessageEnd();
    output.flush();
  }
}

WorkflowServiceProcessor.prototype.process_StartWorkflowExecution = function(seqid, input, output) {
  var args = new WorkflowService_StartWorkflowExecution_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.StartWorkflowExecution.length === 1) {
    Q.fcall(this._handler.StartWorkflowExecution, args.startRequest)
      .then(function(result) {
        var result = new WorkflowService_StartWorkflowExecution_result({success: result});
        output.writeMessageBegin("StartWorkflowExecution", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof shared_ttypes.BadRequestError || err instanceof shared_ttypes.InternalServiceError || err instanceof shared_ttypes.WorkflowExecutionAlreadyStartedError) {
          var result = new WorkflowService_StartWorkflowExecution_result(err);
          output.writeMessageBegin("StartWorkflowExecution", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("StartWorkflowExecution", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.StartWorkflowExecution(args.startRequest, function (err, result) {
      if (err == null || err instanceof shared_ttypes.BadRequestError || err instanceof shared_ttypes.InternalServiceError || err instanceof shared_ttypes.WorkflowExecutionAlreadyStartedError) {
        var result = new WorkflowService_StartWorkflowExecution_result((err != null ? err : {success: result}));
        output.writeMessageBegin("StartWorkflowExecution", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("StartWorkflowExecution", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

WorkflowServiceProcessor.prototype.process_GetWorkflowExecutionHistory = function(seqid, input, output) {
  var args = new WorkflowService_GetWorkflowExecutionHistory_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.GetWorkflowExecutionHistory.length === 1) {
    Q.fcall(this._handler.GetWorkflowExecutionHistory, args.getRequest)
      .then(function(result) {
        var result = new WorkflowService_GetWorkflowExecutionHistory_result({success: result});
        output.writeMessageBegin("GetWorkflowExecutionHistory", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof shared_ttypes.BadRequestError || err instanceof shared_ttypes.InternalServiceError || err instanceof shared_ttypes.EntityNotExistsError) {
          var result = new WorkflowService_GetWorkflowExecutionHistory_result(err);
          output.writeMessageBegin("GetWorkflowExecutionHistory", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("GetWorkflowExecutionHistory", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.GetWorkflowExecutionHistory(args.getRequest, function (err, result) {
      if (err == null || err instanceof shared_ttypes.BadRequestError || err instanceof shared_ttypes.InternalServiceError || err instanceof shared_ttypes.EntityNotExistsError) {
        var result = new WorkflowService_GetWorkflowExecutionHistory_result((err != null ? err : {success: result}));
        output.writeMessageBegin("GetWorkflowExecutionHistory", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("GetWorkflowExecutionHistory", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

WorkflowServiceProcessor.prototype.process_PollForDecisionTask = function(seqid, input, output) {
  var args = new WorkflowService_PollForDecisionTask_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.PollForDecisionTask.length === 1) {
    Q.fcall(this._handler.PollForDecisionTask, args.pollRequest)
      .then(function(result) {
        var result = new WorkflowService_PollForDecisionTask_result({success: result});
        output.writeMessageBegin("PollForDecisionTask", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof shared_ttypes.BadRequestError || err instanceof shared_ttypes.InternalServiceError) {
          var result = new WorkflowService_PollForDecisionTask_result(err);
          output.writeMessageBegin("PollForDecisionTask", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("PollForDecisionTask", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.PollForDecisionTask(args.pollRequest, function (err, result) {
      if (err == null || err instanceof shared_ttypes.BadRequestError || err instanceof shared_ttypes.InternalServiceError) {
        var result = new WorkflowService_PollForDecisionTask_result((err != null ? err : {success: result}));
        output.writeMessageBegin("PollForDecisionTask", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("PollForDecisionTask", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

WorkflowServiceProcessor.prototype.process_RespondDecisionTaskCompleted = function(seqid, input, output) {
  var args = new WorkflowService_RespondDecisionTaskCompleted_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.RespondDecisionTaskCompleted.length === 1) {
    Q.fcall(this._handler.RespondDecisionTaskCompleted, args.completeRequest)
      .then(function(result) {
        var result = new WorkflowService_RespondDecisionTaskCompleted_result({success: result});
        output.writeMessageBegin("RespondDecisionTaskCompleted", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof shared_ttypes.BadRequestError || err instanceof shared_ttypes.InternalServiceError || err instanceof shared_ttypes.EntityNotExistsError) {
          var result = new WorkflowService_RespondDecisionTaskCompleted_result(err);
          output.writeMessageBegin("RespondDecisionTaskCompleted", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("RespondDecisionTaskCompleted", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.RespondDecisionTaskCompleted(args.completeRequest, function (err, result) {
      if (err == null || err instanceof shared_ttypes.BadRequestError || err instanceof shared_ttypes.InternalServiceError || err instanceof shared_ttypes.EntityNotExistsError) {
        var result = new WorkflowService_RespondDecisionTaskCompleted_result((err != null ? err : {success: result}));
        output.writeMessageBegin("RespondDecisionTaskCompleted", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("RespondDecisionTaskCompleted", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

WorkflowServiceProcessor.prototype.process_PollForActivityTask = function(seqid, input, output) {
  var args = new WorkflowService_PollForActivityTask_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.PollForActivityTask.length === 1) {
    Q.fcall(this._handler.PollForActivityTask, args.pollRequest)
      .then(function(result) {
        var result = new WorkflowService_PollForActivityTask_result({success: result});
        output.writeMessageBegin("PollForActivityTask", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof shared_ttypes.BadRequestError || err instanceof shared_ttypes.InternalServiceError) {
          var result = new WorkflowService_PollForActivityTask_result(err);
          output.writeMessageBegin("PollForActivityTask", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("PollForActivityTask", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.PollForActivityTask(args.pollRequest, function (err, result) {
      if (err == null || err instanceof shared_ttypes.BadRequestError || err instanceof shared_ttypes.InternalServiceError) {
        var result = new WorkflowService_PollForActivityTask_result((err != null ? err : {success: result}));
        output.writeMessageBegin("PollForActivityTask", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("PollForActivityTask", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

WorkflowServiceProcessor.prototype.process_RecordActivityTaskHeartbeat = function(seqid, input, output) {
  var args = new WorkflowService_RecordActivityTaskHeartbeat_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.RecordActivityTaskHeartbeat.length === 1) {
    Q.fcall(this._handler.RecordActivityTaskHeartbeat, args.heartbeatRequest)
      .then(function(result) {
        var result = new WorkflowService_RecordActivityTaskHeartbeat_result({success: result});
        output.writeMessageBegin("RecordActivityTaskHeartbeat", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof shared_ttypes.BadRequestError || err instanceof shared_ttypes.InternalServiceError || err instanceof shared_ttypes.EntityNotExistsError) {
          var result = new WorkflowService_RecordActivityTaskHeartbeat_result(err);
          output.writeMessageBegin("RecordActivityTaskHeartbeat", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("RecordActivityTaskHeartbeat", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.RecordActivityTaskHeartbeat(args.heartbeatRequest, function (err, result) {
      if (err == null || err instanceof shared_ttypes.BadRequestError || err instanceof shared_ttypes.InternalServiceError || err instanceof shared_ttypes.EntityNotExistsError) {
        var result = new WorkflowService_RecordActivityTaskHeartbeat_result((err != null ? err : {success: result}));
        output.writeMessageBegin("RecordActivityTaskHeartbeat", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("RecordActivityTaskHeartbeat", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

WorkflowServiceProcessor.prototype.process_RespondActivityTaskCompleted = function(seqid, input, output) {
  var args = new WorkflowService_RespondActivityTaskCompleted_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.RespondActivityTaskCompleted.length === 1) {
    Q.fcall(this._handler.RespondActivityTaskCompleted, args.completeRequest)
      .then(function(result) {
        var result = new WorkflowService_RespondActivityTaskCompleted_result({success: result});
        output.writeMessageBegin("RespondActivityTaskCompleted", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof shared_ttypes.BadRequestError || err instanceof shared_ttypes.InternalServiceError || err instanceof shared_ttypes.EntityNotExistsError) {
          var result = new WorkflowService_RespondActivityTaskCompleted_result(err);
          output.writeMessageBegin("RespondActivityTaskCompleted", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("RespondActivityTaskCompleted", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.RespondActivityTaskCompleted(args.completeRequest, function (err, result) {
      if (err == null || err instanceof shared_ttypes.BadRequestError || err instanceof shared_ttypes.InternalServiceError || err instanceof shared_ttypes.EntityNotExistsError) {
        var result = new WorkflowService_RespondActivityTaskCompleted_result((err != null ? err : {success: result}));
        output.writeMessageBegin("RespondActivityTaskCompleted", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("RespondActivityTaskCompleted", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

WorkflowServiceProcessor.prototype.process_RespondActivityTaskFailed = function(seqid, input, output) {
  var args = new WorkflowService_RespondActivityTaskFailed_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.RespondActivityTaskFailed.length === 1) {
    Q.fcall(this._handler.RespondActivityTaskFailed, args.failRequest)
      .then(function(result) {
        var result = new WorkflowService_RespondActivityTaskFailed_result({success: result});
        output.writeMessageBegin("RespondActivityTaskFailed", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof shared_ttypes.BadRequestError || err instanceof shared_ttypes.InternalServiceError || err instanceof shared_ttypes.EntityNotExistsError) {
          var result = new WorkflowService_RespondActivityTaskFailed_result(err);
          output.writeMessageBegin("RespondActivityTaskFailed", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("RespondActivityTaskFailed", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.RespondActivityTaskFailed(args.failRequest, function (err, result) {
      if (err == null || err instanceof shared_ttypes.BadRequestError || err instanceof shared_ttypes.InternalServiceError || err instanceof shared_ttypes.EntityNotExistsError) {
        var result = new WorkflowService_RespondActivityTaskFailed_result((err != null ? err : {success: result}));
        output.writeMessageBegin("RespondActivityTaskFailed", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("RespondActivityTaskFailed", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

WorkflowServiceProcessor.prototype.process_RespondActivityTaskCanceled = function(seqid, input, output) {
  var args = new WorkflowService_RespondActivityTaskCanceled_args();
  args.read(input);
  input.readMessageEnd();
  if (this._handler.RespondActivityTaskCanceled.length === 1) {
    Q.fcall(this._handler.RespondActivityTaskCanceled, args.canceledRequest)
      .then(function(result) {
        var result = new WorkflowService_RespondActivityTaskCanceled_result({success: result});
        output.writeMessageBegin("RespondActivityTaskCanceled", Thrift.MessageType.REPLY, seqid);
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      }, function (err) {
        if (err instanceof shared_ttypes.BadRequestError || err instanceof shared_ttypes.InternalServiceError || err instanceof shared_ttypes.EntityNotExistsError) {
          var result = new WorkflowService_RespondActivityTaskCanceled_result(err);
          output.writeMessageBegin("RespondActivityTaskCanceled", Thrift.MessageType.REPLY, seqid);
        } else {
          var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
          output.writeMessageBegin("RespondActivityTaskCanceled", Thrift.MessageType.EXCEPTION, seqid);
        }
        result.write(output);
        output.writeMessageEnd();
        output.flush();
      });
  } else {
    this._handler.RespondActivityTaskCanceled(args.canceledRequest, function (err, result) {
      if (err == null || err instanceof shared_ttypes.BadRequestError || err instanceof shared_ttypes.InternalServiceError || err instanceof shared_ttypes.EntityNotExistsError) {
        var result = new WorkflowService_RespondActivityTaskCanceled_result((err != null ? err : {success: result}));
        output.writeMessageBegin("RespondActivityTaskCanceled", Thrift.MessageType.REPLY, seqid);
      } else {
        var result = new Thrift.TApplicationException(Thrift.TApplicationExceptionType.UNKNOWN, err.message);
        output.writeMessageBegin("RespondActivityTaskCanceled", Thrift.MessageType.EXCEPTION, seqid);
      }
      result.write(output);
      output.writeMessageEnd();
      output.flush();
    });
  }
}

