#!/usr/bin/env python
#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:utf8strings
#

import sys
import pprint
from urlparse import urlparse
from thrift.transport import TTransport
from thrift.transport import TSocket
from thrift.transport import TSSLSocket
from thrift.transport import THttpClient
from thrift.protocol import TBinaryProtocol

from cadence import WorkflowService
from cadence.ttypes import *

if len(sys.argv) <= 1 or sys.argv[1] == '--help':
  print('')
  print('Usage: ' + sys.argv[0] + ' [-h host[:port]] [-u url] [-f[ramed]] [-s[sl]] function [arg1 [arg2...]]')
  print('')
  print('Functions:')
  print('  StartWorkflowExecutionResponse StartWorkflowExecution(StartWorkflowExecutionRequest startRequest)')
  print('  GetWorkflowExecutionHistoryResponse GetWorkflowExecutionHistory(GetWorkflowExecutionHistoryRequest getRequest)')
  print('  PollForDecisionTaskResponse PollForDecisionTask(PollForDecisionTaskRequest pollRequest)')
  print('  void RespondDecisionTaskCompleted(RespondDecisionTaskCompletedRequest completeRequest)')
  print('  PollForActivityTaskResponse PollForActivityTask(PollForActivityTaskRequest pollRequest)')
  print('  RecordActivityTaskHeartbeatResponse RecordActivityTaskHeartbeat(RecordActivityTaskHeartbeatRequest heartbeatRequest)')
  print('  void RespondActivityTaskCompleted(RespondActivityTaskCompletedRequest completeRequest)')
  print('  void RespondActivityTaskFailed(RespondActivityTaskFailedRequest failRequest)')
  print('  void RespondActivityTaskCanceled(RespondActivityTaskCanceledRequest canceledRequest)')
  print('')
  sys.exit(0)

pp = pprint.PrettyPrinter(indent = 2)
host = 'localhost'
port = 9090
uri = ''
framed = False
ssl = False
http = False
argi = 1

if sys.argv[argi] == '-h':
  parts = sys.argv[argi+1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  argi += 2

if sys.argv[argi] == '-u':
  url = urlparse(sys.argv[argi+1])
  parts = url[1].split(':')
  host = parts[0]
  if len(parts) > 1:
    port = int(parts[1])
  else:
    port = 80
  uri = url[2]
  if url[4]:
    uri += '?%s' % url[4]
  http = True
  argi += 2

if sys.argv[argi] == '-f' or sys.argv[argi] == '-framed':
  framed = True
  argi += 1

if sys.argv[argi] == '-s' or sys.argv[argi] == '-ssl':
  ssl = True
  argi += 1

cmd = sys.argv[argi]
args = sys.argv[argi+1:]

if http:
  transport = THttpClient.THttpClient(host, port, uri)
else:
  socket = TSSLSocket.TSSLSocket(host, port, validate=False) if ssl else TSocket.TSocket(host, port)
  if framed:
    transport = TTransport.TFramedTransport(socket)
  else:
    transport = TTransport.TBufferedTransport(socket)
protocol = TBinaryProtocol.TBinaryProtocol(transport)
client = WorkflowService.Client(protocol)
transport.open()

if cmd == 'StartWorkflowExecution':
  if len(args) != 1:
    print('StartWorkflowExecution requires 1 args')
    sys.exit(1)
  pp.pprint(client.StartWorkflowExecution(eval(args[0]),))

elif cmd == 'GetWorkflowExecutionHistory':
  if len(args) != 1:
    print('GetWorkflowExecutionHistory requires 1 args')
    sys.exit(1)
  pp.pprint(client.GetWorkflowExecutionHistory(eval(args[0]),))

elif cmd == 'PollForDecisionTask':
  if len(args) != 1:
    print('PollForDecisionTask requires 1 args')
    sys.exit(1)
  pp.pprint(client.PollForDecisionTask(eval(args[0]),))

elif cmd == 'RespondDecisionTaskCompleted':
  if len(args) != 1:
    print('RespondDecisionTaskCompleted requires 1 args')
    sys.exit(1)
  pp.pprint(client.RespondDecisionTaskCompleted(eval(args[0]),))

elif cmd == 'PollForActivityTask':
  if len(args) != 1:
    print('PollForActivityTask requires 1 args')
    sys.exit(1)
  pp.pprint(client.PollForActivityTask(eval(args[0]),))

elif cmd == 'RecordActivityTaskHeartbeat':
  if len(args) != 1:
    print('RecordActivityTaskHeartbeat requires 1 args')
    sys.exit(1)
  pp.pprint(client.RecordActivityTaskHeartbeat(eval(args[0]),))

elif cmd == 'RespondActivityTaskCompleted':
  if len(args) != 1:
    print('RespondActivityTaskCompleted requires 1 args')
    sys.exit(1)
  pp.pprint(client.RespondActivityTaskCompleted(eval(args[0]),))

elif cmd == 'RespondActivityTaskFailed':
  if len(args) != 1:
    print('RespondActivityTaskFailed requires 1 args')
    sys.exit(1)
  pp.pprint(client.RespondActivityTaskFailed(eval(args[0]),))

elif cmd == 'RespondActivityTaskCanceled':
  if len(args) != 1:
    print('RespondActivityTaskCanceled requires 1 args')
    sys.exit(1)
  pp.pprint(client.RespondActivityTaskCanceled(eval(args[0]),))

else:
  print('Unrecognized method %s' % cmd)
  sys.exit(1)

transport.close()
