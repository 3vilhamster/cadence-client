#
# Autogenerated by Thrift Compiler (0.9.2)
#
# DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
#
#  options string: py:utf8strings
#

from thrift.Thrift import TType, TMessageType, TException, TApplicationException

from thrift.transport import TTransport
from thrift.protocol import TBinaryProtocol, TProtocol
try:
  from thrift.protocol import fastbinary
except:
  fastbinary = None


class TimeoutType:
  START_TO_CLOSE = 0
  SCHEDULE_TO_START = 1
  SCHEDULE_TO_CLOSE = 2
  HEARTBEAT = 3

  _VALUES_TO_NAMES = {
    0: "START_TO_CLOSE",
    1: "SCHEDULE_TO_START",
    2: "SCHEDULE_TO_CLOSE",
    3: "HEARTBEAT",
  }

  _NAMES_TO_VALUES = {
    "START_TO_CLOSE": 0,
    "SCHEDULE_TO_START": 1,
    "SCHEDULE_TO_CLOSE": 2,
    "HEARTBEAT": 3,
  }

class DecisionType:
  ScheduleActivityTask = 0
  RequestCancelActivityTask = 1
  StartTimer = 2
  CompleteWorkflowExecution = 3
  FailWorkflowExecution = 4
  CancelTimer = 5

  _VALUES_TO_NAMES = {
    0: "ScheduleActivityTask",
    1: "RequestCancelActivityTask",
    2: "StartTimer",
    3: "CompleteWorkflowExecution",
    4: "FailWorkflowExecution",
    5: "CancelTimer",
  }

  _NAMES_TO_VALUES = {
    "ScheduleActivityTask": 0,
    "RequestCancelActivityTask": 1,
    "StartTimer": 2,
    "CompleteWorkflowExecution": 3,
    "FailWorkflowExecution": 4,
    "CancelTimer": 5,
  }

class EventType:
  WorkflowExecutionStarted = 0
  WorkflowExecutionCompleted = 1
  WorkflowExecutionFailed = 2
  WorkflowExecutionTimedOut = 3
  DecisionTaskScheduled = 4
  DecisionTaskStarted = 5
  DecisionTaskCompleted = 6
  DecisionTaskTimedOut = 7
  ActivityTaskScheduled = 8
  ActivityTaskStarted = 9
  ActivityTaskCompleted = 10
  ActivityTaskFailed = 11
  ActivityTaskTimedOut = 12
  ActivityTaskCancelRequested = 13
  RequestCancelActivityTaskFailed = 14
  ActivityTaskCanceled = 15
  TimerStarted = 16
  TimerFired = 17
  CompleteWorkflowExecutionFailed = 18
  CancelTimerFailed = 19
  TimerCanceled = 20

  _VALUES_TO_NAMES = {
    0: "WorkflowExecutionStarted",
    1: "WorkflowExecutionCompleted",
    2: "WorkflowExecutionFailed",
    3: "WorkflowExecutionTimedOut",
    4: "DecisionTaskScheduled",
    5: "DecisionTaskStarted",
    6: "DecisionTaskCompleted",
    7: "DecisionTaskTimedOut",
    8: "ActivityTaskScheduled",
    9: "ActivityTaskStarted",
    10: "ActivityTaskCompleted",
    11: "ActivityTaskFailed",
    12: "ActivityTaskTimedOut",
    13: "ActivityTaskCancelRequested",
    14: "RequestCancelActivityTaskFailed",
    15: "ActivityTaskCanceled",
    16: "TimerStarted",
    17: "TimerFired",
    18: "CompleteWorkflowExecutionFailed",
    19: "CancelTimerFailed",
    20: "TimerCanceled",
  }

  _NAMES_TO_VALUES = {
    "WorkflowExecutionStarted": 0,
    "WorkflowExecutionCompleted": 1,
    "WorkflowExecutionFailed": 2,
    "WorkflowExecutionTimedOut": 3,
    "DecisionTaskScheduled": 4,
    "DecisionTaskStarted": 5,
    "DecisionTaskCompleted": 6,
    "DecisionTaskTimedOut": 7,
    "ActivityTaskScheduled": 8,
    "ActivityTaskStarted": 9,
    "ActivityTaskCompleted": 10,
    "ActivityTaskFailed": 11,
    "ActivityTaskTimedOut": 12,
    "ActivityTaskCancelRequested": 13,
    "RequestCancelActivityTaskFailed": 14,
    "ActivityTaskCanceled": 15,
    "TimerStarted": 16,
    "TimerFired": 17,
    "CompleteWorkflowExecutionFailed": 18,
    "CancelTimerFailed": 19,
    "TimerCanceled": 20,
  }

class WorkflowCompleteFailedCause:
  UNHANDLED_DECISION = 0

  _VALUES_TO_NAMES = {
    0: "UNHANDLED_DECISION",
  }

  _NAMES_TO_VALUES = {
    "UNHANDLED_DECISION": 0,
  }


class BadRequestError(TException):
  """
  Attributes:
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', unicode, None, ), # 1
  )

  def __init__(self, message=None,):
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('BadRequestError')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.message is None:
      raise TProtocol.TProtocolException(message='Required field message is unset!')
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.message)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class InternalServiceError(TException):
  """
  Attributes:
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', unicode, None, ), # 1
  )

  def __init__(self, message=None,):
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('InternalServiceError')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.message is None:
      raise TProtocol.TProtocolException(message='Required field message is unset!')
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.message)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WorkflowExecutionAlreadyStartedError(TException):
  """
  Attributes:
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', unicode, None, ), # 1
  )

  def __init__(self, message=None,):
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WorkflowExecutionAlreadyStartedError')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.message is None:
      raise TProtocol.TProtocolException(message='Required field message is unset!')
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.message)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class EntityNotExistsError(TException):
  """
  Attributes:
   - message
  """

  thrift_spec = (
    None, # 0
    (1, TType.STRING, 'message', unicode, None, ), # 1
  )

  def __init__(self, message=None,):
    self.message = message

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 1:
        if ftype == TType.STRING:
          self.message = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('EntityNotExistsError')
    if self.message is not None:
      oprot.writeFieldBegin('message', TType.STRING, 1)
      oprot.writeString(self.message.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    if self.message is None:
      raise TProtocol.TProtocolException(message='Required field message is unset!')
    return


  def __str__(self):
    return repr(self)

  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.message)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WorkflowType:
  """
  Attributes:
   - name
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'name', unicode, None, ), # 10
  )

  def __init__(self, name=None,):
    self.name = name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.name = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WorkflowType')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 10)
      oprot.writeString(self.name.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ActivityType:
  """
  Attributes:
   - name
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'name', unicode, None, ), # 10
  )

  def __init__(self, name=None,):
    self.name = name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.name = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ActivityType')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 10)
      oprot.writeString(self.name.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TaskList:
  """
  Attributes:
   - name
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'name', unicode, None, ), # 10
  )

  def __init__(self, name=None,):
    self.name = name

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.name = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TaskList')
    if self.name is not None:
      oprot.writeFieldBegin('name', TType.STRING, 10)
      oprot.writeString(self.name.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.name)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WorkflowExecution:
  """
  Attributes:
   - workflowId
   - runId
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'workflowId', unicode, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRING, 'runId', unicode, None, ), # 20
  )

  def __init__(self, workflowId=None, runId=None,):
    self.workflowId = workflowId
    self.runId = runId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.workflowId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.runId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WorkflowExecution')
    if self.workflowId is not None:
      oprot.writeFieldBegin('workflowId', TType.STRING, 10)
      oprot.writeString(self.workflowId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.runId is not None:
      oprot.writeFieldBegin('runId', TType.STRING, 20)
      oprot.writeString(self.runId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.workflowId)
    value = (value * 31) ^ hash(self.runId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ScheduleActivityTaskDecisionAttributes:
  """
  Attributes:
   - activityId
   - activityType
   - taskList
   - input
   - scheduleToCloseTimeoutSeconds
   - scheduleToStartTimeoutSeconds
   - startToCloseTimeoutSeconds
   - heartbeatTimeoutSeconds
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'activityId', unicode, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRUCT, 'activityType', (ActivityType, ActivityType.thrift_spec), None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.STRUCT, 'taskList', (TaskList, TaskList.thrift_spec), None, ), # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.STRING, 'input', str, None, ), # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    (45, TType.I32, 'scheduleToCloseTimeoutSeconds', None, None, ), # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    (50, TType.I32, 'scheduleToStartTimeoutSeconds', None, None, ), # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    (55, TType.I32, 'startToCloseTimeoutSeconds', None, None, ), # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    (60, TType.I32, 'heartbeatTimeoutSeconds', None, None, ), # 60
  )

  def __init__(self, activityId=None, activityType=None, taskList=None, input=None, scheduleToCloseTimeoutSeconds=None, scheduleToStartTimeoutSeconds=None, startToCloseTimeoutSeconds=None, heartbeatTimeoutSeconds=None,):
    self.activityId = activityId
    self.activityType = activityType
    self.taskList = taskList
    self.input = input
    self.scheduleToCloseTimeoutSeconds = scheduleToCloseTimeoutSeconds
    self.scheduleToStartTimeoutSeconds = scheduleToStartTimeoutSeconds
    self.startToCloseTimeoutSeconds = startToCloseTimeoutSeconds
    self.heartbeatTimeoutSeconds = heartbeatTimeoutSeconds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.activityId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRUCT:
          self.activityType = ActivityType()
          self.activityType.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRUCT:
          self.taskList = TaskList()
          self.taskList.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.STRING:
          self.input = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 45:
        if ftype == TType.I32:
          self.scheduleToCloseTimeoutSeconds = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.I32:
          self.scheduleToStartTimeoutSeconds = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 55:
        if ftype == TType.I32:
          self.startToCloseTimeoutSeconds = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 60:
        if ftype == TType.I32:
          self.heartbeatTimeoutSeconds = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ScheduleActivityTaskDecisionAttributes')
    if self.activityId is not None:
      oprot.writeFieldBegin('activityId', TType.STRING, 10)
      oprot.writeString(self.activityId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.activityType is not None:
      oprot.writeFieldBegin('activityType', TType.STRUCT, 20)
      self.activityType.write(oprot)
      oprot.writeFieldEnd()
    if self.taskList is not None:
      oprot.writeFieldBegin('taskList', TType.STRUCT, 30)
      self.taskList.write(oprot)
      oprot.writeFieldEnd()
    if self.input is not None:
      oprot.writeFieldBegin('input', TType.STRING, 40)
      oprot.writeString(self.input)
      oprot.writeFieldEnd()
    if self.scheduleToCloseTimeoutSeconds is not None:
      oprot.writeFieldBegin('scheduleToCloseTimeoutSeconds', TType.I32, 45)
      oprot.writeI32(self.scheduleToCloseTimeoutSeconds)
      oprot.writeFieldEnd()
    if self.scheduleToStartTimeoutSeconds is not None:
      oprot.writeFieldBegin('scheduleToStartTimeoutSeconds', TType.I32, 50)
      oprot.writeI32(self.scheduleToStartTimeoutSeconds)
      oprot.writeFieldEnd()
    if self.startToCloseTimeoutSeconds is not None:
      oprot.writeFieldBegin('startToCloseTimeoutSeconds', TType.I32, 55)
      oprot.writeI32(self.startToCloseTimeoutSeconds)
      oprot.writeFieldEnd()
    if self.heartbeatTimeoutSeconds is not None:
      oprot.writeFieldBegin('heartbeatTimeoutSeconds', TType.I32, 60)
      oprot.writeI32(self.heartbeatTimeoutSeconds)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.activityId)
    value = (value * 31) ^ hash(self.activityType)
    value = (value * 31) ^ hash(self.taskList)
    value = (value * 31) ^ hash(self.input)
    value = (value * 31) ^ hash(self.scheduleToCloseTimeoutSeconds)
    value = (value * 31) ^ hash(self.scheduleToStartTimeoutSeconds)
    value = (value * 31) ^ hash(self.startToCloseTimeoutSeconds)
    value = (value * 31) ^ hash(self.heartbeatTimeoutSeconds)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestCancelActivityTaskDecisionAttributes:
  """
  Attributes:
   - activityId
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'activityId', unicode, None, ), # 10
  )

  def __init__(self, activityId=None,):
    self.activityId = activityId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.activityId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestCancelActivityTaskDecisionAttributes')
    if self.activityId is not None:
      oprot.writeFieldBegin('activityId', TType.STRING, 10)
      oprot.writeString(self.activityId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.activityId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StartTimerDecisionAttributes:
  """
  Attributes:
   - timerId
   - startToFireTimeoutSeconds
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'timerId', unicode, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'startToFireTimeoutSeconds', None, None, ), # 20
  )

  def __init__(self, timerId=None, startToFireTimeoutSeconds=None,):
    self.timerId = timerId
    self.startToFireTimeoutSeconds = startToFireTimeoutSeconds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.timerId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.startToFireTimeoutSeconds = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StartTimerDecisionAttributes')
    if self.timerId is not None:
      oprot.writeFieldBegin('timerId', TType.STRING, 10)
      oprot.writeString(self.timerId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.startToFireTimeoutSeconds is not None:
      oprot.writeFieldBegin('startToFireTimeoutSeconds', TType.I64, 20)
      oprot.writeI64(self.startToFireTimeoutSeconds)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.timerId)
    value = (value * 31) ^ hash(self.startToFireTimeoutSeconds)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CompleteWorkflowExecutionDecisionAttributes:
  """
  Attributes:
   - result
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'result', str, None, ), # 10
  )

  def __init__(self, result=None,):
    self.result = result

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.result = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CompleteWorkflowExecutionDecisionAttributes')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.STRING, 10)
      oprot.writeString(self.result)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.result)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class FailWorkflowExecutionDecisionAttributes:
  """
  Attributes:
   - reason
   - details
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'reason', unicode, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRING, 'details', str, None, ), # 20
  )

  def __init__(self, reason=None, details=None,):
    self.reason = reason
    self.details = details

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.reason = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.details = iprot.readString();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('FailWorkflowExecutionDecisionAttributes')
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 10)
      oprot.writeString(self.reason.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.details is not None:
      oprot.writeFieldBegin('details', TType.STRING, 20)
      oprot.writeString(self.details)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.reason)
    value = (value * 31) ^ hash(self.details)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CancelTimerDecisionAttributes:
  """
  Attributes:
   - timerId
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'timerId', unicode, None, ), # 10
  )

  def __init__(self, timerId=None,):
    self.timerId = timerId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.timerId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CancelTimerDecisionAttributes')
    if self.timerId is not None:
      oprot.writeFieldBegin('timerId', TType.STRING, 10)
      oprot.writeString(self.timerId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.timerId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class Decision:
  """
  Attributes:
   - decisionType
   - scheduleActivityTaskDecisionAttributes
   - startTimerDecisionAttributes
   - completeWorkflowExecutionDecisionAttributes
   - failWorkflowExecutionDecisionAttributes
   - requestCancelActivityTaskDecisionAttributes
   - cancelTimerDecisionAttributes
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.I32, 'decisionType', None, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRUCT, 'scheduleActivityTaskDecisionAttributes', (ScheduleActivityTaskDecisionAttributes, ScheduleActivityTaskDecisionAttributes.thrift_spec), None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    (25, TType.STRUCT, 'startTimerDecisionAttributes', (StartTimerDecisionAttributes, StartTimerDecisionAttributes.thrift_spec), None, ), # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.STRUCT, 'completeWorkflowExecutionDecisionAttributes', (CompleteWorkflowExecutionDecisionAttributes, CompleteWorkflowExecutionDecisionAttributes.thrift_spec), None, ), # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    (35, TType.STRUCT, 'failWorkflowExecutionDecisionAttributes', (FailWorkflowExecutionDecisionAttributes, FailWorkflowExecutionDecisionAttributes.thrift_spec), None, ), # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.STRUCT, 'requestCancelActivityTaskDecisionAttributes', (RequestCancelActivityTaskDecisionAttributes, RequestCancelActivityTaskDecisionAttributes.thrift_spec), None, ), # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    (50, TType.STRUCT, 'cancelTimerDecisionAttributes', (CancelTimerDecisionAttributes, CancelTimerDecisionAttributes.thrift_spec), None, ), # 50
  )

  def __init__(self, decisionType=None, scheduleActivityTaskDecisionAttributes=None, startTimerDecisionAttributes=None, completeWorkflowExecutionDecisionAttributes=None, failWorkflowExecutionDecisionAttributes=None, requestCancelActivityTaskDecisionAttributes=None, cancelTimerDecisionAttributes=None,):
    self.decisionType = decisionType
    self.scheduleActivityTaskDecisionAttributes = scheduleActivityTaskDecisionAttributes
    self.startTimerDecisionAttributes = startTimerDecisionAttributes
    self.completeWorkflowExecutionDecisionAttributes = completeWorkflowExecutionDecisionAttributes
    self.failWorkflowExecutionDecisionAttributes = failWorkflowExecutionDecisionAttributes
    self.requestCancelActivityTaskDecisionAttributes = requestCancelActivityTaskDecisionAttributes
    self.cancelTimerDecisionAttributes = cancelTimerDecisionAttributes

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.I32:
          self.decisionType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRUCT:
          self.scheduleActivityTaskDecisionAttributes = ScheduleActivityTaskDecisionAttributes()
          self.scheduleActivityTaskDecisionAttributes.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 25:
        if ftype == TType.STRUCT:
          self.startTimerDecisionAttributes = StartTimerDecisionAttributes()
          self.startTimerDecisionAttributes.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRUCT:
          self.completeWorkflowExecutionDecisionAttributes = CompleteWorkflowExecutionDecisionAttributes()
          self.completeWorkflowExecutionDecisionAttributes.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.STRUCT:
          self.failWorkflowExecutionDecisionAttributes = FailWorkflowExecutionDecisionAttributes()
          self.failWorkflowExecutionDecisionAttributes.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.STRUCT:
          self.requestCancelActivityTaskDecisionAttributes = RequestCancelActivityTaskDecisionAttributes()
          self.requestCancelActivityTaskDecisionAttributes.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.STRUCT:
          self.cancelTimerDecisionAttributes = CancelTimerDecisionAttributes()
          self.cancelTimerDecisionAttributes.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('Decision')
    if self.decisionType is not None:
      oprot.writeFieldBegin('decisionType', TType.I32, 10)
      oprot.writeI32(self.decisionType)
      oprot.writeFieldEnd()
    if self.scheduleActivityTaskDecisionAttributes is not None:
      oprot.writeFieldBegin('scheduleActivityTaskDecisionAttributes', TType.STRUCT, 20)
      self.scheduleActivityTaskDecisionAttributes.write(oprot)
      oprot.writeFieldEnd()
    if self.startTimerDecisionAttributes is not None:
      oprot.writeFieldBegin('startTimerDecisionAttributes', TType.STRUCT, 25)
      self.startTimerDecisionAttributes.write(oprot)
      oprot.writeFieldEnd()
    if self.completeWorkflowExecutionDecisionAttributes is not None:
      oprot.writeFieldBegin('completeWorkflowExecutionDecisionAttributes', TType.STRUCT, 30)
      self.completeWorkflowExecutionDecisionAttributes.write(oprot)
      oprot.writeFieldEnd()
    if self.failWorkflowExecutionDecisionAttributes is not None:
      oprot.writeFieldBegin('failWorkflowExecutionDecisionAttributes', TType.STRUCT, 35)
      self.failWorkflowExecutionDecisionAttributes.write(oprot)
      oprot.writeFieldEnd()
    if self.requestCancelActivityTaskDecisionAttributes is not None:
      oprot.writeFieldBegin('requestCancelActivityTaskDecisionAttributes', TType.STRUCT, 40)
      self.requestCancelActivityTaskDecisionAttributes.write(oprot)
      oprot.writeFieldEnd()
    if self.cancelTimerDecisionAttributes is not None:
      oprot.writeFieldBegin('cancelTimerDecisionAttributes', TType.STRUCT, 50)
      self.cancelTimerDecisionAttributes.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.decisionType)
    value = (value * 31) ^ hash(self.scheduleActivityTaskDecisionAttributes)
    value = (value * 31) ^ hash(self.startTimerDecisionAttributes)
    value = (value * 31) ^ hash(self.completeWorkflowExecutionDecisionAttributes)
    value = (value * 31) ^ hash(self.failWorkflowExecutionDecisionAttributes)
    value = (value * 31) ^ hash(self.requestCancelActivityTaskDecisionAttributes)
    value = (value * 31) ^ hash(self.cancelTimerDecisionAttributes)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WorkflowExecutionStartedEventAttributes:
  """
  Attributes:
   - workflowType
   - taskList
   - input
   - executionStartToCloseTimeoutSeconds
   - taskStartToCloseTimeoutSeconds
   - identity
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRUCT, 'workflowType', (WorkflowType, WorkflowType.thrift_spec), None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRUCT, 'taskList', (TaskList, TaskList.thrift_spec), None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.STRING, 'input', str, None, ), # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.I32, 'executionStartToCloseTimeoutSeconds', None, None, ), # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    (50, TType.I32, 'taskStartToCloseTimeoutSeconds', None, None, ), # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    (60, TType.STRING, 'identity', unicode, None, ), # 60
  )

  def __init__(self, workflowType=None, taskList=None, input=None, executionStartToCloseTimeoutSeconds=None, taskStartToCloseTimeoutSeconds=None, identity=None,):
    self.workflowType = workflowType
    self.taskList = taskList
    self.input = input
    self.executionStartToCloseTimeoutSeconds = executionStartToCloseTimeoutSeconds
    self.taskStartToCloseTimeoutSeconds = taskStartToCloseTimeoutSeconds
    self.identity = identity

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRUCT:
          self.workflowType = WorkflowType()
          self.workflowType.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRUCT:
          self.taskList = TaskList()
          self.taskList.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRING:
          self.input = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.I32:
          self.executionStartToCloseTimeoutSeconds = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.I32:
          self.taskStartToCloseTimeoutSeconds = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 60:
        if ftype == TType.STRING:
          self.identity = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WorkflowExecutionStartedEventAttributes')
    if self.workflowType is not None:
      oprot.writeFieldBegin('workflowType', TType.STRUCT, 10)
      self.workflowType.write(oprot)
      oprot.writeFieldEnd()
    if self.taskList is not None:
      oprot.writeFieldBegin('taskList', TType.STRUCT, 20)
      self.taskList.write(oprot)
      oprot.writeFieldEnd()
    if self.input is not None:
      oprot.writeFieldBegin('input', TType.STRING, 30)
      oprot.writeString(self.input)
      oprot.writeFieldEnd()
    if self.executionStartToCloseTimeoutSeconds is not None:
      oprot.writeFieldBegin('executionStartToCloseTimeoutSeconds', TType.I32, 40)
      oprot.writeI32(self.executionStartToCloseTimeoutSeconds)
      oprot.writeFieldEnd()
    if self.taskStartToCloseTimeoutSeconds is not None:
      oprot.writeFieldBegin('taskStartToCloseTimeoutSeconds', TType.I32, 50)
      oprot.writeI32(self.taskStartToCloseTimeoutSeconds)
      oprot.writeFieldEnd()
    if self.identity is not None:
      oprot.writeFieldBegin('identity', TType.STRING, 60)
      oprot.writeString(self.identity.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.workflowType)
    value = (value * 31) ^ hash(self.taskList)
    value = (value * 31) ^ hash(self.input)
    value = (value * 31) ^ hash(self.executionStartToCloseTimeoutSeconds)
    value = (value * 31) ^ hash(self.taskStartToCloseTimeoutSeconds)
    value = (value * 31) ^ hash(self.identity)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WorkflowExecutionCompletedEventAttributes:
  """
  Attributes:
   - result
   - decisionTaskCompletedEventId
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'result', str, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'decisionTaskCompletedEventId', None, None, ), # 20
  )

  def __init__(self, result=None, decisionTaskCompletedEventId=None,):
    self.result = result
    self.decisionTaskCompletedEventId = decisionTaskCompletedEventId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.result = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.decisionTaskCompletedEventId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WorkflowExecutionCompletedEventAttributes')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.STRING, 10)
      oprot.writeString(self.result)
      oprot.writeFieldEnd()
    if self.decisionTaskCompletedEventId is not None:
      oprot.writeFieldBegin('decisionTaskCompletedEventId', TType.I64, 20)
      oprot.writeI64(self.decisionTaskCompletedEventId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.result)
    value = (value * 31) ^ hash(self.decisionTaskCompletedEventId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WorkflowExecutionFailedEventAttributes:
  """
  Attributes:
   - reason
   - details
   - decisionTaskCompletedEventId
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'reason', unicode, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRING, 'details', str, None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.I64, 'decisionTaskCompletedEventId', None, None, ), # 30
  )

  def __init__(self, reason=None, details=None, decisionTaskCompletedEventId=None,):
    self.reason = reason
    self.details = details
    self.decisionTaskCompletedEventId = decisionTaskCompletedEventId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.reason = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.details = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I64:
          self.decisionTaskCompletedEventId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WorkflowExecutionFailedEventAttributes')
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 10)
      oprot.writeString(self.reason.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.details is not None:
      oprot.writeFieldBegin('details', TType.STRING, 20)
      oprot.writeString(self.details)
      oprot.writeFieldEnd()
    if self.decisionTaskCompletedEventId is not None:
      oprot.writeFieldBegin('decisionTaskCompletedEventId', TType.I64, 30)
      oprot.writeI64(self.decisionTaskCompletedEventId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.reason)
    value = (value * 31) ^ hash(self.details)
    value = (value * 31) ^ hash(self.decisionTaskCompletedEventId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class WorkflowExecutionTimedOutEventAttributes:
  """
  Attributes:
   - timeoutType
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.I32, 'timeoutType', None, None, ), # 10
  )

  def __init__(self, timeoutType=None,):
    self.timeoutType = timeoutType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.I32:
          self.timeoutType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('WorkflowExecutionTimedOutEventAttributes')
    if self.timeoutType is not None:
      oprot.writeFieldBegin('timeoutType', TType.I32, 10)
      oprot.writeI32(self.timeoutType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.timeoutType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CompleteWorkflowExecutionFailedEventAttributes:
  """
  Attributes:
   - cause
   - decisionTaskCompletedEventId
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.I32, 'cause', None, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'decisionTaskCompletedEventId', None, None, ), # 20
  )

  def __init__(self, cause=None, decisionTaskCompletedEventId=None,):
    self.cause = cause
    self.decisionTaskCompletedEventId = decisionTaskCompletedEventId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.I32:
          self.cause = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.decisionTaskCompletedEventId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CompleteWorkflowExecutionFailedEventAttributes')
    if self.cause is not None:
      oprot.writeFieldBegin('cause', TType.I32, 10)
      oprot.writeI32(self.cause)
      oprot.writeFieldEnd()
    if self.decisionTaskCompletedEventId is not None:
      oprot.writeFieldBegin('decisionTaskCompletedEventId', TType.I64, 20)
      oprot.writeI64(self.decisionTaskCompletedEventId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cause)
    value = (value * 31) ^ hash(self.decisionTaskCompletedEventId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DecisionTaskScheduledEventAttributes:
  """
  Attributes:
   - taskList
   - startToCloseTimeoutSeconds
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRUCT, 'taskList', (TaskList, TaskList.thrift_spec), None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I32, 'startToCloseTimeoutSeconds', None, None, ), # 20
  )

  def __init__(self, taskList=None, startToCloseTimeoutSeconds=None,):
    self.taskList = taskList
    self.startToCloseTimeoutSeconds = startToCloseTimeoutSeconds

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRUCT:
          self.taskList = TaskList()
          self.taskList.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I32:
          self.startToCloseTimeoutSeconds = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DecisionTaskScheduledEventAttributes')
    if self.taskList is not None:
      oprot.writeFieldBegin('taskList', TType.STRUCT, 10)
      self.taskList.write(oprot)
      oprot.writeFieldEnd()
    if self.startToCloseTimeoutSeconds is not None:
      oprot.writeFieldBegin('startToCloseTimeoutSeconds', TType.I32, 20)
      oprot.writeI32(self.startToCloseTimeoutSeconds)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.taskList)
    value = (value * 31) ^ hash(self.startToCloseTimeoutSeconds)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DecisionTaskStartedEventAttributes:
  """
  Attributes:
   - scheduledEventId
   - identity
   - requestId
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.I64, 'scheduledEventId', None, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRING, 'identity', unicode, None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.STRING, 'requestId', unicode, None, ), # 30
  )

  def __init__(self, scheduledEventId=None, identity=None, requestId=None,):
    self.scheduledEventId = scheduledEventId
    self.identity = identity
    self.requestId = requestId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.I64:
          self.scheduledEventId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.identity = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRING:
          self.requestId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DecisionTaskStartedEventAttributes')
    if self.scheduledEventId is not None:
      oprot.writeFieldBegin('scheduledEventId', TType.I64, 10)
      oprot.writeI64(self.scheduledEventId)
      oprot.writeFieldEnd()
    if self.identity is not None:
      oprot.writeFieldBegin('identity', TType.STRING, 20)
      oprot.writeString(self.identity.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.requestId is not None:
      oprot.writeFieldBegin('requestId', TType.STRING, 30)
      oprot.writeString(self.requestId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.scheduledEventId)
    value = (value * 31) ^ hash(self.identity)
    value = (value * 31) ^ hash(self.requestId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DecisionTaskCompletedEventAttributes:
  """
  Attributes:
   - executionContext
   - scheduledEventId
   - startedEventId
   - identity
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'executionContext', str, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'scheduledEventId', None, None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.I64, 'startedEventId', None, None, ), # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.STRING, 'identity', unicode, None, ), # 40
  )

  def __init__(self, executionContext=None, scheduledEventId=None, startedEventId=None, identity=None,):
    self.executionContext = executionContext
    self.scheduledEventId = scheduledEventId
    self.startedEventId = startedEventId
    self.identity = identity

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.executionContext = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.scheduledEventId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I64:
          self.startedEventId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.STRING:
          self.identity = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DecisionTaskCompletedEventAttributes')
    if self.executionContext is not None:
      oprot.writeFieldBegin('executionContext', TType.STRING, 10)
      oprot.writeString(self.executionContext)
      oprot.writeFieldEnd()
    if self.scheduledEventId is not None:
      oprot.writeFieldBegin('scheduledEventId', TType.I64, 20)
      oprot.writeI64(self.scheduledEventId)
      oprot.writeFieldEnd()
    if self.startedEventId is not None:
      oprot.writeFieldBegin('startedEventId', TType.I64, 30)
      oprot.writeI64(self.startedEventId)
      oprot.writeFieldEnd()
    if self.identity is not None:
      oprot.writeFieldBegin('identity', TType.STRING, 40)
      oprot.writeString(self.identity.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.executionContext)
    value = (value * 31) ^ hash(self.scheduledEventId)
    value = (value * 31) ^ hash(self.startedEventId)
    value = (value * 31) ^ hash(self.identity)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class DecisionTaskTimedOutEventAttributes:
  """
  Attributes:
   - scheduledEventId
   - startedEventId
   - timeoutType
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.I64, 'scheduledEventId', None, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'startedEventId', None, None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.I32, 'timeoutType', None, None, ), # 30
  )

  def __init__(self, scheduledEventId=None, startedEventId=None, timeoutType=None,):
    self.scheduledEventId = scheduledEventId
    self.startedEventId = startedEventId
    self.timeoutType = timeoutType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.I64:
          self.scheduledEventId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.startedEventId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I32:
          self.timeoutType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('DecisionTaskTimedOutEventAttributes')
    if self.scheduledEventId is not None:
      oprot.writeFieldBegin('scheduledEventId', TType.I64, 10)
      oprot.writeI64(self.scheduledEventId)
      oprot.writeFieldEnd()
    if self.startedEventId is not None:
      oprot.writeFieldBegin('startedEventId', TType.I64, 20)
      oprot.writeI64(self.startedEventId)
      oprot.writeFieldEnd()
    if self.timeoutType is not None:
      oprot.writeFieldBegin('timeoutType', TType.I32, 30)
      oprot.writeI32(self.timeoutType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.scheduledEventId)
    value = (value * 31) ^ hash(self.startedEventId)
    value = (value * 31) ^ hash(self.timeoutType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ActivityTaskScheduledEventAttributes:
  """
  Attributes:
   - activityId
   - activityType
   - taskList
   - input
   - scheduleToCloseTimeoutSeconds
   - scheduleToStartTimeoutSeconds
   - startToCloseTimeoutSeconds
   - heartbeatTimeoutSeconds
   - decisionTaskCompletedEventId
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'activityId', unicode, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRUCT, 'activityType', (ActivityType, ActivityType.thrift_spec), None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.STRUCT, 'taskList', (TaskList, TaskList.thrift_spec), None, ), # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.STRING, 'input', str, None, ), # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    (45, TType.I32, 'scheduleToCloseTimeoutSeconds', None, None, ), # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    (50, TType.I32, 'scheduleToStartTimeoutSeconds', None, None, ), # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    (55, TType.I32, 'startToCloseTimeoutSeconds', None, None, ), # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    (60, TType.I32, 'heartbeatTimeoutSeconds', None, None, ), # 60
    None, # 61
    None, # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    None, # 70
    None, # 71
    None, # 72
    None, # 73
    None, # 74
    None, # 75
    None, # 76
    None, # 77
    None, # 78
    None, # 79
    None, # 80
    None, # 81
    None, # 82
    None, # 83
    None, # 84
    None, # 85
    None, # 86
    None, # 87
    None, # 88
    None, # 89
    (90, TType.I64, 'decisionTaskCompletedEventId', None, None, ), # 90
  )

  def __init__(self, activityId=None, activityType=None, taskList=None, input=None, scheduleToCloseTimeoutSeconds=None, scheduleToStartTimeoutSeconds=None, startToCloseTimeoutSeconds=None, heartbeatTimeoutSeconds=None, decisionTaskCompletedEventId=None,):
    self.activityId = activityId
    self.activityType = activityType
    self.taskList = taskList
    self.input = input
    self.scheduleToCloseTimeoutSeconds = scheduleToCloseTimeoutSeconds
    self.scheduleToStartTimeoutSeconds = scheduleToStartTimeoutSeconds
    self.startToCloseTimeoutSeconds = startToCloseTimeoutSeconds
    self.heartbeatTimeoutSeconds = heartbeatTimeoutSeconds
    self.decisionTaskCompletedEventId = decisionTaskCompletedEventId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.activityId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRUCT:
          self.activityType = ActivityType()
          self.activityType.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRUCT:
          self.taskList = TaskList()
          self.taskList.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.STRING:
          self.input = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 45:
        if ftype == TType.I32:
          self.scheduleToCloseTimeoutSeconds = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.I32:
          self.scheduleToStartTimeoutSeconds = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 55:
        if ftype == TType.I32:
          self.startToCloseTimeoutSeconds = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 60:
        if ftype == TType.I32:
          self.heartbeatTimeoutSeconds = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 90:
        if ftype == TType.I64:
          self.decisionTaskCompletedEventId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ActivityTaskScheduledEventAttributes')
    if self.activityId is not None:
      oprot.writeFieldBegin('activityId', TType.STRING, 10)
      oprot.writeString(self.activityId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.activityType is not None:
      oprot.writeFieldBegin('activityType', TType.STRUCT, 20)
      self.activityType.write(oprot)
      oprot.writeFieldEnd()
    if self.taskList is not None:
      oprot.writeFieldBegin('taskList', TType.STRUCT, 30)
      self.taskList.write(oprot)
      oprot.writeFieldEnd()
    if self.input is not None:
      oprot.writeFieldBegin('input', TType.STRING, 40)
      oprot.writeString(self.input)
      oprot.writeFieldEnd()
    if self.scheduleToCloseTimeoutSeconds is not None:
      oprot.writeFieldBegin('scheduleToCloseTimeoutSeconds', TType.I32, 45)
      oprot.writeI32(self.scheduleToCloseTimeoutSeconds)
      oprot.writeFieldEnd()
    if self.scheduleToStartTimeoutSeconds is not None:
      oprot.writeFieldBegin('scheduleToStartTimeoutSeconds', TType.I32, 50)
      oprot.writeI32(self.scheduleToStartTimeoutSeconds)
      oprot.writeFieldEnd()
    if self.startToCloseTimeoutSeconds is not None:
      oprot.writeFieldBegin('startToCloseTimeoutSeconds', TType.I32, 55)
      oprot.writeI32(self.startToCloseTimeoutSeconds)
      oprot.writeFieldEnd()
    if self.heartbeatTimeoutSeconds is not None:
      oprot.writeFieldBegin('heartbeatTimeoutSeconds', TType.I32, 60)
      oprot.writeI32(self.heartbeatTimeoutSeconds)
      oprot.writeFieldEnd()
    if self.decisionTaskCompletedEventId is not None:
      oprot.writeFieldBegin('decisionTaskCompletedEventId', TType.I64, 90)
      oprot.writeI64(self.decisionTaskCompletedEventId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.activityId)
    value = (value * 31) ^ hash(self.activityType)
    value = (value * 31) ^ hash(self.taskList)
    value = (value * 31) ^ hash(self.input)
    value = (value * 31) ^ hash(self.scheduleToCloseTimeoutSeconds)
    value = (value * 31) ^ hash(self.scheduleToStartTimeoutSeconds)
    value = (value * 31) ^ hash(self.startToCloseTimeoutSeconds)
    value = (value * 31) ^ hash(self.heartbeatTimeoutSeconds)
    value = (value * 31) ^ hash(self.decisionTaskCompletedEventId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ActivityTaskStartedEventAttributes:
  """
  Attributes:
   - scheduledEventId
   - identity
   - requestId
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.I64, 'scheduledEventId', None, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRING, 'identity', unicode, None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.STRING, 'requestId', unicode, None, ), # 30
  )

  def __init__(self, scheduledEventId=None, identity=None, requestId=None,):
    self.scheduledEventId = scheduledEventId
    self.identity = identity
    self.requestId = requestId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.I64:
          self.scheduledEventId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.identity = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRING:
          self.requestId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ActivityTaskStartedEventAttributes')
    if self.scheduledEventId is not None:
      oprot.writeFieldBegin('scheduledEventId', TType.I64, 10)
      oprot.writeI64(self.scheduledEventId)
      oprot.writeFieldEnd()
    if self.identity is not None:
      oprot.writeFieldBegin('identity', TType.STRING, 20)
      oprot.writeString(self.identity.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.requestId is not None:
      oprot.writeFieldBegin('requestId', TType.STRING, 30)
      oprot.writeString(self.requestId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.scheduledEventId)
    value = (value * 31) ^ hash(self.identity)
    value = (value * 31) ^ hash(self.requestId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ActivityTaskCompletedEventAttributes:
  """
  Attributes:
   - result
   - scheduledEventId
   - startedEventId
   - identity
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'result', str, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'scheduledEventId', None, None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.I64, 'startedEventId', None, None, ), # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.STRING, 'identity', unicode, None, ), # 40
  )

  def __init__(self, result=None, scheduledEventId=None, startedEventId=None, identity=None,):
    self.result = result
    self.scheduledEventId = scheduledEventId
    self.startedEventId = startedEventId
    self.identity = identity

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.result = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.scheduledEventId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I64:
          self.startedEventId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.STRING:
          self.identity = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ActivityTaskCompletedEventAttributes')
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.STRING, 10)
      oprot.writeString(self.result)
      oprot.writeFieldEnd()
    if self.scheduledEventId is not None:
      oprot.writeFieldBegin('scheduledEventId', TType.I64, 20)
      oprot.writeI64(self.scheduledEventId)
      oprot.writeFieldEnd()
    if self.startedEventId is not None:
      oprot.writeFieldBegin('startedEventId', TType.I64, 30)
      oprot.writeI64(self.startedEventId)
      oprot.writeFieldEnd()
    if self.identity is not None:
      oprot.writeFieldBegin('identity', TType.STRING, 40)
      oprot.writeString(self.identity.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.result)
    value = (value * 31) ^ hash(self.scheduledEventId)
    value = (value * 31) ^ hash(self.startedEventId)
    value = (value * 31) ^ hash(self.identity)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ActivityTaskFailedEventAttributes:
  """
  Attributes:
   - reason
   - details
   - scheduledEventId
   - startedEventId
   - identity
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'reason', unicode, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRING, 'details', str, None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.I64, 'scheduledEventId', None, None, ), # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.I64, 'startedEventId', None, None, ), # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    (50, TType.STRING, 'identity', unicode, None, ), # 50
  )

  def __init__(self, reason=None, details=None, scheduledEventId=None, startedEventId=None, identity=None,):
    self.reason = reason
    self.details = details
    self.scheduledEventId = scheduledEventId
    self.startedEventId = startedEventId
    self.identity = identity

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.reason = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.details = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I64:
          self.scheduledEventId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.I64:
          self.startedEventId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.STRING:
          self.identity = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ActivityTaskFailedEventAttributes')
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 10)
      oprot.writeString(self.reason.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.details is not None:
      oprot.writeFieldBegin('details', TType.STRING, 20)
      oprot.writeString(self.details)
      oprot.writeFieldEnd()
    if self.scheduledEventId is not None:
      oprot.writeFieldBegin('scheduledEventId', TType.I64, 30)
      oprot.writeI64(self.scheduledEventId)
      oprot.writeFieldEnd()
    if self.startedEventId is not None:
      oprot.writeFieldBegin('startedEventId', TType.I64, 40)
      oprot.writeI64(self.startedEventId)
      oprot.writeFieldEnd()
    if self.identity is not None:
      oprot.writeFieldBegin('identity', TType.STRING, 50)
      oprot.writeString(self.identity.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.reason)
    value = (value * 31) ^ hash(self.details)
    value = (value * 31) ^ hash(self.scheduledEventId)
    value = (value * 31) ^ hash(self.startedEventId)
    value = (value * 31) ^ hash(self.identity)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ActivityTaskTimedOutEventAttributes:
  """
  Attributes:
   - details
   - scheduledEventId
   - startedEventId
   - timeoutType
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    (5, TType.STRING, 'details', str, None, ), # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.I64, 'scheduledEventId', None, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'startedEventId', None, None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.I32, 'timeoutType', None, None, ), # 30
  )

  def __init__(self, details=None, scheduledEventId=None, startedEventId=None, timeoutType=None,):
    self.details = details
    self.scheduledEventId = scheduledEventId
    self.startedEventId = startedEventId
    self.timeoutType = timeoutType

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 5:
        if ftype == TType.STRING:
          self.details = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 10:
        if ftype == TType.I64:
          self.scheduledEventId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.startedEventId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I32:
          self.timeoutType = iprot.readI32();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ActivityTaskTimedOutEventAttributes')
    if self.details is not None:
      oprot.writeFieldBegin('details', TType.STRING, 5)
      oprot.writeString(self.details)
      oprot.writeFieldEnd()
    if self.scheduledEventId is not None:
      oprot.writeFieldBegin('scheduledEventId', TType.I64, 10)
      oprot.writeI64(self.scheduledEventId)
      oprot.writeFieldEnd()
    if self.startedEventId is not None:
      oprot.writeFieldBegin('startedEventId', TType.I64, 20)
      oprot.writeI64(self.startedEventId)
      oprot.writeFieldEnd()
    if self.timeoutType is not None:
      oprot.writeFieldBegin('timeoutType', TType.I32, 30)
      oprot.writeI32(self.timeoutType)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.details)
    value = (value * 31) ^ hash(self.scheduledEventId)
    value = (value * 31) ^ hash(self.startedEventId)
    value = (value * 31) ^ hash(self.timeoutType)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ActivityTaskCancelRequestedEventAttributes:
  """
  Attributes:
   - activityId
   - decisionTaskCompletedEventId
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'activityId', unicode, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'decisionTaskCompletedEventId', None, None, ), # 20
  )

  def __init__(self, activityId=None, decisionTaskCompletedEventId=None,):
    self.activityId = activityId
    self.decisionTaskCompletedEventId = decisionTaskCompletedEventId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.activityId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.decisionTaskCompletedEventId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ActivityTaskCancelRequestedEventAttributes')
    if self.activityId is not None:
      oprot.writeFieldBegin('activityId', TType.STRING, 10)
      oprot.writeString(self.activityId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.decisionTaskCompletedEventId is not None:
      oprot.writeFieldBegin('decisionTaskCompletedEventId', TType.I64, 20)
      oprot.writeI64(self.decisionTaskCompletedEventId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.activityId)
    value = (value * 31) ^ hash(self.decisionTaskCompletedEventId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RequestCancelActivityTaskFailedEventAttributes:
  """
  Attributes:
   - activityId
   - cause
   - decisionTaskCompletedEventId
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'activityId', unicode, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRING, 'cause', unicode, None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.I64, 'decisionTaskCompletedEventId', None, None, ), # 30
  )

  def __init__(self, activityId=None, cause=None, decisionTaskCompletedEventId=None,):
    self.activityId = activityId
    self.cause = cause
    self.decisionTaskCompletedEventId = decisionTaskCompletedEventId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.activityId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.cause = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I64:
          self.decisionTaskCompletedEventId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RequestCancelActivityTaskFailedEventAttributes')
    if self.activityId is not None:
      oprot.writeFieldBegin('activityId', TType.STRING, 10)
      oprot.writeString(self.activityId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.cause is not None:
      oprot.writeFieldBegin('cause', TType.STRING, 20)
      oprot.writeString(self.cause.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.decisionTaskCompletedEventId is not None:
      oprot.writeFieldBegin('decisionTaskCompletedEventId', TType.I64, 30)
      oprot.writeI64(self.decisionTaskCompletedEventId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.activityId)
    value = (value * 31) ^ hash(self.cause)
    value = (value * 31) ^ hash(self.decisionTaskCompletedEventId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class ActivityTaskCanceledEventAttributes:
  """
  Attributes:
   - details
   - latestCancelRequestedEventId
   - scheduledEventId
   - startedEventId
   - identity
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'details', str, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'latestCancelRequestedEventId', None, None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.I64, 'scheduledEventId', None, None, ), # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.I64, 'startedEventId', None, None, ), # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    (50, TType.STRING, 'identity', unicode, None, ), # 50
  )

  def __init__(self, details=None, latestCancelRequestedEventId=None, scheduledEventId=None, startedEventId=None, identity=None,):
    self.details = details
    self.latestCancelRequestedEventId = latestCancelRequestedEventId
    self.scheduledEventId = scheduledEventId
    self.startedEventId = startedEventId
    self.identity = identity

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.details = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.latestCancelRequestedEventId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I64:
          self.scheduledEventId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.I64:
          self.startedEventId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.STRING:
          self.identity = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('ActivityTaskCanceledEventAttributes')
    if self.details is not None:
      oprot.writeFieldBegin('details', TType.STRING, 10)
      oprot.writeString(self.details)
      oprot.writeFieldEnd()
    if self.latestCancelRequestedEventId is not None:
      oprot.writeFieldBegin('latestCancelRequestedEventId', TType.I64, 20)
      oprot.writeI64(self.latestCancelRequestedEventId)
      oprot.writeFieldEnd()
    if self.scheduledEventId is not None:
      oprot.writeFieldBegin('scheduledEventId', TType.I64, 30)
      oprot.writeI64(self.scheduledEventId)
      oprot.writeFieldEnd()
    if self.startedEventId is not None:
      oprot.writeFieldBegin('startedEventId', TType.I64, 40)
      oprot.writeI64(self.startedEventId)
      oprot.writeFieldEnd()
    if self.identity is not None:
      oprot.writeFieldBegin('identity', TType.STRING, 50)
      oprot.writeString(self.identity.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.details)
    value = (value * 31) ^ hash(self.latestCancelRequestedEventId)
    value = (value * 31) ^ hash(self.scheduledEventId)
    value = (value * 31) ^ hash(self.startedEventId)
    value = (value * 31) ^ hash(self.identity)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TimerStartedEventAttributes:
  """
  Attributes:
   - timerId
   - startToFireTimeoutSeconds
   - decisionTaskCompletedEventId
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'timerId', unicode, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'startToFireTimeoutSeconds', None, None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.I64, 'decisionTaskCompletedEventId', None, None, ), # 30
  )

  def __init__(self, timerId=None, startToFireTimeoutSeconds=None, decisionTaskCompletedEventId=None,):
    self.timerId = timerId
    self.startToFireTimeoutSeconds = startToFireTimeoutSeconds
    self.decisionTaskCompletedEventId = decisionTaskCompletedEventId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.timerId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.startToFireTimeoutSeconds = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I64:
          self.decisionTaskCompletedEventId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TimerStartedEventAttributes')
    if self.timerId is not None:
      oprot.writeFieldBegin('timerId', TType.STRING, 10)
      oprot.writeString(self.timerId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.startToFireTimeoutSeconds is not None:
      oprot.writeFieldBegin('startToFireTimeoutSeconds', TType.I64, 20)
      oprot.writeI64(self.startToFireTimeoutSeconds)
      oprot.writeFieldEnd()
    if self.decisionTaskCompletedEventId is not None:
      oprot.writeFieldBegin('decisionTaskCompletedEventId', TType.I64, 30)
      oprot.writeI64(self.decisionTaskCompletedEventId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.timerId)
    value = (value * 31) ^ hash(self.startToFireTimeoutSeconds)
    value = (value * 31) ^ hash(self.decisionTaskCompletedEventId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TimerFiredEventAttributes:
  """
  Attributes:
   - timerId
   - startedEventId
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'timerId', unicode, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'startedEventId', None, None, ), # 20
  )

  def __init__(self, timerId=None, startedEventId=None,):
    self.timerId = timerId
    self.startedEventId = startedEventId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.timerId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.startedEventId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TimerFiredEventAttributes')
    if self.timerId is not None:
      oprot.writeFieldBegin('timerId', TType.STRING, 10)
      oprot.writeString(self.timerId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.startedEventId is not None:
      oprot.writeFieldBegin('startedEventId', TType.I64, 20)
      oprot.writeI64(self.startedEventId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.timerId)
    value = (value * 31) ^ hash(self.startedEventId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class TimerCanceledEventAttributes:
  """
  Attributes:
   - timerId
   - startedEventId
   - decisionTaskCompletedEventId
   - identity
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'timerId', unicode, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'startedEventId', None, None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.I64, 'decisionTaskCompletedEventId', None, None, ), # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.STRING, 'identity', unicode, None, ), # 40
  )

  def __init__(self, timerId=None, startedEventId=None, decisionTaskCompletedEventId=None, identity=None,):
    self.timerId = timerId
    self.startedEventId = startedEventId
    self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
    self.identity = identity

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.timerId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.startedEventId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I64:
          self.decisionTaskCompletedEventId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.STRING:
          self.identity = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('TimerCanceledEventAttributes')
    if self.timerId is not None:
      oprot.writeFieldBegin('timerId', TType.STRING, 10)
      oprot.writeString(self.timerId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.startedEventId is not None:
      oprot.writeFieldBegin('startedEventId', TType.I64, 20)
      oprot.writeI64(self.startedEventId)
      oprot.writeFieldEnd()
    if self.decisionTaskCompletedEventId is not None:
      oprot.writeFieldBegin('decisionTaskCompletedEventId', TType.I64, 30)
      oprot.writeI64(self.decisionTaskCompletedEventId)
      oprot.writeFieldEnd()
    if self.identity is not None:
      oprot.writeFieldBegin('identity', TType.STRING, 40)
      oprot.writeString(self.identity.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.timerId)
    value = (value * 31) ^ hash(self.startedEventId)
    value = (value * 31) ^ hash(self.decisionTaskCompletedEventId)
    value = (value * 31) ^ hash(self.identity)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class CancelTimerFailedEventAttributes:
  """
  Attributes:
   - timerId
   - cause
   - decisionTaskCompletedEventId
   - identity
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'timerId', unicode, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRING, 'cause', unicode, None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.I64, 'decisionTaskCompletedEventId', None, None, ), # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.STRING, 'identity', unicode, None, ), # 40
  )

  def __init__(self, timerId=None, cause=None, decisionTaskCompletedEventId=None, identity=None,):
    self.timerId = timerId
    self.cause = cause
    self.decisionTaskCompletedEventId = decisionTaskCompletedEventId
    self.identity = identity

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.timerId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.cause = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I64:
          self.decisionTaskCompletedEventId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.STRING:
          self.identity = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('CancelTimerFailedEventAttributes')
    if self.timerId is not None:
      oprot.writeFieldBegin('timerId', TType.STRING, 10)
      oprot.writeString(self.timerId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.cause is not None:
      oprot.writeFieldBegin('cause', TType.STRING, 20)
      oprot.writeString(self.cause.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.decisionTaskCompletedEventId is not None:
      oprot.writeFieldBegin('decisionTaskCompletedEventId', TType.I64, 30)
      oprot.writeI64(self.decisionTaskCompletedEventId)
      oprot.writeFieldEnd()
    if self.identity is not None:
      oprot.writeFieldBegin('identity', TType.STRING, 40)
      oprot.writeString(self.identity.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.timerId)
    value = (value * 31) ^ hash(self.cause)
    value = (value * 31) ^ hash(self.decisionTaskCompletedEventId)
    value = (value * 31) ^ hash(self.identity)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class HistoryEvent:
  """
  Attributes:
   - eventId
   - timestamp
   - eventType
   - workflowExecutionStartedEventAttributes
   - workflowExecutionCompletedEventAttributes
   - workflowExecutionFailedEventAttributes
   - workflowExecutionTimedOutEventAttributes
   - decisionTaskScheduledEventAttributes
   - decisionTaskStartedEventAttributes
   - decisionTaskTimedOutEventAttributes
   - decisionTaskCompletedEventAttributes
   - activityTaskScheduledEventAttributes
   - activityTaskStartedEventAttributes
   - activityTaskCompletedEventAttributes
   - activityTaskFailedEventAttributes
   - activityTaskTimedOutEventAttributes
   - timerStartedEventAttributes
   - timerFiredEventAttributes
   - completeWorkflowExecutionFailedEventAttributes
   - activityTaskCancelRequestedEventAttributes
   - requestCancelActivityTaskFailedEventAttributes
   - activityTaskCanceledEventAttributes
   - timerCanceledEventAttributes
   - cancelTimerFailedEventAttributes
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.I64, 'eventId', None, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.I64, 'timestamp', None, None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.I32, 'eventType', None, None, ), # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    (35, TType.STRUCT, 'workflowExecutionStartedEventAttributes', (WorkflowExecutionStartedEventAttributes, WorkflowExecutionStartedEventAttributes.thrift_spec), None, ), # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.STRUCT, 'workflowExecutionCompletedEventAttributes', (WorkflowExecutionCompletedEventAttributes, WorkflowExecutionCompletedEventAttributes.thrift_spec), None, ), # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    (45, TType.STRUCT, 'workflowExecutionFailedEventAttributes', (WorkflowExecutionFailedEventAttributes, WorkflowExecutionFailedEventAttributes.thrift_spec), None, ), # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    (50, TType.STRUCT, 'workflowExecutionTimedOutEventAttributes', (WorkflowExecutionTimedOutEventAttributes, WorkflowExecutionTimedOutEventAttributes.thrift_spec), None, ), # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    (55, TType.STRUCT, 'decisionTaskScheduledEventAttributes', (DecisionTaskScheduledEventAttributes, DecisionTaskScheduledEventAttributes.thrift_spec), None, ), # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    (60, TType.STRUCT, 'decisionTaskStartedEventAttributes', (DecisionTaskStartedEventAttributes, DecisionTaskStartedEventAttributes.thrift_spec), None, ), # 60
    None, # 61
    None, # 62
    (63, TType.STRUCT, 'decisionTaskTimedOutEventAttributes', (DecisionTaskTimedOutEventAttributes, DecisionTaskTimedOutEventAttributes.thrift_spec), None, ), # 63
    None, # 64
    (65, TType.STRUCT, 'decisionTaskCompletedEventAttributes', (DecisionTaskCompletedEventAttributes, DecisionTaskCompletedEventAttributes.thrift_spec), None, ), # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    (70, TType.STRUCT, 'activityTaskScheduledEventAttributes', (ActivityTaskScheduledEventAttributes, ActivityTaskScheduledEventAttributes.thrift_spec), None, ), # 70
    None, # 71
    None, # 72
    None, # 73
    None, # 74
    (75, TType.STRUCT, 'activityTaskStartedEventAttributes', (ActivityTaskStartedEventAttributes, ActivityTaskStartedEventAttributes.thrift_spec), None, ), # 75
    None, # 76
    None, # 77
    None, # 78
    None, # 79
    (80, TType.STRUCT, 'activityTaskCompletedEventAttributes', (ActivityTaskCompletedEventAttributes, ActivityTaskCompletedEventAttributes.thrift_spec), None, ), # 80
    None, # 81
    None, # 82
    None, # 83
    None, # 84
    (85, TType.STRUCT, 'activityTaskFailedEventAttributes', (ActivityTaskFailedEventAttributes, ActivityTaskFailedEventAttributes.thrift_spec), None, ), # 85
    None, # 86
    None, # 87
    None, # 88
    None, # 89
    (90, TType.STRUCT, 'activityTaskTimedOutEventAttributes', (ActivityTaskTimedOutEventAttributes, ActivityTaskTimedOutEventAttributes.thrift_spec), None, ), # 90
    None, # 91
    None, # 92
    None, # 93
    None, # 94
    (95, TType.STRUCT, 'timerStartedEventAttributes', (TimerStartedEventAttributes, TimerStartedEventAttributes.thrift_spec), None, ), # 95
    None, # 96
    None, # 97
    None, # 98
    None, # 99
    (100, TType.STRUCT, 'timerFiredEventAttributes', (TimerFiredEventAttributes, TimerFiredEventAttributes.thrift_spec), None, ), # 100
    None, # 101
    None, # 102
    None, # 103
    None, # 104
    (105, TType.STRUCT, 'completeWorkflowExecutionFailedEventAttributes', (CompleteWorkflowExecutionFailedEventAttributes, CompleteWorkflowExecutionFailedEventAttributes.thrift_spec), None, ), # 105
    None, # 106
    None, # 107
    None, # 108
    None, # 109
    (110, TType.STRUCT, 'activityTaskCancelRequestedEventAttributes', (ActivityTaskCancelRequestedEventAttributes, ActivityTaskCancelRequestedEventAttributes.thrift_spec), None, ), # 110
    None, # 111
    None, # 112
    None, # 113
    None, # 114
    None, # 115
    None, # 116
    None, # 117
    None, # 118
    None, # 119
    (120, TType.STRUCT, 'requestCancelActivityTaskFailedEventAttributes', (RequestCancelActivityTaskFailedEventAttributes, RequestCancelActivityTaskFailedEventAttributes.thrift_spec), None, ), # 120
    None, # 121
    None, # 122
    None, # 123
    None, # 124
    None, # 125
    None, # 126
    None, # 127
    None, # 128
    None, # 129
    (130, TType.STRUCT, 'activityTaskCanceledEventAttributes', (ActivityTaskCanceledEventAttributes, ActivityTaskCanceledEventAttributes.thrift_spec), None, ), # 130
    None, # 131
    None, # 132
    None, # 133
    None, # 134
    None, # 135
    None, # 136
    None, # 137
    None, # 138
    None, # 139
    (140, TType.STRUCT, 'timerCanceledEventAttributes', (TimerCanceledEventAttributes, TimerCanceledEventAttributes.thrift_spec), None, ), # 140
    None, # 141
    None, # 142
    None, # 143
    None, # 144
    None, # 145
    None, # 146
    None, # 147
    None, # 148
    None, # 149
    (150, TType.STRUCT, 'cancelTimerFailedEventAttributes', (CancelTimerFailedEventAttributes, CancelTimerFailedEventAttributes.thrift_spec), None, ), # 150
  )

  def __init__(self, eventId=None, timestamp=None, eventType=None, workflowExecutionStartedEventAttributes=None, workflowExecutionCompletedEventAttributes=None, workflowExecutionFailedEventAttributes=None, workflowExecutionTimedOutEventAttributes=None, decisionTaskScheduledEventAttributes=None, decisionTaskStartedEventAttributes=None, decisionTaskTimedOutEventAttributes=None, decisionTaskCompletedEventAttributes=None, activityTaskScheduledEventAttributes=None, activityTaskStartedEventAttributes=None, activityTaskCompletedEventAttributes=None, activityTaskFailedEventAttributes=None, activityTaskTimedOutEventAttributes=None, timerStartedEventAttributes=None, timerFiredEventAttributes=None, completeWorkflowExecutionFailedEventAttributes=None, activityTaskCancelRequestedEventAttributes=None, requestCancelActivityTaskFailedEventAttributes=None, activityTaskCanceledEventAttributes=None, timerCanceledEventAttributes=None, cancelTimerFailedEventAttributes=None,):
    self.eventId = eventId
    self.timestamp = timestamp
    self.eventType = eventType
    self.workflowExecutionStartedEventAttributes = workflowExecutionStartedEventAttributes
    self.workflowExecutionCompletedEventAttributes = workflowExecutionCompletedEventAttributes
    self.workflowExecutionFailedEventAttributes = workflowExecutionFailedEventAttributes
    self.workflowExecutionTimedOutEventAttributes = workflowExecutionTimedOutEventAttributes
    self.decisionTaskScheduledEventAttributes = decisionTaskScheduledEventAttributes
    self.decisionTaskStartedEventAttributes = decisionTaskStartedEventAttributes
    self.decisionTaskTimedOutEventAttributes = decisionTaskTimedOutEventAttributes
    self.decisionTaskCompletedEventAttributes = decisionTaskCompletedEventAttributes
    self.activityTaskScheduledEventAttributes = activityTaskScheduledEventAttributes
    self.activityTaskStartedEventAttributes = activityTaskStartedEventAttributes
    self.activityTaskCompletedEventAttributes = activityTaskCompletedEventAttributes
    self.activityTaskFailedEventAttributes = activityTaskFailedEventAttributes
    self.activityTaskTimedOutEventAttributes = activityTaskTimedOutEventAttributes
    self.timerStartedEventAttributes = timerStartedEventAttributes
    self.timerFiredEventAttributes = timerFiredEventAttributes
    self.completeWorkflowExecutionFailedEventAttributes = completeWorkflowExecutionFailedEventAttributes
    self.activityTaskCancelRequestedEventAttributes = activityTaskCancelRequestedEventAttributes
    self.requestCancelActivityTaskFailedEventAttributes = requestCancelActivityTaskFailedEventAttributes
    self.activityTaskCanceledEventAttributes = activityTaskCanceledEventAttributes
    self.timerCanceledEventAttributes = timerCanceledEventAttributes
    self.cancelTimerFailedEventAttributes = cancelTimerFailedEventAttributes

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.I64:
          self.eventId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.I64:
          self.timestamp = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.I32:
          self.eventType = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 35:
        if ftype == TType.STRUCT:
          self.workflowExecutionStartedEventAttributes = WorkflowExecutionStartedEventAttributes()
          self.workflowExecutionStartedEventAttributes.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.STRUCT:
          self.workflowExecutionCompletedEventAttributes = WorkflowExecutionCompletedEventAttributes()
          self.workflowExecutionCompletedEventAttributes.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 45:
        if ftype == TType.STRUCT:
          self.workflowExecutionFailedEventAttributes = WorkflowExecutionFailedEventAttributes()
          self.workflowExecutionFailedEventAttributes.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.STRUCT:
          self.workflowExecutionTimedOutEventAttributes = WorkflowExecutionTimedOutEventAttributes()
          self.workflowExecutionTimedOutEventAttributes.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 55:
        if ftype == TType.STRUCT:
          self.decisionTaskScheduledEventAttributes = DecisionTaskScheduledEventAttributes()
          self.decisionTaskScheduledEventAttributes.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 60:
        if ftype == TType.STRUCT:
          self.decisionTaskStartedEventAttributes = DecisionTaskStartedEventAttributes()
          self.decisionTaskStartedEventAttributes.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 63:
        if ftype == TType.STRUCT:
          self.decisionTaskTimedOutEventAttributes = DecisionTaskTimedOutEventAttributes()
          self.decisionTaskTimedOutEventAttributes.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 65:
        if ftype == TType.STRUCT:
          self.decisionTaskCompletedEventAttributes = DecisionTaskCompletedEventAttributes()
          self.decisionTaskCompletedEventAttributes.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 70:
        if ftype == TType.STRUCT:
          self.activityTaskScheduledEventAttributes = ActivityTaskScheduledEventAttributes()
          self.activityTaskScheduledEventAttributes.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 75:
        if ftype == TType.STRUCT:
          self.activityTaskStartedEventAttributes = ActivityTaskStartedEventAttributes()
          self.activityTaskStartedEventAttributes.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 80:
        if ftype == TType.STRUCT:
          self.activityTaskCompletedEventAttributes = ActivityTaskCompletedEventAttributes()
          self.activityTaskCompletedEventAttributes.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 85:
        if ftype == TType.STRUCT:
          self.activityTaskFailedEventAttributes = ActivityTaskFailedEventAttributes()
          self.activityTaskFailedEventAttributes.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 90:
        if ftype == TType.STRUCT:
          self.activityTaskTimedOutEventAttributes = ActivityTaskTimedOutEventAttributes()
          self.activityTaskTimedOutEventAttributes.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 95:
        if ftype == TType.STRUCT:
          self.timerStartedEventAttributes = TimerStartedEventAttributes()
          self.timerStartedEventAttributes.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 100:
        if ftype == TType.STRUCT:
          self.timerFiredEventAttributes = TimerFiredEventAttributes()
          self.timerFiredEventAttributes.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 105:
        if ftype == TType.STRUCT:
          self.completeWorkflowExecutionFailedEventAttributes = CompleteWorkflowExecutionFailedEventAttributes()
          self.completeWorkflowExecutionFailedEventAttributes.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 110:
        if ftype == TType.STRUCT:
          self.activityTaskCancelRequestedEventAttributes = ActivityTaskCancelRequestedEventAttributes()
          self.activityTaskCancelRequestedEventAttributes.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 120:
        if ftype == TType.STRUCT:
          self.requestCancelActivityTaskFailedEventAttributes = RequestCancelActivityTaskFailedEventAttributes()
          self.requestCancelActivityTaskFailedEventAttributes.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 130:
        if ftype == TType.STRUCT:
          self.activityTaskCanceledEventAttributes = ActivityTaskCanceledEventAttributes()
          self.activityTaskCanceledEventAttributes.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 140:
        if ftype == TType.STRUCT:
          self.timerCanceledEventAttributes = TimerCanceledEventAttributes()
          self.timerCanceledEventAttributes.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 150:
        if ftype == TType.STRUCT:
          self.cancelTimerFailedEventAttributes = CancelTimerFailedEventAttributes()
          self.cancelTimerFailedEventAttributes.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('HistoryEvent')
    if self.eventId is not None:
      oprot.writeFieldBegin('eventId', TType.I64, 10)
      oprot.writeI64(self.eventId)
      oprot.writeFieldEnd()
    if self.timestamp is not None:
      oprot.writeFieldBegin('timestamp', TType.I64, 20)
      oprot.writeI64(self.timestamp)
      oprot.writeFieldEnd()
    if self.eventType is not None:
      oprot.writeFieldBegin('eventType', TType.I32, 30)
      oprot.writeI32(self.eventType)
      oprot.writeFieldEnd()
    if self.workflowExecutionStartedEventAttributes is not None:
      oprot.writeFieldBegin('workflowExecutionStartedEventAttributes', TType.STRUCT, 35)
      self.workflowExecutionStartedEventAttributes.write(oprot)
      oprot.writeFieldEnd()
    if self.workflowExecutionCompletedEventAttributes is not None:
      oprot.writeFieldBegin('workflowExecutionCompletedEventAttributes', TType.STRUCT, 40)
      self.workflowExecutionCompletedEventAttributes.write(oprot)
      oprot.writeFieldEnd()
    if self.workflowExecutionFailedEventAttributes is not None:
      oprot.writeFieldBegin('workflowExecutionFailedEventAttributes', TType.STRUCT, 45)
      self.workflowExecutionFailedEventAttributes.write(oprot)
      oprot.writeFieldEnd()
    if self.workflowExecutionTimedOutEventAttributes is not None:
      oprot.writeFieldBegin('workflowExecutionTimedOutEventAttributes', TType.STRUCT, 50)
      self.workflowExecutionTimedOutEventAttributes.write(oprot)
      oprot.writeFieldEnd()
    if self.decisionTaskScheduledEventAttributes is not None:
      oprot.writeFieldBegin('decisionTaskScheduledEventAttributes', TType.STRUCT, 55)
      self.decisionTaskScheduledEventAttributes.write(oprot)
      oprot.writeFieldEnd()
    if self.decisionTaskStartedEventAttributes is not None:
      oprot.writeFieldBegin('decisionTaskStartedEventAttributes', TType.STRUCT, 60)
      self.decisionTaskStartedEventAttributes.write(oprot)
      oprot.writeFieldEnd()
    if self.decisionTaskTimedOutEventAttributes is not None:
      oprot.writeFieldBegin('decisionTaskTimedOutEventAttributes', TType.STRUCT, 63)
      self.decisionTaskTimedOutEventAttributes.write(oprot)
      oprot.writeFieldEnd()
    if self.decisionTaskCompletedEventAttributes is not None:
      oprot.writeFieldBegin('decisionTaskCompletedEventAttributes', TType.STRUCT, 65)
      self.decisionTaskCompletedEventAttributes.write(oprot)
      oprot.writeFieldEnd()
    if self.activityTaskScheduledEventAttributes is not None:
      oprot.writeFieldBegin('activityTaskScheduledEventAttributes', TType.STRUCT, 70)
      self.activityTaskScheduledEventAttributes.write(oprot)
      oprot.writeFieldEnd()
    if self.activityTaskStartedEventAttributes is not None:
      oprot.writeFieldBegin('activityTaskStartedEventAttributes', TType.STRUCT, 75)
      self.activityTaskStartedEventAttributes.write(oprot)
      oprot.writeFieldEnd()
    if self.activityTaskCompletedEventAttributes is not None:
      oprot.writeFieldBegin('activityTaskCompletedEventAttributes', TType.STRUCT, 80)
      self.activityTaskCompletedEventAttributes.write(oprot)
      oprot.writeFieldEnd()
    if self.activityTaskFailedEventAttributes is not None:
      oprot.writeFieldBegin('activityTaskFailedEventAttributes', TType.STRUCT, 85)
      self.activityTaskFailedEventAttributes.write(oprot)
      oprot.writeFieldEnd()
    if self.activityTaskTimedOutEventAttributes is not None:
      oprot.writeFieldBegin('activityTaskTimedOutEventAttributes', TType.STRUCT, 90)
      self.activityTaskTimedOutEventAttributes.write(oprot)
      oprot.writeFieldEnd()
    if self.timerStartedEventAttributes is not None:
      oprot.writeFieldBegin('timerStartedEventAttributes', TType.STRUCT, 95)
      self.timerStartedEventAttributes.write(oprot)
      oprot.writeFieldEnd()
    if self.timerFiredEventAttributes is not None:
      oprot.writeFieldBegin('timerFiredEventAttributes', TType.STRUCT, 100)
      self.timerFiredEventAttributes.write(oprot)
      oprot.writeFieldEnd()
    if self.completeWorkflowExecutionFailedEventAttributes is not None:
      oprot.writeFieldBegin('completeWorkflowExecutionFailedEventAttributes', TType.STRUCT, 105)
      self.completeWorkflowExecutionFailedEventAttributes.write(oprot)
      oprot.writeFieldEnd()
    if self.activityTaskCancelRequestedEventAttributes is not None:
      oprot.writeFieldBegin('activityTaskCancelRequestedEventAttributes', TType.STRUCT, 110)
      self.activityTaskCancelRequestedEventAttributes.write(oprot)
      oprot.writeFieldEnd()
    if self.requestCancelActivityTaskFailedEventAttributes is not None:
      oprot.writeFieldBegin('requestCancelActivityTaskFailedEventAttributes', TType.STRUCT, 120)
      self.requestCancelActivityTaskFailedEventAttributes.write(oprot)
      oprot.writeFieldEnd()
    if self.activityTaskCanceledEventAttributes is not None:
      oprot.writeFieldBegin('activityTaskCanceledEventAttributes', TType.STRUCT, 130)
      self.activityTaskCanceledEventAttributes.write(oprot)
      oprot.writeFieldEnd()
    if self.timerCanceledEventAttributes is not None:
      oprot.writeFieldBegin('timerCanceledEventAttributes', TType.STRUCT, 140)
      self.timerCanceledEventAttributes.write(oprot)
      oprot.writeFieldEnd()
    if self.cancelTimerFailedEventAttributes is not None:
      oprot.writeFieldBegin('cancelTimerFailedEventAttributes', TType.STRUCT, 150)
      self.cancelTimerFailedEventAttributes.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.eventId)
    value = (value * 31) ^ hash(self.timestamp)
    value = (value * 31) ^ hash(self.eventType)
    value = (value * 31) ^ hash(self.workflowExecutionStartedEventAttributes)
    value = (value * 31) ^ hash(self.workflowExecutionCompletedEventAttributes)
    value = (value * 31) ^ hash(self.workflowExecutionFailedEventAttributes)
    value = (value * 31) ^ hash(self.workflowExecutionTimedOutEventAttributes)
    value = (value * 31) ^ hash(self.decisionTaskScheduledEventAttributes)
    value = (value * 31) ^ hash(self.decisionTaskStartedEventAttributes)
    value = (value * 31) ^ hash(self.decisionTaskTimedOutEventAttributes)
    value = (value * 31) ^ hash(self.decisionTaskCompletedEventAttributes)
    value = (value * 31) ^ hash(self.activityTaskScheduledEventAttributes)
    value = (value * 31) ^ hash(self.activityTaskStartedEventAttributes)
    value = (value * 31) ^ hash(self.activityTaskCompletedEventAttributes)
    value = (value * 31) ^ hash(self.activityTaskFailedEventAttributes)
    value = (value * 31) ^ hash(self.activityTaskTimedOutEventAttributes)
    value = (value * 31) ^ hash(self.timerStartedEventAttributes)
    value = (value * 31) ^ hash(self.timerFiredEventAttributes)
    value = (value * 31) ^ hash(self.completeWorkflowExecutionFailedEventAttributes)
    value = (value * 31) ^ hash(self.activityTaskCancelRequestedEventAttributes)
    value = (value * 31) ^ hash(self.requestCancelActivityTaskFailedEventAttributes)
    value = (value * 31) ^ hash(self.activityTaskCanceledEventAttributes)
    value = (value * 31) ^ hash(self.timerCanceledEventAttributes)
    value = (value * 31) ^ hash(self.cancelTimerFailedEventAttributes)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class History:
  """
  Attributes:
   - events
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.LIST, 'events', (TType.STRUCT,(HistoryEvent, HistoryEvent.thrift_spec)), None, ), # 10
  )

  def __init__(self, events=None,):
    self.events = events

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.LIST:
          self.events = []
          (_etype3, _size0) = iprot.readListBegin()
          for _i4 in xrange(_size0):
            _elem5 = HistoryEvent()
            _elem5.read(iprot)
            self.events.append(_elem5)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('History')
    if self.events is not None:
      oprot.writeFieldBegin('events', TType.LIST, 10)
      oprot.writeListBegin(TType.STRUCT, len(self.events))
      for iter6 in self.events:
        iter6.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.events)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StartWorkflowExecutionRequest:
  """
  Attributes:
   - workflowId
   - workflowType
   - taskList
   - input
   - executionStartToCloseTimeoutSeconds
   - taskStartToCloseTimeoutSeconds
   - identity
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'workflowId', unicode, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRUCT, 'workflowType', (WorkflowType, WorkflowType.thrift_spec), None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.STRUCT, 'taskList', (TaskList, TaskList.thrift_spec), None, ), # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.STRING, 'input', str, None, ), # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    (50, TType.I32, 'executionStartToCloseTimeoutSeconds', None, None, ), # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    (60, TType.I32, 'taskStartToCloseTimeoutSeconds', None, None, ), # 60
    None, # 61
    None, # 62
    None, # 63
    None, # 64
    None, # 65
    None, # 66
    None, # 67
    None, # 68
    None, # 69
    (70, TType.STRING, 'identity', unicode, None, ), # 70
  )

  def __init__(self, workflowId=None, workflowType=None, taskList=None, input=None, executionStartToCloseTimeoutSeconds=None, taskStartToCloseTimeoutSeconds=None, identity=None,):
    self.workflowId = workflowId
    self.workflowType = workflowType
    self.taskList = taskList
    self.input = input
    self.executionStartToCloseTimeoutSeconds = executionStartToCloseTimeoutSeconds
    self.taskStartToCloseTimeoutSeconds = taskStartToCloseTimeoutSeconds
    self.identity = identity

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.workflowId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRUCT:
          self.workflowType = WorkflowType()
          self.workflowType.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRUCT:
          self.taskList = TaskList()
          self.taskList.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.STRING:
          self.input = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.I32:
          self.executionStartToCloseTimeoutSeconds = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 60:
        if ftype == TType.I32:
          self.taskStartToCloseTimeoutSeconds = iprot.readI32();
        else:
          iprot.skip(ftype)
      elif fid == 70:
        if ftype == TType.STRING:
          self.identity = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StartWorkflowExecutionRequest')
    if self.workflowId is not None:
      oprot.writeFieldBegin('workflowId', TType.STRING, 10)
      oprot.writeString(self.workflowId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.workflowType is not None:
      oprot.writeFieldBegin('workflowType', TType.STRUCT, 20)
      self.workflowType.write(oprot)
      oprot.writeFieldEnd()
    if self.taskList is not None:
      oprot.writeFieldBegin('taskList', TType.STRUCT, 30)
      self.taskList.write(oprot)
      oprot.writeFieldEnd()
    if self.input is not None:
      oprot.writeFieldBegin('input', TType.STRING, 40)
      oprot.writeString(self.input)
      oprot.writeFieldEnd()
    if self.executionStartToCloseTimeoutSeconds is not None:
      oprot.writeFieldBegin('executionStartToCloseTimeoutSeconds', TType.I32, 50)
      oprot.writeI32(self.executionStartToCloseTimeoutSeconds)
      oprot.writeFieldEnd()
    if self.taskStartToCloseTimeoutSeconds is not None:
      oprot.writeFieldBegin('taskStartToCloseTimeoutSeconds', TType.I32, 60)
      oprot.writeI32(self.taskStartToCloseTimeoutSeconds)
      oprot.writeFieldEnd()
    if self.identity is not None:
      oprot.writeFieldBegin('identity', TType.STRING, 70)
      oprot.writeString(self.identity.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.workflowId)
    value = (value * 31) ^ hash(self.workflowType)
    value = (value * 31) ^ hash(self.taskList)
    value = (value * 31) ^ hash(self.input)
    value = (value * 31) ^ hash(self.executionStartToCloseTimeoutSeconds)
    value = (value * 31) ^ hash(self.taskStartToCloseTimeoutSeconds)
    value = (value * 31) ^ hash(self.identity)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class StartWorkflowExecutionResponse:
  """
  Attributes:
   - runId
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'runId', unicode, None, ), # 10
  )

  def __init__(self, runId=None,):
    self.runId = runId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.runId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('StartWorkflowExecutionResponse')
    if self.runId is not None:
      oprot.writeFieldBegin('runId', TType.STRING, 10)
      oprot.writeString(self.runId.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.runId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PollForDecisionTaskRequest:
  """
  Attributes:
   - taskList
   - identity
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRUCT, 'taskList', (TaskList, TaskList.thrift_spec), None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRING, 'identity', unicode, None, ), # 20
  )

  def __init__(self, taskList=None, identity=None,):
    self.taskList = taskList
    self.identity = identity

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRUCT:
          self.taskList = TaskList()
          self.taskList.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.identity = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PollForDecisionTaskRequest')
    if self.taskList is not None:
      oprot.writeFieldBegin('taskList', TType.STRUCT, 10)
      self.taskList.write(oprot)
      oprot.writeFieldEnd()
    if self.identity is not None:
      oprot.writeFieldBegin('identity', TType.STRING, 20)
      oprot.writeString(self.identity.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.taskList)
    value = (value * 31) ^ hash(self.identity)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PollForDecisionTaskResponse:
  """
  Attributes:
   - taskToken
   - workflowExecution
   - workflowType
   - previousStartedEventId
   - startedEventId
   - history
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'taskToken', str, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRUCT, 'workflowExecution', (WorkflowExecution, WorkflowExecution.thrift_spec), None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.STRUCT, 'workflowType', (WorkflowType, WorkflowType.thrift_spec), None, ), # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.I64, 'previousStartedEventId', None, None, ), # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    (50, TType.I64, 'startedEventId', None, None, ), # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    (60, TType.STRUCT, 'history', (History, History.thrift_spec), None, ), # 60
  )

  def __init__(self, taskToken=None, workflowExecution=None, workflowType=None, previousStartedEventId=None, startedEventId=None, history=None,):
    self.taskToken = taskToken
    self.workflowExecution = workflowExecution
    self.workflowType = workflowType
    self.previousStartedEventId = previousStartedEventId
    self.startedEventId = startedEventId
    self.history = history

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.taskToken = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRUCT:
          self.workflowExecution = WorkflowExecution()
          self.workflowExecution.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRUCT:
          self.workflowType = WorkflowType()
          self.workflowType.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.I64:
          self.previousStartedEventId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.I64:
          self.startedEventId = iprot.readI64();
        else:
          iprot.skip(ftype)
      elif fid == 60:
        if ftype == TType.STRUCT:
          self.history = History()
          self.history.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PollForDecisionTaskResponse')
    if self.taskToken is not None:
      oprot.writeFieldBegin('taskToken', TType.STRING, 10)
      oprot.writeString(self.taskToken)
      oprot.writeFieldEnd()
    if self.workflowExecution is not None:
      oprot.writeFieldBegin('workflowExecution', TType.STRUCT, 20)
      self.workflowExecution.write(oprot)
      oprot.writeFieldEnd()
    if self.workflowType is not None:
      oprot.writeFieldBegin('workflowType', TType.STRUCT, 30)
      self.workflowType.write(oprot)
      oprot.writeFieldEnd()
    if self.previousStartedEventId is not None:
      oprot.writeFieldBegin('previousStartedEventId', TType.I64, 40)
      oprot.writeI64(self.previousStartedEventId)
      oprot.writeFieldEnd()
    if self.startedEventId is not None:
      oprot.writeFieldBegin('startedEventId', TType.I64, 50)
      oprot.writeI64(self.startedEventId)
      oprot.writeFieldEnd()
    if self.history is not None:
      oprot.writeFieldBegin('history', TType.STRUCT, 60)
      self.history.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.taskToken)
    value = (value * 31) ^ hash(self.workflowExecution)
    value = (value * 31) ^ hash(self.workflowType)
    value = (value * 31) ^ hash(self.previousStartedEventId)
    value = (value * 31) ^ hash(self.startedEventId)
    value = (value * 31) ^ hash(self.history)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RespondDecisionTaskCompletedRequest:
  """
  Attributes:
   - taskToken
   - decisions
   - executionContext
   - identity
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'taskToken', str, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.LIST, 'decisions', (TType.STRUCT,(Decision, Decision.thrift_spec)), None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.STRING, 'executionContext', str, None, ), # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.STRING, 'identity', unicode, None, ), # 40
  )

  def __init__(self, taskToken=None, decisions=None, executionContext=None, identity=None,):
    self.taskToken = taskToken
    self.decisions = decisions
    self.executionContext = executionContext
    self.identity = identity

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.taskToken = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.LIST:
          self.decisions = []
          (_etype10, _size7) = iprot.readListBegin()
          for _i11 in xrange(_size7):
            _elem12 = Decision()
            _elem12.read(iprot)
            self.decisions.append(_elem12)
          iprot.readListEnd()
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRING:
          self.executionContext = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.STRING:
          self.identity = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RespondDecisionTaskCompletedRequest')
    if self.taskToken is not None:
      oprot.writeFieldBegin('taskToken', TType.STRING, 10)
      oprot.writeString(self.taskToken)
      oprot.writeFieldEnd()
    if self.decisions is not None:
      oprot.writeFieldBegin('decisions', TType.LIST, 20)
      oprot.writeListBegin(TType.STRUCT, len(self.decisions))
      for iter13 in self.decisions:
        iter13.write(oprot)
      oprot.writeListEnd()
      oprot.writeFieldEnd()
    if self.executionContext is not None:
      oprot.writeFieldBegin('executionContext', TType.STRING, 30)
      oprot.writeString(self.executionContext)
      oprot.writeFieldEnd()
    if self.identity is not None:
      oprot.writeFieldBegin('identity', TType.STRING, 40)
      oprot.writeString(self.identity.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.taskToken)
    value = (value * 31) ^ hash(self.decisions)
    value = (value * 31) ^ hash(self.executionContext)
    value = (value * 31) ^ hash(self.identity)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PollForActivityTaskRequest:
  """
  Attributes:
   - taskList
   - identity
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRUCT, 'taskList', (TaskList, TaskList.thrift_spec), None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRING, 'identity', unicode, None, ), # 20
  )

  def __init__(self, taskList=None, identity=None,):
    self.taskList = taskList
    self.identity = identity

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRUCT:
          self.taskList = TaskList()
          self.taskList.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.identity = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PollForActivityTaskRequest')
    if self.taskList is not None:
      oprot.writeFieldBegin('taskList', TType.STRUCT, 10)
      self.taskList.write(oprot)
      oprot.writeFieldEnd()
    if self.identity is not None:
      oprot.writeFieldBegin('identity', TType.STRING, 20)
      oprot.writeString(self.identity.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.taskList)
    value = (value * 31) ^ hash(self.identity)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class PollForActivityTaskResponse:
  """
  Attributes:
   - taskToken
   - workflowExecution
   - activityId
   - activityType
   - input
   - startedEventId
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'taskToken', str, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRUCT, 'workflowExecution', (WorkflowExecution, WorkflowExecution.thrift_spec), None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.STRING, 'activityId', unicode, None, ), # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.STRUCT, 'activityType', (ActivityType, ActivityType.thrift_spec), None, ), # 40
    None, # 41
    None, # 42
    None, # 43
    None, # 44
    None, # 45
    None, # 46
    None, # 47
    None, # 48
    None, # 49
    (50, TType.STRING, 'input', str, None, ), # 50
    None, # 51
    None, # 52
    None, # 53
    None, # 54
    None, # 55
    None, # 56
    None, # 57
    None, # 58
    None, # 59
    (60, TType.I64, 'startedEventId', None, None, ), # 60
  )

  def __init__(self, taskToken=None, workflowExecution=None, activityId=None, activityType=None, input=None, startedEventId=None,):
    self.taskToken = taskToken
    self.workflowExecution = workflowExecution
    self.activityId = activityId
    self.activityType = activityType
    self.input = input
    self.startedEventId = startedEventId

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.taskToken = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRUCT:
          self.workflowExecution = WorkflowExecution()
          self.workflowExecution.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRING:
          self.activityId = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.STRUCT:
          self.activityType = ActivityType()
          self.activityType.read(iprot)
        else:
          iprot.skip(ftype)
      elif fid == 50:
        if ftype == TType.STRING:
          self.input = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 60:
        if ftype == TType.I64:
          self.startedEventId = iprot.readI64();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('PollForActivityTaskResponse')
    if self.taskToken is not None:
      oprot.writeFieldBegin('taskToken', TType.STRING, 10)
      oprot.writeString(self.taskToken)
      oprot.writeFieldEnd()
    if self.workflowExecution is not None:
      oprot.writeFieldBegin('workflowExecution', TType.STRUCT, 20)
      self.workflowExecution.write(oprot)
      oprot.writeFieldEnd()
    if self.activityId is not None:
      oprot.writeFieldBegin('activityId', TType.STRING, 30)
      oprot.writeString(self.activityId.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.activityType is not None:
      oprot.writeFieldBegin('activityType', TType.STRUCT, 40)
      self.activityType.write(oprot)
      oprot.writeFieldEnd()
    if self.input is not None:
      oprot.writeFieldBegin('input', TType.STRING, 50)
      oprot.writeString(self.input)
      oprot.writeFieldEnd()
    if self.startedEventId is not None:
      oprot.writeFieldBegin('startedEventId', TType.I64, 60)
      oprot.writeI64(self.startedEventId)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.taskToken)
    value = (value * 31) ^ hash(self.workflowExecution)
    value = (value * 31) ^ hash(self.activityId)
    value = (value * 31) ^ hash(self.activityType)
    value = (value * 31) ^ hash(self.input)
    value = (value * 31) ^ hash(self.startedEventId)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RecordActivityTaskHeartbeatRequest:
  """
  Attributes:
   - taskToken
   - details
   - identity
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'taskToken', str, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRING, 'details', str, None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.STRING, 'identity', unicode, None, ), # 30
  )

  def __init__(self, taskToken=None, details=None, identity=None,):
    self.taskToken = taskToken
    self.details = details
    self.identity = identity

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.taskToken = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.details = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRING:
          self.identity = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RecordActivityTaskHeartbeatRequest')
    if self.taskToken is not None:
      oprot.writeFieldBegin('taskToken', TType.STRING, 10)
      oprot.writeString(self.taskToken)
      oprot.writeFieldEnd()
    if self.details is not None:
      oprot.writeFieldBegin('details', TType.STRING, 20)
      oprot.writeString(self.details)
      oprot.writeFieldEnd()
    if self.identity is not None:
      oprot.writeFieldBegin('identity', TType.STRING, 30)
      oprot.writeString(self.identity.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.taskToken)
    value = (value * 31) ^ hash(self.details)
    value = (value * 31) ^ hash(self.identity)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RecordActivityTaskHeartbeatResponse:
  """
  Attributes:
   - cancelRequested
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.BOOL, 'cancelRequested', None, None, ), # 10
  )

  def __init__(self, cancelRequested=None,):
    self.cancelRequested = cancelRequested

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.BOOL:
          self.cancelRequested = iprot.readBool();
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RecordActivityTaskHeartbeatResponse')
    if self.cancelRequested is not None:
      oprot.writeFieldBegin('cancelRequested', TType.BOOL, 10)
      oprot.writeBool(self.cancelRequested)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.cancelRequested)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RespondActivityTaskCompletedRequest:
  """
  Attributes:
   - taskToken
   - result
   - identity
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'taskToken', str, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRING, 'result', str, None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.STRING, 'identity', unicode, None, ), # 30
  )

  def __init__(self, taskToken=None, result=None, identity=None,):
    self.taskToken = taskToken
    self.result = result
    self.identity = identity

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.taskToken = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.result = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRING:
          self.identity = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RespondActivityTaskCompletedRequest')
    if self.taskToken is not None:
      oprot.writeFieldBegin('taskToken', TType.STRING, 10)
      oprot.writeString(self.taskToken)
      oprot.writeFieldEnd()
    if self.result is not None:
      oprot.writeFieldBegin('result', TType.STRING, 20)
      oprot.writeString(self.result)
      oprot.writeFieldEnd()
    if self.identity is not None:
      oprot.writeFieldBegin('identity', TType.STRING, 30)
      oprot.writeString(self.identity.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.taskToken)
    value = (value * 31) ^ hash(self.result)
    value = (value * 31) ^ hash(self.identity)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RespondActivityTaskFailedRequest:
  """
  Attributes:
   - taskToken
   - reason
   - details
   - identity
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'taskToken', str, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRING, 'reason', unicode, None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.STRING, 'details', str, None, ), # 30
    None, # 31
    None, # 32
    None, # 33
    None, # 34
    None, # 35
    None, # 36
    None, # 37
    None, # 38
    None, # 39
    (40, TType.STRING, 'identity', unicode, None, ), # 40
  )

  def __init__(self, taskToken=None, reason=None, details=None, identity=None,):
    self.taskToken = taskToken
    self.reason = reason
    self.details = details
    self.identity = identity

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.taskToken = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.reason = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRING:
          self.details = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 40:
        if ftype == TType.STRING:
          self.identity = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RespondActivityTaskFailedRequest')
    if self.taskToken is not None:
      oprot.writeFieldBegin('taskToken', TType.STRING, 10)
      oprot.writeString(self.taskToken)
      oprot.writeFieldEnd()
    if self.reason is not None:
      oprot.writeFieldBegin('reason', TType.STRING, 20)
      oprot.writeString(self.reason.encode('utf-8'))
      oprot.writeFieldEnd()
    if self.details is not None:
      oprot.writeFieldBegin('details', TType.STRING, 30)
      oprot.writeString(self.details)
      oprot.writeFieldEnd()
    if self.identity is not None:
      oprot.writeFieldBegin('identity', TType.STRING, 40)
      oprot.writeString(self.identity.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.taskToken)
    value = (value * 31) ^ hash(self.reason)
    value = (value * 31) ^ hash(self.details)
    value = (value * 31) ^ hash(self.identity)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class RespondActivityTaskCanceledRequest:
  """
  Attributes:
   - taskToken
   - details
   - identity
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRING, 'taskToken', str, None, ), # 10
    None, # 11
    None, # 12
    None, # 13
    None, # 14
    None, # 15
    None, # 16
    None, # 17
    None, # 18
    None, # 19
    (20, TType.STRING, 'details', str, None, ), # 20
    None, # 21
    None, # 22
    None, # 23
    None, # 24
    None, # 25
    None, # 26
    None, # 27
    None, # 28
    None, # 29
    (30, TType.STRING, 'identity', unicode, None, ), # 30
  )

  def __init__(self, taskToken=None, details=None, identity=None,):
    self.taskToken = taskToken
    self.details = details
    self.identity = identity

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRING:
          self.taskToken = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 20:
        if ftype == TType.STRING:
          self.details = iprot.readString();
        else:
          iprot.skip(ftype)
      elif fid == 30:
        if ftype == TType.STRING:
          self.identity = iprot.readString().decode('utf-8')
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('RespondActivityTaskCanceledRequest')
    if self.taskToken is not None:
      oprot.writeFieldBegin('taskToken', TType.STRING, 10)
      oprot.writeString(self.taskToken)
      oprot.writeFieldEnd()
    if self.details is not None:
      oprot.writeFieldBegin('details', TType.STRING, 20)
      oprot.writeString(self.details)
      oprot.writeFieldEnd()
    if self.identity is not None:
      oprot.writeFieldBegin('identity', TType.STRING, 30)
      oprot.writeString(self.identity.encode('utf-8'))
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.taskToken)
    value = (value * 31) ^ hash(self.details)
    value = (value * 31) ^ hash(self.identity)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetWorkflowExecutionHistoryRequest:
  """
  Attributes:
   - execution
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRUCT, 'execution', (WorkflowExecution, WorkflowExecution.thrift_spec), None, ), # 10
  )

  def __init__(self, execution=None,):
    self.execution = execution

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRUCT:
          self.execution = WorkflowExecution()
          self.execution.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetWorkflowExecutionHistoryRequest')
    if self.execution is not None:
      oprot.writeFieldBegin('execution', TType.STRUCT, 10)
      self.execution.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.execution)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)

class GetWorkflowExecutionHistoryResponse:
  """
  Attributes:
   - history
  """

  thrift_spec = (
    None, # 0
    None, # 1
    None, # 2
    None, # 3
    None, # 4
    None, # 5
    None, # 6
    None, # 7
    None, # 8
    None, # 9
    (10, TType.STRUCT, 'history', (History, History.thrift_spec), None, ), # 10
  )

  def __init__(self, history=None,):
    self.history = history

  def read(self, iprot):
    if iprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and isinstance(iprot.trans, TTransport.CReadableTransport) and self.thrift_spec is not None and fastbinary is not None:
      fastbinary.decode_binary(self, iprot.trans, (self.__class__, self.thrift_spec))
      return
    iprot.readStructBegin()
    while True:
      (fname, ftype, fid) = iprot.readFieldBegin()
      if ftype == TType.STOP:
        break
      if fid == 10:
        if ftype == TType.STRUCT:
          self.history = History()
          self.history.read(iprot)
        else:
          iprot.skip(ftype)
      else:
        iprot.skip(ftype)
      iprot.readFieldEnd()
    iprot.readStructEnd()

  def write(self, oprot):
    if oprot.__class__ == TBinaryProtocol.TBinaryProtocolAccelerated and self.thrift_spec is not None and fastbinary is not None:
      oprot.trans.write(fastbinary.encode_binary(self, (self.__class__, self.thrift_spec)))
      return
    oprot.writeStructBegin('GetWorkflowExecutionHistoryResponse')
    if self.history is not None:
      oprot.writeFieldBegin('history', TType.STRUCT, 10)
      self.history.write(oprot)
      oprot.writeFieldEnd()
    oprot.writeFieldStop()
    oprot.writeStructEnd()

  def validate(self):
    return


  def __hash__(self):
    value = 17
    value = (value * 31) ^ hash(self.history)
    return value

  def __repr__(self):
    L = ['%s=%r' % (key, value)
      for key, value in self.__dict__.iteritems()]
    return '%s(%s)' % (self.__class__.__name__, ', '.join(L))

  def __eq__(self, other):
    return isinstance(other, self.__class__) and self.__dict__ == other.__dict__

  def __ne__(self, other):
    return not (self == other)
