// Automatically generated by MockGen. DO NOT EDIT!
// Source: code.uber.internal/devexp/minions-client-go.git/client/flow (interfaces: WorkflowContext)

package flow

import (
	gomock "github.com/golang/mock/gomock"
)

// Mock of WorkflowContext interface
type MockWorkflowContext struct {
	ctrl     *gomock.Controller
	recorder *_MockWorkflowContextRecorder
}

// Recorder for MockWorkflowContext (not exported)
type _MockWorkflowContextRecorder struct {
	mock *MockWorkflowContext
}

func NewMockWorkflowContext(ctrl *gomock.Controller) *MockWorkflowContext {
	mock := &MockWorkflowContext{ctrl: ctrl}
	mock.recorder = &_MockWorkflowContextRecorder{mock}
	return mock
}

func (_m *MockWorkflowContext) EXPECT() *_MockWorkflowContextRecorder {
	return _m.recorder
}

func (_m *MockWorkflowContext) Complete(_param0 []byte, _param1 Error) {
	_m.ctrl.Call(_m, "Complete", _param0, _param1)
}

func (_mr *_MockWorkflowContextRecorder) Complete(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Complete", arg0, arg1)
}

func (_m *MockWorkflowContext) ExecuteActivity(_param0 ExecuteActivityParameters, _param1 resultHandler) {
	_m.ctrl.Call(_m, "ExecuteActivity", _param0, _param1)
}

func (_mr *_MockWorkflowContextRecorder) ExecuteActivity(arg0, arg1 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "ExecuteActivity", arg0, arg1)
}

func (_m *MockWorkflowContext) WorkflowInfo() *WorkflowInfo {
	ret := _m.ctrl.Call(_m, "WorkflowInfo")
	ret0, _ := ret[0].(*WorkflowInfo)
	return ret0
}

func (_mr *_MockWorkflowContextRecorder) WorkflowInfo() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "WorkflowInfo")
}
